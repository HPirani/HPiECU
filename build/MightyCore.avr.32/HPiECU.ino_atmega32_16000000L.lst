
C:\Users\Hosein\AppData\Local\Temp\arduino\sketches\300E334CC4ADEBA107696C4B2C52C16A/HPiECU.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__dtors_end>
       4:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__vector_1>
       8:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__vector_2>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__vector_4>
      14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      18:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__vector_6>
      1c:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__vector_7>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__vector_9>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 85 11 	jmp	0x230a	; 0x230a <__vector_11>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__vector_13>
      38:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__vector_14>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>

00000054 <__trampolines_end>:
__trampolines_start():
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000008f <port_to_mode_PGM>:
      8f:	00 00 3a 00 37 00 34 00 31 00                       ..:.7.4.1.

00000099 <port_to_input_PGM>:
      99:	00 00 39 00 36 00 33 00 30 00                       ..9.6.3.0.

000000a3 <digital_pin_to_timer_PGM>:
      a3:	00 00 00 02 00 00 00 00 00 00 00 00 05 04 00 07     ................
	...

000000c3 <digital_pin_to_bit_mask_PGM>:
      c3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      d3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000e3 <port_to_output_PGM>:
      e3:	00 00 3b 00 38 00 35 00 32 00                       ..;.8.5.2.

000000ed <digital_pin_to_port_PGM>:
      ed:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      fd:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000010d <tone_pin_to_timer_PGM>:
     10d:	02                                                  .

0000010e <__ctors_start>:
__ctors_start():
     10e:	77 14       	cp	r7, r7

00000110 <__ctors_end>:
__dtors_start():
     110:	90 1e       	adc	r9, r16

00000112 <__dtors_end>:
__dtors_end():
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf e5       	ldi	r28, 0x5F	; 95
     118:	d8 e0       	ldi	r29, 0x08	; 8
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     11e:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     120:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     122:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     124:	e2 ef       	ldi	r30, 0xF2	; 242
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     126:	fa e4       	ldi	r31, 0x4A	; 74
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     12a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     12c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     12e:	aa 3a       	cpi	r26, 0xAA	; 170
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     130:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     134:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     136:	aa ea       	ldi	r26, 0xAA	; 170
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     138:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     13e:	af 32       	cpi	r26, 0x2F	; 47
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     140:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>

00000144 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     144:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     146:	c8 e8       	ldi	r28, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     148:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     14a:	04 c0       	rjmp	.+8      	; 0x154 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     14c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     14e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     150:	0e 94 5d 23 	call	0x46ba	; 0x46ba <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     154:	c7 38       	cpi	r28, 0x87	; 135
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     156:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     158:	c9 f7       	brne	.-14     	; 0x14c <__do_global_ctors+0x8>
     15a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <main>
     15e:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__do_global_dtors>

00000162 <__bad_interrupt>:
__vector_12():
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <turnOffPWM>:
turnOffPWM():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     166:	84 30       	cpi	r24, 0x04	; 4
     168:	59 f0       	breq	.+22     	; 0x180 <turnOffPWM+0x1a>
     16a:	28 f4       	brcc	.+10     	; 0x176 <turnOffPWM+0x10>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	99 f0       	breq	.+38     	; 0x196 <turnOffPWM+0x30>
     170:	82 30       	cpi	r24, 0x02	; 2
     172:	89 f0       	breq	.+34     	; 0x196 <turnOffPWM+0x30>
     174:	08 95       	ret
     176:	85 30       	cpi	r24, 0x05	; 5
     178:	39 f0       	breq	.+14     	; 0x188 <turnOffPWM+0x22>
     17a:	87 30       	cpi	r24, 0x07	; 7
     17c:	41 f0       	breq	.+16     	; 0x18e <turnOffPWM+0x28>
     17e:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     180:	8f b5       	in	r24, 0x2f	; 47
     182:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     184:	8f bd       	out	0x2f, r24	; 47
     186:	08 95       	ret
     188:	8f b5       	in	r24, 0x2f	; 47
     18a:	8f 7d       	andi	r24, 0xDF	; 223
     18c:	fb cf       	rjmp	.-10     	; 0x184 <turnOffPWM+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     18e:	85 b5       	in	r24, 0x25	; 37
     190:	8f 7d       	andi	r24, 0xDF	; 223
     192:	85 bd       	out	0x25, r24	; 37
     194:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
     196:	83 b7       	in	r24, 0x33	; 51
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     19c:	08 95       	ret

0000019e <digitalRead>:
digitalRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     1a2:	28 2f       	mov	r18, r24
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	ed 55       	subi	r30, 0x5D	; 93
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     1ae:	f9 01       	movw	r30, r18
     1b0:	ed 53       	subi	r30, 0x3D	; 61
     1b2:	ff 4f       	sbci	r31, 0xFF	; 255
     1b4:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     1b6:	f9 01       	movw	r30, r18
     1b8:	e3 51       	subi	r30, 0x13	; 19
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     1be:	cc 23       	and	r28, r28
     1c0:	a1 f0       	breq	.+40     	; 0x1ea <digitalRead+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     1c2:	81 11       	cpse	r24, r1
     1c4:	0e 94 b3 00 	call	0x166	; 0x166 <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     1c8:	ec 2f       	mov	r30, r28
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	ee 0f       	add	r30, r30
     1ce:	ff 1f       	adc	r31, r31
     1d0:	e7 56       	subi	r30, 0x67	; 103
     1d2:	ff 4f       	sbci	r31, 0xFF	; 255
     1d4:	a5 91       	lpm	r26, Z+
     1d6:	b4 91       	lpm	r27, Z
     1d8:	ec 91       	ld	r30, X
     1da:	ed 23       	and	r30, r29
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <digitalRead+0x46>
     1e2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	fa cf       	rjmp	.-12     	; 0x1e4 <digitalRead+0x46>

000001f0 <digitalWrite>:
digitalWrite():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     1f6:	28 2f       	mov	r18, r24
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	ed 55       	subi	r30, 0x5D	; 93
     1fe:	ff 4f       	sbci	r31, 0xFF	; 255
     200:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     202:	f9 01       	movw	r30, r18
     204:	ed 53       	subi	r30, 0x3D	; 61
     206:	ff 4f       	sbci	r31, 0xFF	; 255
     208:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     20a:	f9 01       	movw	r30, r18
     20c:	e3 51       	subi	r30, 0x13	; 19
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     212:	cc 23       	and	r28, r28
     214:	a9 f0       	breq	.+42     	; 0x240 <digitalWrite+0x50>
     216:	16 2f       	mov	r17, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     218:	81 11       	cpse	r24, r1
     21a:	0e 94 b3 00 	call	0x166	; 0x166 <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     21e:	ec 2f       	mov	r30, r28
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	ee 0f       	add	r30, r30
     224:	ff 1f       	adc	r31, r31
     226:	ed 51       	subi	r30, 0x1D	; 29
     228:	ff 4f       	sbci	r31, 0xFF	; 255
     22a:	a5 91       	lpm	r26, Z+
     22c:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     22e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     230:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     232:	ec 91       	ld	r30, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     234:	11 11       	cpse	r17, r1
     236:	08 c0       	rjmp	.+16     	; 0x248 <digitalWrite+0x58>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     238:	d0 95       	com	r29
     23a:	de 23       	and	r29, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     23c:	dc 93       	st	X, r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     23e:	8f bf       	out	0x3f, r24	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     248:	de 2b       	or	r29, r30
     24a:	f8 cf       	rjmp	.-16     	; 0x23c <digitalWrite+0x4c>

0000024c <pinMode>:
pinMode():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	ed 53       	subi	r30, 0x3D	; 61
     256:	ff 4f       	sbci	r31, 0xFF	; 255
     258:	24 91       	lpm	r18, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     25a:	83 51       	subi	r24, 0x13	; 19
     25c:	9f 4f       	sbci	r25, 0xFF	; 255
     25e:	fc 01       	movw	r30, r24
     260:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     262:	88 23       	and	r24, r24
     264:	d1 f0       	breq	.+52     	; 0x29a <pinMode+0x4e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	fc 01       	movw	r30, r24
     26e:	e1 57       	subi	r30, 0x71	; 113
     270:	ff 4f       	sbci	r31, 0xFF	; 255
     272:	a5 91       	lpm	r26, Z+
     274:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     276:	fc 01       	movw	r30, r24
     278:	ed 51       	subi	r30, 0x1D	; 29
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	c5 91       	lpm	r28, Z+
     27e:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     280:	61 11       	cpse	r22, r1
     282:	0e c0       	rjmp	.+28     	; 0x2a0 <pinMode+0x54>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     284:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     286:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     288:	8c 91       	ld	r24, X
     28a:	e2 2f       	mov	r30, r18
     28c:	e0 95       	com	r30
     28e:	8e 23       	and	r24, r30
     290:	8c 93       	st	X, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     292:	28 81       	ld	r18, Y
     294:	e2 23       	and	r30, r18
     296:	e8 83       	st	Y, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     298:	9f bf       	out	0x3f, r25	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     2a0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     2a2:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     2a4:	ec 91       	ld	r30, X
     2a6:	e2 2b       	or	r30, r18
     2a8:	ec 93       	st	X, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     2aa:	8f bf       	out	0x3f, r24	; 63
     2ac:	f6 cf       	rjmp	.-20     	; 0x29a <pinMode+0x4e>

000002ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]>:
tone():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:280



// Frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
     2ae:	8f 92       	push	r8
     2b0:	9f 92       	push	r9
     2b2:	af 92       	push	r10
     2b4:	bf 92       	push	r11
     2b6:	cf 92       	push	r12
     2b8:	df 92       	push	r13
     2ba:	ef 92       	push	r14
     2bc:	ff 92       	push	r15
     2be:	cf 93       	push	r28
toneBegin():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:171
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     2c0:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <tone_pins>
     2c4:	2c 31       	cpi	r18, 0x1C	; 28
     2c6:	61 f0       	breq	.+24     	; 0x2e0 <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x32>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:178
    }
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
     2c8:	2f 3f       	cpi	r18, 0xFF	; 255
     2ca:	81 f0       	breq	.+32     	; 0x2ec <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x3e>
tone():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
     2cc:	cf 91       	pop	r28
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	bf 90       	pop	r11
     2d8:	af 90       	pop	r10
     2da:	9f 90       	pop	r9
     2dc:	8f 90       	pop	r8
     2de:	08 95       	ret
toneBegin():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:172
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
     2e0:	ed e0       	ldi	r30, 0x0D	; 13
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	c4 91       	lpm	r28, Z
tone():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
     2e6:	c7 fd       	sbrc	r28, 7
     2e8:	f1 cf       	rjmp	.-30     	; 0x2cc <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x1e>
     2ea:	3f c0       	rjmp	.+126    	; 0x36a <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0xbc>
toneBegin():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:179
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
     2ec:	2c e1       	ldi	r18, 0x1C	; 28
     2ee:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <tone_pins>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:180
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     2f2:	ed e0       	ldi	r30, 0x0D	; 13
     2f4:	f1 e0       	ldi	r31, 0x01	; 1
     2f6:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:185
      break;
    }
  }

  if (_timer != -1)
     2f8:	cf 3f       	cpi	r28, 0xFF	; 255
     2fa:	41 f3       	breq	.-48     	; 0x2cc <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
     2fc:	c1 30       	cpi	r28, 0x01	; 1
     2fe:	f1 f0       	breq	.+60     	; 0x33c <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x8e>
     300:	c2 30       	cpi	r28, 0x02	; 2
     302:	89 f7       	brne	.-30     	; 0x2e6 <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x38>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:220
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
     304:	15 bc       	out	0x25, r1	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:221
        TCCR2B = 0;
     306:	15 bc       	out	0x25, r1	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:222
        bitWrite(TCCR2A, WGM21, 1);
     308:	25 b5       	in	r18, 0x25	; 37
     30a:	28 60       	ori	r18, 0x08	; 8
     30c:	25 bd       	out	0x25, r18	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:223
        bitWrite(TCCR2B, CS20, 1);
     30e:	25 b5       	in	r18, 0x25	; 37
     310:	21 60       	ori	r18, 0x01	; 1
     312:	25 bd       	out	0x25, r18	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:224
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
     314:	e9 e0       	ldi	r30, 0x09	; 9
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	e4 91       	lpm	r30, Z
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	ed 51       	subi	r30, 0x1D	; 29
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	25 91       	lpm	r18, Z+
     326:	34 91       	lpm	r19, Z
     328:	30 93 4e 02 	sts	0x024E, r19	; 0x80024e <timer2_pin_port+0x1>
     32c:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <timer2_pin_port>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:225
        timer2_pin_mask = digitalPinToBitMask(_pin);
     330:	ef ed       	ldi	r30, 0xDF	; 223
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	e4 91       	lpm	r30, Z
     336:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <timer2_pin_mask>
     33a:	17 c0       	rjmp	.+46     	; 0x36a <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0xbc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:208
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
     33c:	1f bc       	out	0x2f, r1	; 47
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:209
        TCCR1B = 0;
     33e:	1e bc       	out	0x2e, r1	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:210
        bitWrite(TCCR1B, WGM12, 1);
     340:	2e b5       	in	r18, 0x2e	; 46
     342:	28 60       	ori	r18, 0x08	; 8
     344:	2e bd       	out	0x2e, r18	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:211
        bitWrite(TCCR1B, CS10, 1);
     346:	2e b5       	in	r18, 0x2e	; 46
     348:	21 60       	ori	r18, 0x01	; 1
     34a:	2e bd       	out	0x2e, r18	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:212
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
     34c:	e9 e0       	ldi	r30, 0x09	; 9
     34e:	f1 e0       	ldi	r31, 0x01	; 1
     350:	e4 91       	lpm	r30, Z
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	ed 51       	subi	r30, 0x1D	; 29
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	25 91       	lpm	r18, Z+
     35e:	34 91       	lpm	r19, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:213
        timer1_pin_mask = digitalPinToBitMask(_pin);
     360:	ef ed       	ldi	r30, 0xDF	; 223
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	e4 91       	lpm	r30, Z
     366:	e0 93 4f 02 	sts	0x024F, r30	; 0x80024f <timer1_pin_mask>
     36a:	6c 01       	movw	r12, r24
tone():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:292
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	8c e1       	ldi	r24, 0x1C	; 28
     370:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
     374:	f1 2c       	mov	r15, r1
     376:	e1 2c       	mov	r14, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:295

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
     378:	8c 2f       	mov	r24, r28
     37a:	8d 7f       	andi	r24, 0xFD	; 253
     37c:	09 f0       	breq	.+2      	; 0x380 <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0xd2>
     37e:	a3 c0       	rjmp	.+326    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:297
    {
      ocr = F_CPU / frequency / 2 - 1;
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	72 e1       	ldi	r23, 0x12	; 18
     384:	8a e7       	ldi	r24, 0x7A	; 122
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	a7 01       	movw	r20, r14
     38a:	96 01       	movw	r18, r12
     38c:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     390:	49 01       	movw	r8, r18
     392:	5a 01       	movw	r10, r20
     394:	da 01       	movw	r26, r20
     396:	c9 01       	movw	r24, r18
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	a1 09       	sbc	r26, r1
     39c:	b1 09       	sbc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:299
      prescalarbits = 0x01;  // ck/1: same for both timers
      if (ocr > 255)
     39e:	8f 3f       	cpi	r24, 0xFF	; 255
     3a0:	91 05       	cpc	r25, r1
     3a2:	a1 05       	cpc	r26, r1
     3a4:	b1 05       	cpc	r27, r1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0xfc>
     3a8:	dc f4       	brge	.+54     	; 0x3e0 <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x132>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:297
    pinMode(_pin, OUTPUT);

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
     3aa:	9c 01       	movw	r18, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:298
      prescalarbits = 0x01;  // ck/1: same for both timers
     3ac:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:344
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0xf8) | prescalarbits;
     3ae:	95 b5       	in	r25, 0x25	; 37
     3b0:	98 7f       	andi	r25, 0xF8	; 248
     3b2:	89 2b       	or	r24, r25
     3b4:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
     3b6:	c1 30       	cpi	r28, 0x01	; 1
     3b8:	09 f4       	brne	.+2      	; 0x3bc <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x10e>
     3ba:	ac c0       	rjmp	.+344    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     3bc:	c2 30       	cpi	r28, 0x02	; 2
     3be:	09 f0       	breq	.+2      	; 0x3c2 <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x114>
     3c0:	85 cf       	rjmp	.-246    	; 0x2cc <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:425
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
     3c2:	23 bd       	out	0x23, r18	; 35
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:426
        timer2_toggle_count = toggle_count;
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	9f ef       	ldi	r25, 0xFF	; 255
     3c8:	dc 01       	movw	r26, r24
     3ca:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <timer2_toggle_count>
     3ce:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <timer2_toggle_count+0x1>
     3d2:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <timer2_toggle_count+0x2>
     3d6:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <timer2_toggle_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:427
        bitWrite(TIMSK2, OCIE2A, 1);
     3da:	89 b7       	in	r24, 0x39	; 57
     3dc:	80 68       	ori	r24, 0x80	; 128
     3de:	a9 c0       	rjmp	.+338    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:301
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0x01;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
     3e0:	60 e4       	ldi	r22, 0x40	; 64
     3e2:	72 e4       	ldi	r23, 0x42	; 66
     3e4:	8f e0       	ldi	r24, 0x0F	; 15
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a7 01       	movw	r20, r14
     3ea:	96 01       	movw	r18, r12
     3ec:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     3f0:	21 50       	subi	r18, 0x01	; 1
     3f2:	31 09       	sbc	r19, r1
     3f4:	41 09       	sbc	r20, r1
     3f6:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:304
        prescalarbits = 0x02;  // ck/8: same for both timers

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
     3f8:	c2 30       	cpi	r28, 0x02	; 2
     3fa:	09 f0       	breq	.+2      	; 0x3fe <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x150>
     3fc:	b0 c0       	rjmp	.+352    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     3fe:	2f 3f       	cpi	r18, 0xFF	; 255
     400:	31 05       	cpc	r19, r1
     402:	41 05       	cpc	r20, r1
     404:	51 05       	cpc	r21, r1
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	0c f4       	brge	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	af c0       	rjmp	.+350    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:306
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
     40c:	60 e9       	ldi	r22, 0x90	; 144
     40e:	70 ed       	ldi	r23, 0xD0	; 208
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	a7 01       	movw	r20, r14
     416:	96 01       	movw	r18, r12
     418:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	31 09       	sbc	r19, r1
     420:	41 09       	sbc	r20, r1
     422:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:310
          prescalarbits = 0x03;
        }

        if (ocr > 255)
     424:	2f 3f       	cpi	r18, 0xFF	; 255
     426:	31 05       	cpc	r19, r1
     428:	41 05       	cpc	r20, r1
     42a:	51 05       	cpc	r21, r1
     42c:	09 f0       	breq	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	0c f4       	brge	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	94 c0       	rjmp	.+296    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
     432:	68 e4       	ldi	r22, 0x48	; 72
     434:	78 ee       	ldi	r23, 0xE8	; 232
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	a7 01       	movw	r20, r14
     43c:	96 01       	movw	r18, r12
     43e:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     442:	21 50       	subi	r18, 0x01	; 1
     444:	31 09       	sbc	r19, r1
     446:	41 09       	sbc	r20, r1
     448:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:315
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x03 : 0x04;

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
     44a:	2f 3f       	cpi	r18, 0xFF	; 255
     44c:	31 05       	cpc	r19, r1
     44e:	41 05       	cpc	r20, r1
     450:	51 05       	cpc	r21, r1
     452:	09 f0       	breq	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	14 f4       	brge	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:325

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x04 : 0x06;
            if (ocr > 255)
     456:	84 e0       	ldi	r24, 0x04	; 4
     458:	aa cf       	rjmp	.-172    	; 0x3ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x100>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:317
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x03 : 0x04;

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
     45a:	64 e2       	ldi	r22, 0x24	; 36
     45c:	74 ef       	ldi	r23, 0xF4	; 244
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	a7 01       	movw	r20, r14
     464:	96 01       	movw	r18, r12
     466:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     46a:	21 50       	subi	r18, 0x01	; 1
     46c:	31 09       	sbc	r19, r1
     46e:	41 09       	sbc	r20, r1
     470:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:321
            prescalarbits = 0x05;
          }

          if (ocr > 255)
     472:	2f 3f       	cpi	r18, 0xFF	; 255
     474:	31 05       	cpc	r19, r1
     476:	41 05       	cpc	r20, r1
     478:	51 05       	cpc	r21, r1
     47a:	09 f0       	breq	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47c:	08 f4       	brcc	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	97 c0       	rjmp	.+302    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
     480:	62 e1       	ldi	r22, 0x12	; 18
     482:	7a e7       	ldi	r23, 0x7A	; 122
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	a7 01       	movw	r20, r14
     48a:	96 01       	movw	r18, r12
     48c:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     490:	21 50       	subi	r18, 0x01	; 1
     492:	31 09       	sbc	r19, r1
     494:	41 09       	sbc	r20, r1
     496:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:324
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x04 : 0x06;
     498:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:325
            if (ocr > 255)
     49a:	2f 3f       	cpi	r18, 0xFF	; 255
     49c:	31 05       	cpc	r19, r1
     49e:	41 05       	cpc	r20, r1
     4a0:	51 05       	cpc	r21, r1
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a4:	08 f4       	brcc	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	83 cf       	rjmp	.-250    	; 0x3ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x100>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
     4a8:	9a e0       	ldi	r25, 0x0A	; 10
     4aa:	b5 94       	asr	r11
     4ac:	a7 94       	ror	r10
     4ae:	97 94       	ror	r9
     4b0:	87 94       	ror	r8
     4b2:	9a 95       	dec	r25
     4b4:	d1 f7       	brne	.-12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4b6:	a5 01       	movw	r20, r10
     4b8:	94 01       	movw	r18, r8
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	31 09       	sbc	r19, r1
     4be:	41 09       	sbc	r20, r1
     4c0:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x05 : 0x07;
     4c2:	87 e0       	ldi	r24, 0x07	; 7
     4c4:	74 cf       	rjmp	.-280    	; 0x3ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x100>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:355
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	72 e1       	ldi	r23, 0x12	; 18
     4ca:	8a e7       	ldi	r24, 0x7A	; 122
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a7 01       	movw	r20, r14
     4d0:	96 01       	movw	r18, r12
     4d2:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     4d6:	21 50       	subi	r18, 0x01	; 1
     4d8:	31 09       	sbc	r19, r1
     4da:	41 09       	sbc	r20, r1
     4dc:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:357

      prescalarbits = 0x01;
     4de:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:358
      if (ocr > 0xffff)
     4e0:	21 15       	cp	r18, r1
     4e2:	31 05       	cpc	r19, r1
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	48 07       	cpc	r20, r24
     4e8:	51 05       	cpc	r21, r1
     4ea:	6c f0       	brlt	.+26     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:360
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
     4ec:	68 e4       	ldi	r22, 0x48	; 72
     4ee:	78 ee       	ldi	r23, 0xE8	; 232
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a7 01       	movw	r20, r14
     4f6:	96 01       	movw	r18, r12
     4f8:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	31 09       	sbc	r19, r1
     500:	41 09       	sbc	r20, r1
     502:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:361
        prescalarbits = 0x03;
     504:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:364
      }

      if (_timer == 1)
     506:	c1 30       	cpi	r28, 0x01	; 1
     508:	09 f0       	breq	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     50a:	55 cf       	rjmp	.-342    	; 0x3b6 <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x108>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:367
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0xf8) | prescalarbits;
     50c:	8e b5       	in	r24, 0x2e	; 46
     50e:	88 7f       	andi	r24, 0xF8	; 248
     510:	89 2b       	or	r24, r25
     512:	8e bd       	out	0x2e, r24	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:412
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
     514:	3b bd       	out	0x2b, r19	; 43
     516:	2a bd       	out	0x2a, r18	; 42
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:413
        timer1_toggle_count = toggle_count;
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	9f ef       	ldi	r25, 0xFF	; 255
     51c:	dc 01       	movw	r26, r24
     51e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <timer1_toggle_count>
     522:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <timer1_toggle_count+0x1>
     526:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <timer1_toggle_count+0x2>
     52a:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <timer1_toggle_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:414
        bitWrite(TIMSK1, OCIE1A, 1);
     52e:	89 b7       	in	r24, 0x39	; 57
     530:	80 61       	ori	r24, 0x10	; 16
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:427

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
        timer2_toggle_count = toggle_count;
        bitWrite(TIMSK2, OCIE2A, 1);
     532:	89 bf       	out	0x39, r24	; 57
     534:	cb ce       	rjmp	.-618    	; 0x2cc <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:312
          prescalarbits = 0x03;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
     536:	68 e4       	ldi	r22, 0x48	; 72
     538:	78 ee       	ldi	r23, 0xE8	; 232
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a7 01       	movw	r20, r14
     540:	96 01       	movw	r18, r12
     542:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     546:	21 50       	subi	r18, 0x01	; 1
     548:	31 09       	sbc	r19, r1
     54a:	41 09       	sbc	r20, r1
     54c:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:321
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0x05;
          }

          if (ocr > 255)
     54e:	2f 3f       	cpi	r18, 0xFF	; 255
     550:	31 05       	cpc	r19, r1
     552:	41 05       	cpc	r20, r1
     554:	51 05       	cpc	r21, r1
     556:	09 f0       	breq	.+2      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     558:	54 f4       	brge	.+20     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     55a:	83 e0       	ldi	r24, 0x03	; 3
     55c:	28 cf       	rjmp	.-432    	; 0x3ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x100>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:310
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0x03;
        }

        if (ocr > 255)
     55e:	2f 3f       	cpi	r18, 0xFF	; 255
     560:	31 05       	cpc	r19, r1
     562:	41 05       	cpc	r20, r1
     564:	51 05       	cpc	r21, r1
     566:	09 f0       	breq	.+2      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     568:	34 f7       	brge	.-52     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0x01;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0x02;  // ck/8: same for both timers
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	20 cf       	rjmp	.-448    	; 0x3ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x100>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:323
            prescalarbits = 0x05;
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
     56e:	62 e1       	ldi	r22, 0x12	; 18
     570:	7a e7       	ldi	r23, 0x7A	; 122
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	a7 01       	movw	r20, r14
     578:	96 01       	movw	r18, r12
     57a:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	31 09       	sbc	r19, r1
     582:	41 09       	sbc	r20, r1
     584:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:325
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x04 : 0x06;
            if (ocr > 255)
     586:	2f 3f       	cpi	r18, 0xFF	; 255
     588:	31 05       	cpc	r19, r1
     58a:	41 05       	cpc	r20, r1
     58c:	51 05       	cpc	r21, r1
     58e:	09 f0       	breq	.+2      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     590:	08 f4       	brcc	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     592:	61 cf       	rjmp	.-318    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
     594:	8a e0       	ldi	r24, 0x0A	; 10
     596:	b5 94       	asr	r11
     598:	a7 94       	ror	r10
     59a:	97 94       	ror	r9
     59c:	87 94       	ror	r8
     59e:	8a 95       	dec	r24
     5a0:	d1 f7       	brne	.-12     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     5a2:	a5 01       	movw	r20, r10
     5a4:	94 01       	movw	r18, r8
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	31 09       	sbc	r19, r1
     5aa:	41 09       	sbc	r20, r1
     5ac:	51 09       	sbc	r21, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:318
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x03 : 0x04;

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0x05;
     5ae:	85 e0       	ldi	r24, 0x05	; 5
     5b0:	fe ce       	rjmp	.-516    	; 0x3ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]+0x100>

000005b2 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:624
  if (us <= 1) return; //  = 3 cycles, (4 when true)

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     5ba:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <delayMicroseconds+0xa>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     5c0:	08 95       	ret

000005c2 <MAX6675::spiread() [clone .constprop.29]>:
spiread():
f:\Arduino\libraries\MAX6675_library/max6675.cpp:65
    @returns Temperature in F or NAN on failure!
*/
/**************************************************************************/
float MAX6675::readFahrenheit(void) { return readCelsius() * 9.0 / 5.0 + 32; }

byte MAX6675::spiread(void) {
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
f:\Arduino\libraries\MAX6675_library/max6675.cpp:67
  int i;
  byte d = 0;
     5cc:	10 e0       	ldi	r17, 0x00	; 0
f:\Arduino\libraries\MAX6675_library/max6675.cpp:69

  for (i = 7; i >= 0; i--) {
     5ce:	c7 e0       	ldi	r28, 0x07	; 7
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
f:\Arduino\libraries\MAX6675_library/max6675.cpp:74
    digitalWrite(sclk, LOW);
    delayMicroseconds(10);
    if (digitalRead(miso)) {
      // set the bit to 0 no matter what
      d |= (1 << i);
     5d2:	ee 24       	eor	r14, r14
     5d4:	e3 94       	inc	r14
     5d6:	f1 2c       	mov	r15, r1
f:\Arduino\libraries\MAX6675_library/max6675.cpp:70
byte MAX6675::spiread(void) {
  int i;
  byte d = 0;

  for (i = 7; i >= 0; i--) {
    digitalWrite(sclk, LOW);
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <thermocouple>
     5de:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:71
    delayMicroseconds(10);
     5e2:	8a e0       	ldi	r24, 0x0A	; 10
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <delayMicroseconds>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:72
    if (digitalRead(miso)) {
     5ea:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <thermocouple+0x1>
     5ee:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
     5f2:	89 2b       	or	r24, r25
     5f4:	39 f0       	breq	.+14     	; 0x604 <MAX6675::spiread() [clone .constprop.29]+0x42>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:74
      // set the bit to 0 no matter what
      d |= (1 << i);
     5f6:	c7 01       	movw	r24, r14
     5f8:	0c 2e       	mov	r0, r28
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <MAX6675::spiread() [clone .constprop.29]+0x3c>
     5fc:	88 0f       	add	r24, r24
     5fe:	0a 94       	dec	r0
     600:	ea f7       	brpl	.-6      	; 0x5fc <MAX6675::spiread() [clone .constprop.29]+0x3a>
     602:	18 2b       	or	r17, r24
f:\Arduino\libraries\MAX6675_library/max6675.cpp:77
    }

    digitalWrite(sclk, HIGH);
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <thermocouple>
     60a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:78
    delayMicroseconds(10);
     60e:	8a e0       	ldi	r24, 0x0A	; 10
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <delayMicroseconds>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:69

byte MAX6675::spiread(void) {
  int i;
  byte d = 0;

  for (i = 7; i >= 0; i--) {
     616:	21 97       	sbiw	r28, 0x01	; 1
     618:	f8 f6       	brcc	.-66     	; 0x5d8 <MAX6675::spiread() [clone .constprop.29]+0x16>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:82
    digitalWrite(sclk, HIGH);
    delayMicroseconds(10);
  }

  return d;
}
     61a:	81 2f       	mov	r24, r17
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	08 95       	ret

00000628 <MAX6675::readCelsius() [clone .constprop.28]>:
readCelsius():
f:\Arduino\libraries\MAX6675_library/max6675.cpp:33
/*!
    @brief  Read the Celsius temperature
    @returns Temperature in C or NAN on failure!
*/
/**************************************************************************/
float MAX6675::readCelsius(void) {
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
f:\Arduino\libraries\MAX6675_library/max6675.cpp:37

  uint16_t v;

  digitalWrite(cs, LOW);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <thermocouple+0x2>
     632:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:38
  delayMicroseconds(10);
     636:	8a e0       	ldi	r24, 0x0A	; 10
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <delayMicroseconds>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:40

  v = spiread();
     63e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MAX6675::spiread() [clone .constprop.29]>
     642:	c8 2f       	mov	r28, r24
     644:	d0 e0       	ldi	r29, 0x00	; 0
f:\Arduino\libraries\MAX6675_library/max6675.cpp:41
  v <<= 8;
     646:	dc 2f       	mov	r29, r28
     648:	cc 27       	eor	r28, r28
f:\Arduino\libraries\MAX6675_library/max6675.cpp:42
  v |= spiread();
     64a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MAX6675::spiread() [clone .constprop.29]>
     64e:	c8 2b       	or	r28, r24
f:\Arduino\libraries\MAX6675_library/max6675.cpp:44

  digitalWrite(cs, HIGH);
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <thermocouple+0x2>
     656:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:46

  if (v & 0x4) {
     65a:	c2 fd       	sbrc	r28, 2
     65c:	13 c0       	rjmp	.+38     	; 0x684 <MAX6675::readCelsius() [clone .constprop.28]+0x5c>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:52
    // uh oh, no thermocouple attached!
    return NAN;
    // return -100;
  }

  v >>= 3;
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	d6 95       	lsr	r29
     662:	c7 95       	ror	r28
     664:	8a 95       	dec	r24
     666:	e1 f7       	brne	.-8      	; 0x660 <MAX6675::readCelsius() [clone .constprop.28]+0x38>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:54

  return v * 0.25;
     668:	be 01       	movw	r22, r28
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 4a 20 	call	0x4094	; 0x4094 <__floatunsisf>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	40 e8       	ldi	r20, 0x80	; 128
     678:	5e e3       	ldi	r21, 0x3E	; 62
     67a:	0e 94 ab 20 	call	0x4156	; 0x4156 <__mulsf3>
f:\Arduino\libraries\MAX6675_library/max6675.cpp:55
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret
f:\Arduino\libraries\MAX6675_library/max6675.cpp:48

  digitalWrite(cs, HIGH);

  if (v & 0x4) {
    // uh oh, no thermocouple attached!
    return NAN;
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	80 ec       	ldi	r24, 0xC0	; 192
     68a:	9f e7       	ldi	r25, 0x7F	; 127
     68c:	f8 cf       	rjmp	.-16     	; 0x67e <MAX6675::readCelsius() [clone .constprop.28]+0x56>

0000068e <micros>:
micros():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     68e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     690:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     692:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <timer0_overflow_count>
     696:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <timer0_overflow_count+0x1>
     69a:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <timer0_overflow_count+0x2>
     69e:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     6a2:	22 b7       	in	r18, 0x32	; 50
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     6a4:	08 b6       	in	r0, 0x38	; 56
     6a6:	00 fe       	sbrs	r0, 0
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <micros+0x26>
     6aa:	2f 3f       	cpi	r18, 0xFF	; 255
     6ac:	19 f0       	breq	.+6      	; 0x6b4 <micros+0x26>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	a1 1d       	adc	r26, r1
     6b2:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     6b4:	3f bf       	out	0x3f, r19	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     6b6:	ba 2f       	mov	r27, r26
     6b8:	a9 2f       	mov	r26, r25
     6ba:	98 2f       	mov	r25, r24
     6bc:	88 27       	eor	r24, r24
     6be:	bc 01       	movw	r22, r24
     6c0:	cd 01       	movw	r24, r26
     6c2:	62 0f       	add	r22, r18
     6c4:	71 1d       	adc	r23, r1
     6c6:	81 1d       	adc	r24, r1
     6c8:	91 1d       	adc	r25, r1
     6ca:	42 e0       	ldi	r20, 0x02	; 2
     6cc:	66 0f       	add	r22, r22
     6ce:	77 1f       	adc	r23, r23
     6d0:	88 1f       	adc	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	4a 95       	dec	r20
     6d6:	d1 f7       	brne	.-12     	; 0x6cc <micros+0x3e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     6d8:	08 95       	ret

000006da <delay>:
delay():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	4b 01       	movw	r8, r22
     6ec:	5c 01       	movw	r10, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     6ee:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
     6f2:	6b 01       	movw	r12, r22
     6f4:	7c 01       	movw	r14, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     6f6:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
     6fa:	6c 19       	sub	r22, r12
     6fc:	7d 09       	sbc	r23, r13
     6fe:	8e 09       	sbc	r24, r14
     700:	9f 09       	sbc	r25, r15
     702:	68 3e       	cpi	r22, 0xE8	; 232
     704:	73 40       	sbci	r23, 0x03	; 3
     706:	81 05       	cpc	r24, r1
     708:	91 05       	cpc	r25, r1
     70a:	a8 f3       	brcs	.-22     	; 0x6f6 <delay+0x1c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	82 1a       	sub	r8, r18
     710:	91 08       	sbc	r9, r1
     712:	a1 08       	sbc	r10, r1
     714:	b1 08       	sbc	r11, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     716:	88 ee       	ldi	r24, 0xE8	; 232
     718:	c8 0e       	add	r12, r24
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	d8 1e       	adc	r13, r24
     71e:	e1 1c       	adc	r14, r1
     720:	f1 1c       	adc	r15, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     722:	81 14       	cp	r8, r1
     724:	91 04       	cpc	r9, r1
     726:	a1 04       	cpc	r10, r1
     728:	b1 04       	cpc	r11, r1
     72a:	29 f7       	brne	.-54     	; 0x6f6 <delay+0x1c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	08 95       	ret

0000073e <millis>:
millis():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     73e:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     740:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     742:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <timer0_millis>
     746:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <timer0_millis+0x1>
     74a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <timer0_millis+0x2>
     74e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     752:	2f bf       	out	0x3f, r18	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     754:	08 95       	ret

00000756 <nothing>:
nothing():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     756:	08 95       	ret

00000758 <String::StringIfHelper() const>:
StringIfHelper():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
     758:	08 95       	ret

0000075a <noTone(unsigned char)>:
noTone():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:522
void noTone(uint8_t _pin)
{
  int8_t _timer = -1;

  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     75a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <tone_pins>
     75e:	89 13       	cpse	r24, r25
     760:	0b c0       	rjmp	.+22     	; 0x778 <noTone(unsigned char)+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:523
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     762:	ed e0       	ldi	r30, 0x0D	; 13
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	e4 91       	lpm	r30, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:524
      tone_pins[i] = 255;
     768:	9f ef       	ldi	r25, 0xFF	; 255
     76a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <tone_pins>
disableTimer():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:465
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     76e:	e1 30       	cpi	r30, 0x01	; 1
     770:	41 f0       	breq	.+16     	; 0x782 <noTone(unsigned char)+0x28>
     772:	28 f0       	brcs	.+10     	; 0x77e <noTone(unsigned char)+0x24>
     774:	e2 30       	cpi	r30, 0x02	; 2
     776:	49 f0       	breq	.+18     	; 0x78a <noTone(unsigned char)+0x30>
noTone():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:531
    }
  }

  disableTimer(_timer);

  digitalWrite(_pin, 0);
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <digitalWrite>
disableTimer():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:471
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
     77e:	19 be       	out	0x39, r1	; 57
     780:	fb cf       	rjmp	.-10     	; 0x778 <noTone(unsigned char)+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:477
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     782:	99 b7       	in	r25, 0x39	; 57
     784:	9f 7e       	andi	r25, 0xEF	; 239
     786:	99 bf       	out	0x39, r25	; 57
     788:	f7 cf       	rjmp	.-18     	; 0x778 <noTone(unsigned char)+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:483
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     78a:	99 b7       	in	r25, 0x39	; 57
     78c:	9f 77       	andi	r25, 0x7F	; 127
     78e:	99 bf       	out	0x39, r25	; 57
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:486
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     790:	90 e4       	ldi	r25, 0x40	; 64
     792:	95 bd       	out	0x25, r25	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:489
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0xf8) | (1 << CS22);
     794:	95 b5       	in	r25, 0x25	; 37
     796:	98 7f       	andi	r25, 0xF8	; 248
     798:	94 60       	ori	r25, 0x04	; 4
     79a:	95 bd       	out	0x25, r25	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:492
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     79c:	13 bc       	out	0x23, r1	; 35
     79e:	ec cf       	rjmp	.-40     	; 0x778 <noTone(unsigned char)+0x1e>

000007a0 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	6c 01       	movw	r12, r24
     7b6:	7b 01       	movw	r14, r22
     7b8:	8b 01       	movw	r16, r22
     7ba:	04 0f       	add	r16, r20
     7bc:	15 1f       	adc	r17, r21
     7be:	eb 01       	movw	r28, r22
     7c0:	5e 01       	movw	r10, r28
     7c2:	ae 18       	sub	r10, r14
     7c4:	bf 08       	sbc	r11, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     7c6:	c0 17       	cp	r28, r16
     7c8:	d1 07       	cpc	r29, r17
     7ca:	59 f0       	breq	.+22     	; 0x7e2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     7cc:	69 91       	ld	r22, Y+
     7ce:	d6 01       	movw	r26, r12
     7d0:	ed 91       	ld	r30, X+
     7d2:	fc 91       	ld	r31, X
     7d4:	01 90       	ld	r0, Z+
     7d6:	f0 81       	ld	r31, Z
     7d8:	e0 2d       	mov	r30, r0
     7da:	c6 01       	movw	r24, r12
     7dc:	09 95       	icall
     7de:	89 2b       	or	r24, r25
     7e0:	79 f7       	brne	.-34     	; 0x7c0 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     7e2:	c5 01       	movw	r24, r10
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	08 95       	ret

000007fa <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     7fa:	fc 01       	movw	r30, r24
     7fc:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     7fe:	44 8d       	ldd	r20, Z+28	; 0x1c
     800:	25 2f       	mov	r18, r21
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	84 2f       	mov	r24, r20
     806:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     808:	82 1b       	sub	r24, r18
     80a:	93 0b       	sbc	r25, r19
     80c:	54 17       	cp	r21, r20
     80e:	10 f0       	brcs	.+4      	; 0x814 <HardwareSerial::availableForWrite()+0x1a>
     810:	cf 96       	adiw	r24, 0x3f	; 63
     812:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     814:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     816:	08 95       	ret

00000818 <HardwareSerial::read()>:
read():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     818:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     81a:	91 8d       	ldd	r25, Z+25	; 0x19
     81c:	82 8d       	ldd	r24, Z+26	; 0x1a
     81e:	98 17       	cp	r25, r24
     820:	61 f0       	breq	.+24     	; 0x83a <HardwareSerial::read()+0x22>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     822:	a2 8d       	ldd	r26, Z+26	; 0x1a
     824:	ae 0f       	add	r26, r30
     826:	bf 2f       	mov	r27, r31
     828:	b1 1d       	adc	r27, r1
     82a:	5d 96       	adiw	r26, 0x1d	; 29
     82c:	8c 91       	ld	r24, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     82e:	92 8d       	ldd	r25, Z+26	; 0x1a
     830:	9f 5f       	subi	r25, 0xFF	; 255
     832:	9f 73       	andi	r25, 0x3F	; 63
     834:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     83e:	08 95       	ret

00000840 <Stream::timedRead() [clone .constprop.6]>:
timedRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:31
#include "Stream.h"

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:34
{
  int c;
  _startMillis = millis();
     844:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     848:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <Serial+0x8>
     84c:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <Serial+0x9>
     850:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <Serial+0xa>
     854:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <Serial+0xb>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:36
  do {
    c = read();
     858:	88 e5       	ldi	r24, 0x58	; 88
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	0e 94 0c 04 	call	0x818	; 0x818 <HardwareSerial::read()>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:37
    if (c >= 0) return c;
     860:	97 ff       	sbrs	r25, 7
     862:	1d c0       	rjmp	.+58     	; 0x89e <__stack+0x3f>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:38
  } while(millis() - _startMillis < _timeout);
     864:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     868:	00 91 60 02 	lds	r16, 0x0260	; 0x800260 <Serial+0x8>
     86c:	10 91 61 02 	lds	r17, 0x0261	; 0x800261 <Serial+0x9>
     870:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <Serial+0xa>
     874:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <Serial+0xb>
     878:	60 1b       	sub	r22, r16
     87a:	71 0b       	sbc	r23, r17
     87c:	82 0b       	sbc	r24, r18
     87e:	93 0b       	sbc	r25, r19
     880:	00 91 5c 02 	lds	r16, 0x025C	; 0x80025c <Serial+0x4>
     884:	10 91 5d 02 	lds	r17, 0x025D	; 0x80025d <Serial+0x5>
     888:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <Serial+0x6>
     88c:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <Serial+0x7>
     890:	60 17       	cp	r22, r16
     892:	71 07       	cpc	r23, r17
     894:	82 07       	cpc	r24, r18
     896:	93 07       	cpc	r25, r19
     898:	f8 f2       	brcs	.-66     	; 0x858 <Stream::timedRead() [clone .constprop.6]+0x18>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:39
  return -1;     // -1 indicates timeout
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:40
}
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	08 95       	ret

000008a4 <HardwareSerial::peek()>:
peek():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     8a4:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     8a6:	91 8d       	ldd	r25, Z+25	; 0x19
     8a8:	82 8d       	ldd	r24, Z+26	; 0x1a
     8aa:	98 17       	cp	r25, r24
     8ac:	31 f0       	breq	.+12     	; 0x8ba <HardwareSerial::peek()+0x16>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8ae:	82 8d       	ldd	r24, Z+26	; 0x1a
     8b0:	e8 0f       	add	r30, r24
     8b2:	f1 1d       	adc	r31, r1
     8b4:	85 8d       	ldd	r24, Z+29	; 0x1d
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     8be:	08 95       	ret

000008c0 <HardwareSerial::available()>:
available():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     8c0:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     8c2:	91 8d       	ldd	r25, Z+25	; 0x19
     8c4:	22 8d       	ldd	r18, Z+26	; 0x1a
     8c6:	89 2f       	mov	r24, r25
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	80 5c       	subi	r24, 0xC0	; 192
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	82 1b       	sub	r24, r18
     8d0:	91 09       	sbc	r25, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     8d2:	8f 73       	andi	r24, 0x3F	; 63
     8d4:	99 27       	eor	r25, r25
     8d6:	08 95       	ret

000008d8 <Serial0_available()>:
Serial0_available():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     8d8:	88 e5       	ldi	r24, 0x58	; 88
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <HardwareSerial::available()>
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	89 2b       	or	r24, r25
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <Serial0_available()+0x10>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     8e8:	82 2f       	mov	r24, r18
     8ea:	08 95       	ret

000008ec <serialEventRun()>:
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	89 2b       	or	r24, r25
     8f2:	29 f0       	breq	.+10     	; 0x8fe <serialEventRun()+0x12>
     8f4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Serial0_available()>
     8f8:	81 11       	cpse	r24, r1
     8fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     8fe:	08 95       	ret

00000900 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     900:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     902:	a4 8d       	ldd	r26, Z+28	; 0x1c
     904:	a8 0f       	add	r26, r24
     906:	b9 2f       	mov	r27, r25
     908:	b1 1d       	adc	r27, r1
     90a:	a3 5a       	subi	r26, 0xA3	; 163
     90c:	bf 4f       	sbci	r27, 0xFF	; 255
     90e:	2c 91       	ld	r18, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     910:	84 8d       	ldd	r24, Z+28	; 0x1c
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	8f 73       	andi	r24, 0x3F	; 63
     918:	99 27       	eor	r25, r25
     91a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     91c:	a6 89       	ldd	r26, Z+22	; 0x16
     91e:	b7 89       	ldd	r27, Z+23	; 0x17
     920:	2c 93       	st	X, r18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     922:	a0 89       	ldd	r26, Z+16	; 0x10
     924:	b1 89       	ldd	r27, Z+17	; 0x11
     926:	8c 91       	ld	r24, X
     928:	82 74       	andi	r24, 0x42	; 66
     92a:	8c 93       	st	X, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     92c:	93 8d       	ldd	r25, Z+27	; 0x1b
     92e:	84 8d       	ldd	r24, Z+28	; 0x1c
     930:	98 13       	cpse	r25, r24
     932:	06 c0       	rjmp	.+12     	; 0x940 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     934:	02 88       	ldd	r0, Z+18	; 0x12
     936:	f3 89       	ldd	r31, Z+19	; 0x13
     938:	e0 2d       	mov	r30, r0
     93a:	80 81       	ld	r24, Z
     93c:	8f 7d       	andi	r24, 0xDF	; 223
     93e:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     940:	08 95       	ret

00000942 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     954:	9b 8d       	ldd	r25, Y+27	; 0x1b
     956:	8c 8d       	ldd	r24, Y+28	; 0x1c
     958:	98 13       	cpse	r25, r24
     95a:	19 c0       	rjmp	.+50     	; 0x98e <HardwareSerial::write(unsigned char)+0x4c>
     95c:	e8 89       	ldd	r30, Y+16	; 0x10
     95e:	f9 89       	ldd	r31, Y+17	; 0x11
     960:	80 81       	ld	r24, Z
     962:	85 ff       	sbrs	r24, 5
     964:	14 c0       	rjmp	.+40     	; 0x98e <HardwareSerial::write(unsigned char)+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     966:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     968:	f8 94       	cli
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     96a:	ee 89       	ldd	r30, Y+22	; 0x16
     96c:	ff 89       	ldd	r31, Y+23	; 0x17
     96e:	60 83       	st	Z, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     970:	e8 89       	ldd	r30, Y+16	; 0x10
     972:	f9 89       	ldd	r31, Y+17	; 0x11
     974:	80 81       	ld	r24, Z
     976:	82 74       	andi	r24, 0x42	; 66
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     978:	80 83       	st	Z, r24
__iRestore():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     97a:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	08 95       	ret
     98e:	f6 2e       	mov	r15, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     990:	0b 8d       	ldd	r16, Y+27	; 0x1b
     992:	10 e0       	ldi	r17, 0x00	; 0
     994:	0f 5f       	subi	r16, 0xFF	; 255
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	0f 73       	andi	r16, 0x3F	; 63
     99a:	11 27       	eor	r17, r17
     99c:	e0 2e       	mov	r14, r16
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     99e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9a0:	8e 11       	cpse	r24, r14
     9a2:	0c c0       	rjmp	.+24     	; 0x9bc <HardwareSerial::write(unsigned char)+0x7a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	07 fc       	sbrc	r0, 7
     9a8:	fa cf       	rjmp	.-12     	; 0x99e <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     9aa:	e8 89       	ldd	r30, Y+16	; 0x10
     9ac:	f9 89       	ldd	r31, Y+17	; 0x11
     9ae:	80 81       	ld	r24, Z
     9b0:	85 ff       	sbrs	r24, 5
     9b2:	f5 cf       	rjmp	.-22     	; 0x99e <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     9b4:	ce 01       	movw	r24, r28
     9b6:	0e 94 80 04 	call	0x900	; 0x900 <HardwareSerial::_tx_udr_empty_irq()>
     9ba:	f1 cf       	rjmp	.-30     	; 0x99e <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     9bc:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9be:	ec 0f       	add	r30, r28
     9c0:	fd 2f       	mov	r31, r29
     9c2:	f1 1d       	adc	r31, r1
     9c4:	e3 5a       	subi	r30, 0xA3	; 163
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	f0 82       	st	Z, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9ca:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9cc:	f8 94       	cli
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     9ce:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     9d0:	ea 89       	ldd	r30, Y+18	; 0x12
     9d2:	fb 89       	ldd	r31, Y+19	; 0x13
     9d4:	80 81       	ld	r24, Z
     9d6:	80 62       	ori	r24, 0x20	; 32
     9d8:	cf cf       	rjmp	.-98     	; 0x978 <HardwareSerial::write(unsigned char)+0x36>

000009da <HardwareSerial::flush()>:
flush():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     9e0:	88 8d       	ldd	r24, Y+24	; 0x18
     9e2:	88 23       	and	r24, r24
     9e4:	b9 f0       	breq	.+46     	; 0xa14 <HardwareSerial::flush()+0x3a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     9e6:	aa 89       	ldd	r26, Y+18	; 0x12
     9e8:	bb 89       	ldd	r27, Y+19	; 0x13
     9ea:	e8 89       	ldd	r30, Y+16	; 0x10
     9ec:	f9 89       	ldd	r31, Y+17	; 0x11
     9ee:	8c 91       	ld	r24, X
     9f0:	85 fd       	sbrc	r24, 5
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <HardwareSerial::flush()+0x20>
     9f4:	80 81       	ld	r24, Z
     9f6:	86 fd       	sbrc	r24, 6
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <HardwareSerial::flush()+0x3a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	07 fc       	sbrc	r0, 7
     9fe:	f7 cf       	rjmp	.-18     	; 0x9ee <HardwareSerial::flush()+0x14>
     a00:	8c 91       	ld	r24, X
     a02:	85 ff       	sbrs	r24, 5
     a04:	f2 cf       	rjmp	.-28     	; 0x9ea <HardwareSerial::flush()+0x10>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     a06:	80 81       	ld	r24, Z
     a08:	85 ff       	sbrs	r24, 5
     a0a:	ed cf       	rjmp	.-38     	; 0x9e6 <HardwareSerial::flush()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 94 80 04 	call	0x900	; 0x900 <HardwareSerial::_tx_udr_empty_irq()>
     a12:	e9 cf       	rjmp	.-46     	; 0x9e6 <HardwareSerial::flush()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <BlinkHeadLight()>:
BlinkHeadLight():
F:\Arduino\projects\HPiECU/HPiECU.ino:2101
/// <summary>
/// Blinks Headlight For Specified Duration Or Permanently Until off
/// </summary>
/// <param name="mode">Blink Duration Or ZERO For Permanent.</param>
void BlinkHeadLight()
{
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
F:\Arduino\projects\HPiECU/HPiECU.ino:2102
    if (Headblink_flag == true)
     a32:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Headblink_flag>
     a36:	88 23       	and	r24, r24
     a38:	09 f4       	brne	.+2      	; 0xa3c <BlinkHeadLight()+0x22>
     a3a:	67 c0       	rjmp	.+206    	; 0xb0a <BlinkHeadLight()+0xf0>
F:\Arduino\projects\HPiECU/HPiECU.ino:2104
    {
        headlightFlag = false;// disable headlight wich turned by button
     a3c:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <headlightFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:2106

        if (Headblink_blinkmode > 0)
     a40:	c0 91 20 02 	lds	r28, 0x0220	; 0x800220 <Headblink_blinkmode>
     a44:	d0 91 21 02 	lds	r29, 0x0221	; 0x800221 <Headblink_blinkmode+0x1>
     a48:	80 90 f5 01 	lds	r8, 0x01F5	; 0x8001f5 <Headblink_prevMillis>
     a4c:	90 90 f6 01 	lds	r9, 0x01F6	; 0x8001f6 <Headblink_prevMillis+0x1>
     a50:	a0 90 f7 01 	lds	r10, 0x01F7	; 0x8001f7 <Headblink_prevMillis+0x2>
     a54:	b0 90 f8 01 	lds	r11, 0x01F8	; 0x8001f8 <Headblink_prevMillis+0x3>
     a58:	c0 90 77 00 	lds	r12, 0x0077	; 0x800077 <Headblink_delay>
     a5c:	d0 90 78 00 	lds	r13, 0x0078	; 0x800078 <Headblink_delay+0x1>
     a60:	e0 90 79 00 	lds	r14, 0x0079	; 0x800079 <Headblink_delay+0x2>
     a64:	f0 90 7a 00 	lds	r15, 0x007A	; 0x80007a <Headblink_delay+0x3>
     a68:	1c 16       	cp	r1, r28
     a6a:	1d 06       	cpc	r1, r29
     a6c:	2c f5       	brge	.+74     	; 0xab8 <BlinkHeadLight()+0x9e>
F:\Arduino\projects\HPiECU/HPiECU.ino:2109
        {
            ///TimeOut
            if ((millis() - Headblink_timeout) >= Headblink_blinkmode)/// disable blink
     a6e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     a72:	00 91 1b 02 	lds	r16, 0x021B	; 0x80021b <Headblink_timeout>
     a76:	10 91 1c 02 	lds	r17, 0x021C	; 0x80021c <Headblink_timeout+0x1>
     a7a:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <Headblink_timeout+0x2>
     a7e:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <Headblink_timeout+0x3>
     a82:	ab 01       	movw	r20, r22
     a84:	bc 01       	movw	r22, r24
     a86:	40 1b       	sub	r20, r16
     a88:	51 0b       	sbc	r21, r17
     a8a:	62 0b       	sbc	r22, r18
     a8c:	73 0b       	sbc	r23, r19
     a8e:	ce 01       	movw	r24, r28
     a90:	dd 0f       	add	r29, r29
     a92:	aa 0b       	sbc	r26, r26
     a94:	bb 0b       	sbc	r27, r27
     a96:	48 17       	cp	r20, r24
     a98:	59 07       	cpc	r21, r25
     a9a:	6a 07       	cpc	r22, r26
     a9c:	7b 07       	cpc	r23, r27
     a9e:	60 f0       	brcs	.+24     	; 0xab8 <BlinkHeadLight()+0x9e>
F:\Arduino\projects\HPiECU/HPiECU.ino:2111
            {
                Headblink_timeout = millis();
     aa0:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     aa4:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <Headblink_timeout>
     aa8:	70 93 1c 02 	sts	0x021C, r23	; 0x80021c <Headblink_timeout+0x1>
     aac:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Headblink_timeout+0x2>
     ab0:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Headblink_timeout+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:2113

                Headblink_flag = false;//disable blink
     ab4:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <Headblink_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:2125
                digitalWrite(headlight_OutPin,Headblink_state == true ? HIGH : LOW); //Toggle Headlight.
            }

        } else/// So Blink Until Disabled
        {
            if ((millis() - Headblink_prevMillis) >= Headblink_delay)
     ab8:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     abc:	68 19       	sub	r22, r8
     abe:	79 09       	sbc	r23, r9
     ac0:	8a 09       	sbc	r24, r10
     ac2:	9b 09       	sbc	r25, r11
     ac4:	6c 15       	cp	r22, r12
     ac6:	7d 05       	cpc	r23, r13
     ac8:	8e 05       	cpc	r24, r14
     aca:	9f 05       	cpc	r25, r15
     acc:	08 f1       	brcs	.+66     	; 0xb10 <BlinkHeadLight()+0xf6>
F:\Arduino\projects\HPiECU/HPiECU.ino:2127
            {
                Headblink_prevMillis = millis();
     ace:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     ad2:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <Headblink_prevMillis>
     ad6:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <Headblink_prevMillis+0x1>
     ada:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Headblink_prevMillis+0x2>
     ade:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <Headblink_prevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:2128
                Headblink_state = !Headblink_state;
     ae2:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <Headblink_state>
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	68 27       	eor	r22, r24
     aea:	60 93 f4 01 	sts	0x01F4, r22	; 0x8001f4 <Headblink_state>
F:\Arduino\projects\HPiECU/HPiECU.ino:2137
    } else
    {
        headlightFlag = true;// Enable Normall Light.
        // if Headlight Was Not Turned On By button It Will Turned oFF In Loop();
    }
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	9f 90       	pop	r9
     b04:	8f 90       	pop	r8
F:\Arduino\projects\HPiECU/HPiECU.ino:2129
        {
            if ((millis() - Headblink_prevMillis) >= Headblink_delay)
            {
                Headblink_prevMillis = millis();
                Headblink_state = !Headblink_state;
                digitalWrite(headlight_OutPin, Headblink_state == true ? HIGH : LOW); //Toggle Headlight.
     b06:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:2134
            }
        }
    } else
    {
        headlightFlag = true;// Enable Normall Light.
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <headlightFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:2137
        // if Headlight Was Not Turned On By button It Will Turned oFF In Loop();
    }
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	08 95       	ret

00000b2a <TemporaryDOSwitch(bool)>:
TemporaryDOSwitch():
F:\Arduino\projects\HPiECU/HPiECU.ino:1768
/// Temporary Open Switch For Remote AutoStart
/// </summary>
/// <param name="open">-> Open or Close The Switch.</param>
void TemporaryDOSwitch(bool open)
{
    if (open == true)
     b2a:	88 23       	and	r24, r24
     b2c:	41 f0       	breq	.+16     	; 0xb3e <TemporaryDOSwitch(bool)+0x14>
F:\Arduino\projects\HPiECU/HPiECU.ino:1770
    {
        digitalWrite(Switch_OutPin, HIGH);// Connect DC Power To System.
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	8f e0       	ldi	r24, 0x0F	; 15
     b32:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1778
    } else//Restore defaults
    {
        digitalWrite(Switch_OutPin, LOW);// Disconnect DC Power from System.
        if (digitalRead(VBattINpin) == LOW)//Swich is pysically Closed
        {
            digitalWrite(CDI_ShutDown_OutPin, LOW);// Switch was Closed  (physically), so restore CDI Shutdown Mode 
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	8e e1       	ldi	r24, 0x1E	; 30
     b3a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1775
        digitalWrite(Switch_OutPin, HIGH);// Connect DC Power To System.
        digitalWrite(CDI_ShutDown_OutPin, LOW);//Disable CDI shutdown Pin.

    } else//Restore defaults
    {
        digitalWrite(Switch_OutPin, LOW);// Disconnect DC Power from System.
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	8f e0       	ldi	r24, 0x0F	; 15
     b42:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1776
        if (digitalRead(VBattINpin) == LOW)//Swich is pysically Closed
     b46:	8d e1       	ldi	r24, 0x1D	; 29
     b48:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
     b4c:	89 2b       	or	r24, r25
     b4e:	99 f3       	breq	.-26     	; 0xb36 <TemporaryDOSwitch(bool)+0xc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1781
        {
            digitalWrite(CDI_ShutDown_OutPin, LOW);// Switch was Closed  (physically), so restore CDI Shutdown Mode 
        }
    }
}
     b50:	08 95       	ret

00000b52 <SetIdleRPM(unsigned int)>:
SetIdleRPM():
F:\Arduino\projects\HPiECU/HPiECU.ino:1688
/// void SetIdleRPM(byte _RPM)
/// Set Current Engine's RPM 
/// </summary>
/// <param name="_RPM">-> Specified RPM to Be Set. RPM Will Moltiplied By 10. Because Variable MEMORY Is too Small!</param>
void SetIdleRPM(uint16_t _RPM)
{
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
F:\Arduino\projects\HPiECU/HPiECU.ino:1689
    uint16_t SpecifiedAngle = map(_RPM, 100, 280, eep_minServoAngle, eep_maxServoAngle);
     b62:	c0 90 41 02 	lds	r12, 0x0241	; 0x800241 <eep_minServoAngle>
     b66:	d0 90 42 02 	lds	r13, 0x0242	; 0x800242 <eep_minServoAngle+0x1>
     b6a:	f1 2c       	mov	r15, r1
     b6c:	e1 2c       	mov	r14, r1
     b6e:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <eep_maxServoAngle>
     b72:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <eep_maxServoAngle+0x1>
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	40 e0       	ldi	r20, 0x00	; 0
map():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WMath.cpp:54
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     b7a:	2c 19       	sub	r18, r12
     b7c:	3d 09       	sbc	r19, r13
     b7e:	4e 09       	sbc	r20, r14
     b80:	5f 09       	sbc	r21, r15
SetIdleRPM():
F:\Arduino\projects\HPiECU/HPiECU.ino:1689
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
map():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WMath.cpp:54
     b86:	bc 01       	movw	r22, r24
     b88:	cd 01       	movw	r24, r26
     b8a:	64 56       	subi	r22, 0x64	; 100
     b8c:	71 09       	sbc	r23, r1
     b8e:	81 09       	sbc	r24, r1
     b90:	91 09       	sbc	r25, r1
     b92:	0e 94 3a 23 	call	0x4674	; 0x4674 <__mulsi3>
     b96:	24 eb       	ldi	r18, 0xB4	; 180
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     ba2:	c2 0e       	add	r12, r18
     ba4:	d3 1e       	adc	r13, r19
     ba6:	e4 1e       	adc	r14, r20
     ba8:	f5 1e       	adc	r15, r21
SetIdleRPM():
F:\Arduino\projects\HPiECU/HPiECU.ino:1692

    /// skip if Engine's Temperature not changed ( wait For Engine to warm Up).
    if (SpecifiedAngle != previousAngle)
     baa:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <previousAngle>
     bae:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <previousAngle+0x1>
     bb2:	2c 15       	cp	r18, r12
     bb4:	3d 05       	cpc	r19, r13
     bb6:	09 f4       	brne	.+2      	; 0xbba <SetIdleRPM(unsigned int)+0x68>
     bb8:	79 c0       	rjmp	.+242    	; 0xcac <SetIdleRPM(unsigned int)+0x15a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1694
    {
       IdleServo.write(SpecifiedAngle);
     bba:	96 01       	movw	r18, r12
write():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:266
  }
}

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
     bbc:	40 e2       	ldi	r20, 0x20	; 32
     bbe:	c4 16       	cp	r12, r20
     bc0:	42 e0       	ldi	r20, 0x02	; 2
     bc2:	d4 06       	cpc	r13, r20
     bc4:	dc f5       	brge	.+118    	; 0xc3c <SetIdleRPM(unsigned int)+0xea>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:270
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     bc6:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <IdleServo+0x1>
     bca:	e8 e8       	ldi	r30, 0x88	; 136
     bcc:	8e 2e       	mov	r8, r30
     bce:	91 2c       	mov	r9, r1
     bd0:	88 1a       	sub	r8, r24
     bd2:	91 08       	sbc	r9, r1
     bd4:	87 fd       	sbrc	r24, 7
     bd6:	93 94       	inc	r9
     bd8:	88 0c       	add	r8, r8
     bda:	99 1c       	adc	r9, r9
     bdc:	88 0c       	add	r8, r8
     bde:	99 1c       	adc	r9, r9
     be0:	09 2c       	mov	r0, r9
     be2:	00 0c       	add	r0, r0
     be4:	aa 08       	sbc	r10, r10
     be6:	bb 08       	sbc	r11, r11
     be8:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <IdleServo+0x2>
     bec:	28 e5       	ldi	r18, 0x58	; 88
     bee:	32 e0       	ldi	r19, 0x02	; 2
     bf0:	28 1b       	sub	r18, r24
     bf2:	31 09       	sbc	r19, r1
     bf4:	87 fd       	sbrc	r24, 7
     bf6:	33 95       	inc	r19
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	03 2e       	mov	r0, r19
     c02:	00 0c       	add	r0, r0
     c04:	44 0b       	sbc	r20, r20
     c06:	55 0b       	sbc	r21, r21
map():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WMath.cpp:54
     c08:	28 19       	sub	r18, r8
     c0a:	39 09       	sbc	r19, r9
     c0c:	4a 09       	sbc	r20, r10
     c0e:	5b 09       	sbc	r21, r11
write():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:270
     c10:	d6 01       	movw	r26, r12
     c12:	a5 3b       	cpi	r26, 0xB5	; 181
     c14:	b1 05       	cpc	r27, r1
     c16:	14 f0       	brlt	.+4      	; 0xc1c <SetIdleRPM(unsigned int)+0xca>
     c18:	a4 eb       	ldi	r26, 0xB4	; 180
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	b7 ff       	sbrs	r27, 7
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <SetIdleRPM(unsigned int)+0xd2>
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	a0 e0       	ldi	r26, 0x00	; 0
map():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WMath.cpp:54
     c24:	0e 94 ab 21 	call	0x4356	; 0x4356 <__mulshisi3>
     c28:	24 eb       	ldi	r18, 0xB4	; 180
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
     c34:	28 0d       	add	r18, r8
     c36:	39 1d       	adc	r19, r9
     c38:	4a 1d       	adc	r20, r10
     c3a:	5b 1d       	adc	r21, r11
writeMicroseconds():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:278
}

void Servo::writeMicroseconds(int value)
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     c3c:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <IdleServo>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:279
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     c40:	ec 30       	cpi	r30, 0x0C	; 12
     c42:	80 f5       	brcc	.+96     	; 0xca4 <SetIdleRPM(unsigned int)+0x152>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:281
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     c44:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <IdleServo+0x1>
     c48:	88 e8       	ldi	r24, 0x88	; 136
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	84 1b       	sub	r24, r20
     c4e:	91 09       	sbc	r25, r1
     c50:	47 fd       	sbrc	r20, 7
     c52:	93 95       	inc	r25
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	84 f0       	brlt	.+32     	; 0xc82 <SetIdleRPM(unsigned int)+0x130>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:283
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
     c62:	40 91 25 03 	lds	r20, 0x0325	; 0x800325 <IdleServo+0x2>
     c66:	88 e5       	ldi	r24, 0x58	; 88
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	84 1b       	sub	r24, r20
     c6c:	91 09       	sbc	r25, r1
     c6e:	47 fd       	sbrc	r20, 7
     c70:	93 95       	inc	r25
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	0c f4       	brge	.+2      	; 0xc82 <SetIdleRPM(unsigned int)+0x130>
     c80:	c9 01       	movw	r24, r18
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:286
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     c82:	02 97       	sbiw	r24, 0x02	; 2
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:287
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:289

    uint8_t oldSREG = SREG;
     c88:	4f b7       	in	r20, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:290
    cli();
     c8a:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:291
    servos[channel].ticks = value;
     c8c:	2e 2f       	mov	r18, r30
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	f9 01       	movw	r30, r18
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	eb 50       	subi	r30, 0x0B	; 11
     c9c:	fd 4f       	sbci	r31, 0xFD	; 253
     c9e:	92 83       	std	Z+2, r25	; 0x02
     ca0:	81 83       	std	Z+1, r24	; 0x01
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:292
    SREG = oldSREG;
     ca2:	4f bf       	out	0x3f, r20	; 63
SetIdleRPM():
F:\Arduino\projects\HPiECU/HPiECU.ino:1695
        previousAngle = SpecifiedAngle;
     ca4:	d0 92 e2 01 	sts	0x01E2, r13	; 0x8001e2 <previousAngle+0x1>
     ca8:	c0 92 e1 01 	sts	0x01E1, r12	; 0x8001e1 <previousAngle>
F:\Arduino\projects\HPiECU/HPiECU.ino:1697
    }
}
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	9f 90       	pop	r9
     cba:	8f 90       	pop	r8
     cbc:	08 95       	ret

00000cbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     cbe:	fc 01       	movw	r30, r24
     cc0:	01 90       	ld	r0, Z+
     cc2:	00 20       	and	r0, r0
     cc4:	e9 f7       	brne	.-6      	; 0xcc0 <Print::write(char const*) [clone .part.2] [clone .constprop.52]+0x2>
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	af 01       	movw	r20, r30
     cca:	48 1b       	sub	r20, r24
     ccc:	59 0b       	sbc	r21, r25
     cce:	bc 01       	movw	r22, r24
     cd0:	88 e5       	ldi	r24, 0x58	; 88
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <Print::write(unsigned char const*, unsigned int)>

00000cd8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]>:
printNumber():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	a1 97       	sbiw	r28, 0x21	; 33
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     cf8:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     cfa:	42 30       	cpi	r20, 0x02	; 2
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]+0x28>
     cfe:	4a e0       	ldi	r20, 0x0A	; 10
     d00:	8e 01       	movw	r16, r28
     d02:	0f 5d       	subi	r16, 0xDF	; 223
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     d06:	84 2e       	mov	r8, r20
     d08:	91 2c       	mov	r9, r1
     d0a:	b1 2c       	mov	r11, r1
     d0c:	a1 2c       	mov	r10, r1
     d0e:	a5 01       	movw	r20, r10
     d10:	94 01       	movw	r18, r8
     d12:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__udivmodsi4>
     d16:	e6 2f       	mov	r30, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     d18:	b9 01       	movw	r22, r18
     d1a:	ca 01       	movw	r24, r20
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d1c:	ea 30       	cpi	r30, 0x0A	; 10
     d1e:	f4 f4       	brge	.+60     	; 0xd5c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]+0x84>
     d20:	e0 5d       	subi	r30, 0xD0	; 208
     d22:	d8 01       	movw	r26, r16
     d24:	ee 93       	st	-X, r30
     d26:	8d 01       	movw	r16, r26
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     d28:	23 2b       	or	r18, r19
     d2a:	24 2b       	or	r18, r20
     d2c:	25 2b       	or	r18, r21
     d2e:	79 f7       	brne	.-34     	; 0xd0e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]+0x36>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	80 e0       	ldi	r24, 0x00	; 0
write():
     d34:	10 97       	sbiw	r26, 0x00	; 0
     d36:	19 f0       	breq	.+6      	; 0xd3e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]+0x66>
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
printNumber():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     d3e:	a1 96       	adiw	r28, 0x21	; 33
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	9f 90       	pop	r9
     d58:	8f 90       	pop	r8
     d5a:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d5c:	e9 5c       	subi	r30, 0xC9	; 201
     d5e:	e1 cf       	rjmp	.-62     	; 0xd22 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]+0x4a>

00000d60 <Print::println(char const*) [clone .constprop.49]>:
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
write():
     d64:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
     d68:	ec 01       	movw	r28, r24
     d6a:	8c e9       	ldi	r24, 0x9C	; 156
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     d72:	8c 0f       	add	r24, r28
     d74:	9d 1f       	adc	r25, r29
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <Blink()>:
Blink():
F:\Arduino\projects\HPiECU/HPiECU.ino:891
/// blinkers are: Front LEFT/Right, rear LEFT/Right blinkers
/// it has 4 modes + multi and dance
/// </summary>
/// <param name="none"></param>
void Blink(void)
{
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
F:\Arduino\projects\HPiECU/HPiECU.ino:892
  if (blinkerstate)
     d8c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <blinkerstate>
     d90:	88 23       	and	r24, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <Blink()+0x1a>
     d94:	32 c3       	rjmp	.+1636   	; 0x13fa <Blink()+0x67e>
F:\Arduino\projects\HPiECU/HPiECU.ino:895
      {
      //  Serial.println("blinkerState");
        if (Leftfrontblinkerstate && Leftbackblinkerstate)
     d96:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <Leftfrontblinkerstate>
     d9a:	88 23       	and	r24, r24
     d9c:	c9 f1       	breq	.+114    	; 0xe10 <Blink()+0x94>
     d9e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <Leftbackblinkerstate>
     da2:	88 23       	and	r24, r24
     da4:	a9 f1       	breq	.+106    	; 0xe10 <Blink()+0x94>
F:\Arduino\projects\HPiECU/HPiECU.ino:898
        {        
          //Serial.println(millis());
          if ((millis() - prevMillis) >= blinkInterval)
     da6:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     daa:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <prevMillis>
     dae:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <prevMillis+0x1>
     db2:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <prevMillis+0x2>
     db6:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <prevMillis+0x3>
     dba:	ab 01       	movw	r20, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	40 1b       	sub	r20, r16
     dc0:	51 0b       	sbc	r21, r17
     dc2:	62 0b       	sbc	r22, r18
     dc4:	73 0b       	sbc	r23, r19
     dc6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <eep_blinkinterval>
     dca:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <eep_blinkinterval+0x1>
     dce:	09 2e       	mov	r0, r25
     dd0:	00 0c       	add	r0, r0
     dd2:	aa 0b       	sbc	r26, r26
     dd4:	bb 0b       	sbc	r27, r27
     dd6:	48 17       	cp	r20, r24
     dd8:	59 07       	cpc	r21, r25
     dda:	6a 07       	cpc	r22, r26
     ddc:	7b 07       	cpc	r23, r27
     dde:	c0 f0       	brcs	.+48     	; 0xe10 <Blink()+0x94>
F:\Arduino\projects\HPiECU/HPiECU.ino:900
             {                          
              digitalWrite(frontLeftBlink_OutPin,state);
     de0:	c0 91 c9 01 	lds	r28, 0x01C9	; 0x8001c9 <state>
     de4:	6c 2f       	mov	r22, r28
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:901
               digitalWrite(backLeftBlink_OutPin,state);  
     dec:	6c 2f       	mov	r22, r28
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:910
            //       Serial.print("L");
            //   } else
             //  {
             //      Serial.print("l");
             //  }
               state =!state;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	c8 27       	eor	r28, r24
     df8:	c0 93 c9 01 	sts	0x01C9, r28	; 0x8001c9 <state>
F:\Arduino\projects\HPiECU/HPiECU.ino:911
              prevMillis = millis();
     dfc:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     e00:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <prevMillis>
     e04:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <prevMillis+0x1>
     e08:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <prevMillis+0x2>
     e0c:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <prevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:916
              //Serial.println("LFB_Millis");
             }
         }//Left Turn
        //Right Turn
         if (Rightbackblinkerstate && Rightfrontblinkerstate)
     e10:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <Rightbackblinkerstate>
     e14:	88 23       	and	r24, r24
     e16:	e9 f1       	breq	.+122    	; 0xe92 <Blink()+0x116>
     e18:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <Rightfrontblinkerstate>
     e1c:	88 23       	and	r24, r24
     e1e:	c9 f1       	breq	.+114    	; 0xe92 <Blink()+0x116>
F:\Arduino\projects\HPiECU/HPiECU.ino:919
         {
          //Serial.println("rbf");
                  if ((millis() - prevMillis) >= blinkInterval)
     e20:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     e24:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <prevMillis>
     e28:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <prevMillis+0x1>
     e2c:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <prevMillis+0x2>
     e30:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <prevMillis+0x3>
     e34:	ab 01       	movw	r20, r22
     e36:	bc 01       	movw	r22, r24
     e38:	40 1b       	sub	r20, r16
     e3a:	51 0b       	sbc	r21, r17
     e3c:	62 0b       	sbc	r22, r18
     e3e:	73 0b       	sbc	r23, r19
     e40:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <eep_blinkinterval>
     e44:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <eep_blinkinterval+0x1>
     e48:	09 2e       	mov	r0, r25
     e4a:	00 0c       	add	r0, r0
     e4c:	aa 0b       	sbc	r26, r26
     e4e:	bb 0b       	sbc	r27, r27
     e50:	48 17       	cp	r20, r24
     e52:	59 07       	cpc	r21, r25
     e54:	6a 07       	cpc	r22, r26
     e56:	7b 07       	cpc	r23, r27
     e58:	e0 f0       	brcs	.+56     	; 0xe92 <Blink()+0x116>
F:\Arduino\projects\HPiECU/HPiECU.ino:921
           {
                   digitalWrite(backRightBlink_OutPin,state);
     e5a:	c0 91 c9 01 	lds	r28, 0x01C9	; 0x8001c9 <state>
     e5e:	6c 2f       	mov	r22, r28
     e60:	87 e0       	ldi	r24, 0x07	; 7
     e62:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:922
                   digitalWrite(frontRightBlink_OutPin,state);
     e66:	6c 2f       	mov	r22, r28
     e68:	84 e0       	ldi	r24, 0x04	; 4
     e6a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:923
                  state =!state;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	c8 27       	eor	r28, r24
     e72:	c0 93 c9 01 	sts	0x01C9, r28	; 0x8001c9 <state>
F:\Arduino\projects\HPiECU/HPiECU.ino:931
               //       Serial.print("R");
                //  } else
                //  {
             // / //       Serial.print("r");
                 // }
                 Serial.println("rmillis");
     e76:	8f e9       	ldi	r24, 0x9F	; 159
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 b0 06 	call	0xd60	; 0xd60 <Print::println(char const*) [clone .constprop.49]>
F:\Arduino\projects\HPiECU/HPiECU.ino:932
             prevMillis = millis();
     e7e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     e82:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <prevMillis>
     e86:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <prevMillis+0x1>
     e8a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <prevMillis+0x2>
     e8e:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <prevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:936
           }
        }//
         //Multiblink
         if (multiblink)
     e92:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <multiblink>
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <Blink()+0x120>
     e9a:	41 c0       	rjmp	.+130    	; 0xf1e <Blink()+0x1a2>
F:\Arduino\projects\HPiECU/HPiECU.ino:938
          {
            if ((millis() - prevMillis) >= (blinkInterval)){
     e9c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     ea0:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <prevMillis>
     ea4:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <prevMillis+0x1>
     ea8:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <prevMillis+0x2>
     eac:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <prevMillis+0x3>
     eb0:	ab 01       	movw	r20, r22
     eb2:	bc 01       	movw	r22, r24
     eb4:	40 1b       	sub	r20, r16
     eb6:	51 0b       	sbc	r21, r17
     eb8:	62 0b       	sbc	r22, r18
     eba:	73 0b       	sbc	r23, r19
     ebc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <eep_blinkinterval>
     ec0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <eep_blinkinterval+0x1>
     ec4:	09 2e       	mov	r0, r25
     ec6:	00 0c       	add	r0, r0
     ec8:	aa 0b       	sbc	r26, r26
     eca:	bb 0b       	sbc	r27, r27
     ecc:	48 17       	cp	r20, r24
     ece:	59 07       	cpc	r21, r25
     ed0:	6a 07       	cpc	r22, r26
     ed2:	7b 07       	cpc	r23, r27
     ed4:	20 f1       	brcs	.+72     	; 0xf1e <Blink()+0x1a2>
F:\Arduino\projects\HPiECU/HPiECU.ino:939
                              digitalWrite(backRightBlink_OutPin,!state);
     ed6:	c0 91 c9 01 	lds	r28, 0x01C9	; 0x8001c9 <state>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	c8 27       	eor	r28, r24
     ede:	6c 2f       	mov	r22, r28
     ee0:	87 e0       	ldi	r24, 0x07	; 7
     ee2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:940
                   digitalWrite(frontRightBlink_OutPin,!state);
     ee6:	6c 2f       	mov	r22, r28
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:941
                   digitalWrite(frontLeftBlink_OutPin,!state);
     eee:	6c 2f       	mov	r22, r28
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:942
                   digitalWrite(backLeftBlink_OutPin,!state);
     ef6:	6c 2f       	mov	r22, r28
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:943
                   digitalWrite(backRightBlink_OutPin, !state);
     efe:	6c 2f       	mov	r22, r28
     f00:	87 e0       	ldi	r24, 0x07	; 7
     f02:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:951
               //        Serial.print("M");
                   } else
                   {
             //          Serial.print("m");
                   }
             state =!state; 
     f06:	c0 93 c9 01 	sts	0x01C9, r28	; 0x8001c9 <state>
F:\Arduino\projects\HPiECU/HPiECU.ino:952
              prevMillis = millis();
     f0a:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     f0e:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <prevMillis>
     f12:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <prevMillis+0x1>
     f16:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <prevMillis+0x2>
     f1a:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <prevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:955
            }
          }
        if (blinkdance)
     f1e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <blinkdance>
     f22:	88 23       	and	r24, r24
     f24:	81 f0       	breq	.+32     	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:958
        {
           // Serial.print("dance");   //UpdateUI  
            if (danceMode >= 5 ) danceMode = 1;
     f26:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <danceMode>
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	18 f0       	brcs	.+6      	; 0xf34 <Blink()+0x1b8>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <danceMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:959
          switch (danceMode)
     f34:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <danceMode>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	09 f4       	brne	.+2      	; 0xf3e <Blink()+0x1c2>
     f3c:	bd c0       	rjmp	.+378    	; 0x10b8 <Blink()+0x33c>
     f3e:	60 f4       	brcc	.+24     	; 0xf58 <Blink()+0x1dc>
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	09 f4       	brne	.+2      	; 0xf46 <Blink()+0x1ca>
     f44:	55 c0       	rjmp	.+170    	; 0xff0 <Blink()+0x274>
F:\Arduino\projects\HPiECU/HPiECU.ino:1194
       digitalWrite(frontLeftBlink_OutPin,LOW);
       digitalWrite(frontRightBlink_OutPin,LOW);
       digitalWrite(backLeftBlink_OutPin,LOW);
       digitalWrite(backRightBlink_OutPin,LOW);
       }
}//blink
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	08 95       	ret
F:\Arduino\projects\HPiECU/HPiECU.ino:959
          }
        if (blinkdance)
        {
           // Serial.print("dance");   //UpdateUI  
            if (danceMode >= 5 ) danceMode = 1;
          switch (danceMode)
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	09 f4       	brne	.+2      	; 0xf5e <Blink()+0x1e2>
     f5c:	5a c1       	rjmp	.+692    	; 0x1212 <Blink()+0x496>
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	91 f7       	brne	.-28     	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1125
  
          break;
                        

          case 4:////////Blink All 4 Blinkers Rapidly
           if (danceTwoFrontCounter <=5 && danceTwoFrontFlag == true)
     f62:	d0 91 c2 01 	lds	r29, 0x01C2	; 0x8001c2 <danceTwoFrontCounter>
     f66:	d6 30       	cpi	r29, 0x06	; 6
     f68:	08 f0       	brcs	.+2      	; 0xf6c <Blink()+0x1f0>
     f6a:	ea c1       	rjmp	.+980    	; 0x1340 <Blink()+0x5c4>
     f6c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f70:	88 23       	and	r24, r24
     f72:	09 f4       	brne	.+2      	; 0xf76 <Blink()+0x1fa>
     f74:	e5 c1       	rjmp	.+970    	; 0x1340 <Blink()+0x5c4>
F:\Arduino\projects\HPiECU/HPiECU.ino:1127
           {            
              if ((millis() - DancePrev_Millis) >= 50)
     f76:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     f7a:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <DancePrev_Millis>
     f7e:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <DancePrev_Millis+0x1>
     f82:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <DancePrev_Millis+0x2>
     f86:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <DancePrev_Millis+0x3>
     f8a:	60 1b       	sub	r22, r16
     f8c:	71 0b       	sbc	r23, r17
     f8e:	82 0b       	sbc	r24, r18
     f90:	93 0b       	sbc	r25, r19
     f92:	62 33       	cpi	r22, 0x32	; 50
     f94:	71 05       	cpc	r23, r1
     f96:	81 05       	cpc	r24, r1
     f98:	91 05       	cpc	r25, r1
     f9a:	a8 f2       	brcs	.-86     	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1129
              {
                DancePrev_Millis = millis();
     f9c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     fa0:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <DancePrev_Millis>
     fa4:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <DancePrev_Millis+0x1>
     fa8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <DancePrev_Millis+0x2>
     fac:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <DancePrev_Millis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1130
                danceTwoFrontState = !danceTwoFrontState;
     fb0:	c0 91 c1 01 	lds	r28, 0x01C1	; 0x8001c1 <danceTwoFrontState>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	c8 27       	eor	r28, r24
     fb8:	c0 93 c1 01 	sts	0x01C1, r28	; 0x8001c1 <danceTwoFrontState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1131
                digitalWrite(frontLeftBlink_OutPin,danceTwoFrontState);///Toggle
     fbc:	6c 2f       	mov	r22, r28
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1132
                digitalWrite(frontRightBlink_OutPin,danceTwoFrontState);///the
     fc4:	6c 2f       	mov	r22, r28
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1133
                digitalWrite(backLeftBlink_OutPin,danceTwoFrontState);///All
     fcc:	6c 2f       	mov	r22, r28
     fce:	85 e0       	ldi	r24, 0x05	; 5
     fd0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1134
                digitalWrite(backRightBlink_OutPin,danceTwoFrontState);//Blinkers
     fd4:	6c 2f       	mov	r22, r28
     fd6:	87 e0       	ldi	r24, 0x07	; 7
     fd8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1135
                if (danceTwoFrontState == HIGH)
     fdc:	cc 23       	and	r28, r28
     fde:	09 f4       	brne	.+2      	; 0xfe2 <Blink()+0x266>
     fe0:	b2 cf       	rjmp	.-156    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1138
                {
                  //Serial.print("\n 1A \n");
                  danceTwoFrontCounter++;
     fe2:	df 5f       	subi	r29, 0xFF	; 255
     fe4:	d0 93 c2 01 	sts	0x01C2, r29	; 0x8001c2 <danceTwoFrontCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1139
                  if (danceTwoFrontCounter >=5 )
     fe8:	d5 30       	cpi	r29, 0x05	; 5
     fea:	08 f0       	brcs	.+2      	; 0xfee <Blink()+0x272>
     fec:	ac c0       	rjmp	.+344    	; 0x1146 <Blink()+0x3ca>
     fee:	ab cf       	rjmp	.-170    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:962
           // Serial.print("dance");   //UpdateUI  
            if (danceMode >= 5 ) danceMode = 1;
          switch (danceMode)
          {
                   case 1:
                   if ((millis() - DancePrev_Millis) >= 300)
     ff0:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
     ff4:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <DancePrev_Millis>
     ff8:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <DancePrev_Millis+0x1>
     ffc:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <DancePrev_Millis+0x2>
    1000:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <DancePrev_Millis+0x3>
    1004:	60 1b       	sub	r22, r16
    1006:	71 0b       	sbc	r23, r17
    1008:	82 0b       	sbc	r24, r18
    100a:	93 0b       	sbc	r25, r19
    100c:	6c 32       	cpi	r22, 0x2C	; 44
    100e:	71 40       	sbci	r23, 0x01	; 1
    1010:	81 05       	cpc	r24, r1
    1012:	91 05       	cpc	r25, r1
    1014:	08 f4       	brcc	.+2      	; 0x1018 <Blink()+0x29c>
    1016:	97 cf       	rjmp	.-210    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:964
                   {
                       DancePrev_Millis = millis(); ///////////////////////// If Somthing Went Wrong Remove This Line
    1018:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    101c:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <DancePrev_Millis>
    1020:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <DancePrev_Millis+0x1>
    1024:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <DancePrev_Millis+0x2>
    1028:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <DancePrev_Millis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:965
                    danceblinkcounter++;
    102c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <danceblinkcounter>
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <danceblinkcounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:966
                    switch (danceblinkcounter) 
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	89 f1       	breq	.+98     	; 0x109c <Blink()+0x320>
    103a:	98 f4       	brcc	.+38     	; 0x1062 <Blink()+0x2e6>
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	09 f0       	breq	.+2      	; 0x1042 <Blink()+0x2c6>
    1040:	82 cf       	rjmp	.-252    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:969
                    {             
                    case 1:         
                      digitalWrite(frontLeftBlink_OutPin,HIGH);
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:970
                      digitalWrite(backLeftBlink_OutPin,LOW);
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	85 e0       	ldi	r24, 0x05	; 5
F:\Arduino\projects\HPiECU/HPiECU.ino:1194
       digitalWrite(frontLeftBlink_OutPin,LOW);
       digitalWrite(frontRightBlink_OutPin,LOW);
       digitalWrite(backLeftBlink_OutPin,LOW);
       digitalWrite(backRightBlink_OutPin,LOW);
       }
}//blink
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
F:\Arduino\projects\HPiECU/HPiECU.ino:1192
       {
       //turn off AllBlinkers
       digitalWrite(frontLeftBlink_OutPin,LOW);
       digitalWrite(frontRightBlink_OutPin,LOW);
       digitalWrite(backLeftBlink_OutPin,LOW);
       digitalWrite(backRightBlink_OutPin,LOW);
    105e:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:966
                   case 1:
                   if ((millis() - DancePrev_Millis) >= 300)
                   {
                       DancePrev_Millis = millis(); ///////////////////////// If Somthing Went Wrong Remove This Line
                    danceblinkcounter++;
                    switch (danceblinkcounter) 
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	11 f1       	breq	.+68     	; 0x10aa <Blink()+0x32e>
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	09 f0       	breq	.+2      	; 0x106c <Blink()+0x2f0>
    106a:	6d cf       	rjmp	.-294    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:981
                     case 3:
                     digitalWrite(frontRightBlink_OutPin,LOW);
                     digitalWrite(backRightBlink_OutPin,HIGH);
                     break;
                     case 4:
                     digitalWrite(backRightBlink_OutPin,LOW);
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	87 e0       	ldi	r24, 0x07	; 7
    1070:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:982
                     digitalWrite(backLeftBlink_OutPin,HIGH);
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	85 e0       	ldi	r24, 0x05	; 5
    1078:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:983
                     danceblinkcounter = 0;
    107c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <danceblinkcounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:984
                     stagecounter++;
    1080:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <stagecounter>
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <stagecounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:985
                     if (stagecounter >=5)
    108a:	85 30       	cpi	r24, 0x05	; 5
    108c:	08 f4       	brcc	.+2      	; 0x1090 <Blink()+0x314>
    108e:	5b cf       	rjmp	.-330    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:987
                     {
                       danceMode++;
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <danceMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:988
                       stagecounter = 0;
    1096:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <stagecounter>
    109a:	55 cf       	rjmp	.-342    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:973
                    case 1:         
                      digitalWrite(frontLeftBlink_OutPin,HIGH);
                      digitalWrite(backLeftBlink_OutPin,LOW);
                     break;
                     case 2:
                     digitalWrite(frontLeftBlink_OutPin,LOW);
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:974
                     digitalWrite(frontRightBlink_OutPin,HIGH);
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	d2 cf       	rjmp	.-92     	; 0x104e <Blink()+0x2d2>
F:\Arduino\projects\HPiECU/HPiECU.ino:977
                     break;
                     case 3:
                     digitalWrite(frontRightBlink_OutPin,LOW);
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:978
                     digitalWrite(backRightBlink_OutPin,HIGH);
    10b2:	61 e0       	ldi	r22, 0x01	; 1
F:\Arduino\projects\HPiECU/HPiECU.ino:1192
       {
       //turn off AllBlinkers
       digitalWrite(frontLeftBlink_OutPin,LOW);
       digitalWrite(frontRightBlink_OutPin,LOW);
       digitalWrite(backLeftBlink_OutPin,LOW);
       digitalWrite(backRightBlink_OutPin,LOW);
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	cb cf       	rjmp	.-106    	; 0x104e <Blink()+0x2d2>
F:\Arduino\projects\HPiECU/HPiECU.ino:1003
          case 2: /// turn on Front Blinkers Rapidly etc 3 times,then turn on back blinkers rapidly too.
                      // this task wil repeated for etc 3 times


                 //    Serial.print("\n case2 \n");
              if (danceTwoFrontCounter <=5 && danceTwoFrontFlag == true)
    10b8:	c0 91 c2 01 	lds	r28, 0x01C2	; 0x8001c2 <danceTwoFrontCounter>
    10bc:	c6 30       	cpi	r28, 0x06	; 6
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <Blink()+0x346>
    10c0:	48 c0       	rjmp	.+144    	; 0x1152 <Blink()+0x3d6>
    10c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    10c6:	88 23       	and	r24, r24
    10c8:	09 f4       	brne	.+2      	; 0x10cc <Blink()+0x350>
    10ca:	43 c0       	rjmp	.+134    	; 0x1152 <Blink()+0x3d6>
F:\Arduino\projects\HPiECU/HPiECU.ino:1005
            {            
              if ((millis() - DancePrev_Millis) >= 50)
    10cc:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    10d0:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <DancePrev_Millis>
    10d4:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <DancePrev_Millis+0x1>
    10d8:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <DancePrev_Millis+0x2>
    10dc:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <DancePrev_Millis+0x3>
    10e0:	60 1b       	sub	r22, r16
    10e2:	71 0b       	sbc	r23, r17
    10e4:	82 0b       	sbc	r24, r18
    10e6:	93 0b       	sbc	r25, r19
    10e8:	62 33       	cpi	r22, 0x32	; 50
    10ea:	71 05       	cpc	r23, r1
    10ec:	81 05       	cpc	r24, r1
    10ee:	91 05       	cpc	r25, r1
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <Blink()+0x378>
    10f2:	29 cf       	rjmp	.-430    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1007
              {
                digitalWrite(backLeftBlink_OutPin,LOW);//turn off the 
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	85 e0       	ldi	r24, 0x05	; 5
    10f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1008
                digitalWrite(backRightBlink_OutPin,LOW);//back blinkers
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	87 e0       	ldi	r24, 0x07	; 7
    1100:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1009
                DancePrev_Millis = millis();
    1104:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1108:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <DancePrev_Millis>
    110c:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <DancePrev_Millis+0x1>
    1110:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <DancePrev_Millis+0x2>
    1114:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <DancePrev_Millis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1010
                danceTwoFrontState = !danceTwoFrontState;
    1118:	d0 91 c1 01 	lds	r29, 0x01C1	; 0x8001c1 <danceTwoFrontState>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	d8 27       	eor	r29, r24
    1120:	d0 93 c1 01 	sts	0x01C1, r29	; 0x8001c1 <danceTwoFrontState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1011
                digitalWrite(frontLeftBlink_OutPin,danceTwoFrontState);//toggle the 
    1124:	6d 2f       	mov	r22, r29
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1012
                digitalWrite(frontRightBlink_OutPin,danceTwoFrontState);// front blinkers.
    112c:	6d 2f       	mov	r22, r29
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1013
                if (danceTwoFrontState == HIGH)
    1134:	dd 23       	and	r29, r29
    1136:	09 f4       	brne	.+2      	; 0x113a <Blink()+0x3be>
    1138:	06 cf       	rjmp	.-500    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1016
                {
                 // Serial.print("\n 1A \n");
                  danceTwoFrontCounter++;
    113a:	cf 5f       	subi	r28, 0xFF	; 255
    113c:	c0 93 c2 01 	sts	0x01C2, r28	; 0x8001c2 <danceTwoFrontCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1017
                  if (danceTwoFrontCounter >=5 )
    1140:	c5 30       	cpi	r28, 0x05	; 5
    1142:	08 f4       	brcc	.+2      	; 0x1146 <Blink()+0x3ca>
    1144:	00 cf       	rjmp	.-512    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1020
                  {
                    
                   danceTwoFrontFlag = false;
    1146:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
F:\Arduino\projects\HPiECU/HPiECU.ino:1021
                   danceTwoBackFlag = true;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <danceTwoBackFlag>
    1150:	fa ce       	rjmp	.-524    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1028

                 }
               }
            }else
            {
              if (danceTwoBackCounter <=5 && danceTwoBackFlag == true )
    1152:	10 91 bf 01 	lds	r17, 0x01BF	; 0x8001bf <danceTwoBackCounter>
    1156:	16 30       	cpi	r17, 0x06	; 6
    1158:	08 f0       	brcs	.+2      	; 0x115c <Blink()+0x3e0>
    115a:	f5 ce       	rjmp	.-534    	; 0xf46 <Blink()+0x1ca>
    115c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <danceTwoBackFlag>
    1160:	88 23       	and	r24, r24
    1162:	09 f4       	brne	.+2      	; 0x1166 <Blink()+0x3ea>
    1164:	f0 ce       	rjmp	.-544    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1030
             {
               if ((millis() - DancePrev_Millis) >=50)
    1166:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    116a:	c0 90 c5 01 	lds	r12, 0x01C5	; 0x8001c5 <DancePrev_Millis>
    116e:	d0 90 c6 01 	lds	r13, 0x01C6	; 0x8001c6 <DancePrev_Millis+0x1>
    1172:	e0 90 c7 01 	lds	r14, 0x01C7	; 0x8001c7 <DancePrev_Millis+0x2>
    1176:	f0 90 c8 01 	lds	r15, 0x01C8	; 0x8001c8 <DancePrev_Millis+0x3>
    117a:	6c 19       	sub	r22, r12
    117c:	7d 09       	sbc	r23, r13
    117e:	8e 09       	sbc	r24, r14
    1180:	9f 09       	sbc	r25, r15
    1182:	62 33       	cpi	r22, 0x32	; 50
    1184:	71 05       	cpc	r23, r1
    1186:	81 05       	cpc	r24, r1
    1188:	91 05       	cpc	r25, r1
    118a:	08 f4       	brcc	.+2      	; 0x118e <Blink()+0x412>
    118c:	dc ce       	rjmp	.-584    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1032
               {
                digitalWrite(frontLeftBlink_OutPin,LOW);//turn off the 
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1033
                digitalWrite(frontRightBlink_OutPin,LOW);//front blinkers
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1034
                DancePrev_Millis = millis();
    119e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    11a2:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <DancePrev_Millis>
    11a6:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <DancePrev_Millis+0x1>
    11aa:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <DancePrev_Millis+0x2>
    11ae:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <DancePrev_Millis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1035
                danceTwoBackState =!danceTwoBackState;
    11b2:	d0 91 be 01 	lds	r29, 0x01BE	; 0x8001be <danceTwoBackState>
    11b6:	01 e0       	ldi	r16, 0x01	; 1
    11b8:	d0 27       	eor	r29, r16
    11ba:	d0 93 be 01 	sts	0x01BE, r29	; 0x8001be <danceTwoBackState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1036
                digitalWrite(backLeftBlink_OutPin,danceTwoBackState);
    11be:	6d 2f       	mov	r22, r29
    11c0:	85 e0       	ldi	r24, 0x05	; 5
    11c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1037
                digitalWrite(backRightBlink_OutPin,danceTwoBackState);
    11c6:	6d 2f       	mov	r22, r29
    11c8:	87 e0       	ldi	r24, 0x07	; 7
    11ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1038
                 if (danceTwoBackState == HIGH)
    11ce:	dd 23       	and	r29, r29
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <Blink()+0x458>
    11d2:	b9 ce       	rjmp	.-654    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1041
                 {
                 // Serial.print("\n 1B \n");
                  danceTwoBackCounter++;
    11d4:	1f 5f       	subi	r17, 0xFF	; 255
    11d6:	10 93 bf 01 	sts	0x01BF, r17	; 0x8001bf <danceTwoBackCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1042
                  if (danceTwoFrontCounter >= 5 && danceTwoBackCounter >=5)
    11da:	c5 30       	cpi	r28, 0x05	; 5
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <Blink()+0x464>
    11de:	b3 ce       	rjmp	.-666    	; 0xf46 <Blink()+0x1ca>
    11e0:	15 30       	cpi	r17, 0x05	; 5
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <Blink()+0x46a>
    11e4:	b0 ce       	rjmp	.-672    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1044
                  {
                    danceTwoFrontCounter = 0;
    11e6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <danceTwoFrontCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1045
                    danceTwoBackCounter = 0;
    11ea:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <danceTwoBackCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1046
                   danceTwoFrontFlag = true;
    11ee:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
F:\Arduino\projects\HPiECU/HPiECU.ino:1047
                   danceTwoBackFlag = false;
    11f2:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <danceTwoBackFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1048
                   stagecounter++;
    11f6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <stagecounter>
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
F:\Arduino\projects\HPiECU/HPiECU.ino:1049
                   if (stagecounter >= 5)
    11fc:	85 30       	cpi	r24, 0x05	; 5
    11fe:	18 f4       	brcc	.+6      	; 0x1206 <Blink()+0x48a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1171
                  {
                    danceTwoFrontCounter = 0;
                    danceTwoBackCounter = 0;
                   danceTwoFrontFlag = true;
                   danceTwoBackFlag = false;
                   stagecounter++;
    1200:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <stagecounter>
    1204:	a0 ce       	rjmp	.-704    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1051
                   danceTwoFrontFlag = true;
                   danceTwoBackFlag = false;
                   stagecounter++;
                   if (stagecounter >= 5)
                    {
                     stagecounter = 0;
    1206:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <stagecounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1052
                     danceMode++;
    120a:	83 e0       	ldi	r24, 0x03	; 3
F:\Arduino\projects\HPiECU/HPiECU.ino:1113
                   danceTwoBackFlag = false;
                   stagecounter++;
                   if (stagecounter >= 5)
                    {
                     stagecounter = 0;
                     danceMode++;
    120c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <danceMode>
    1210:	9a ce       	rjmp	.-716    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1064
          break;
          case 3:
                     ////blinks front and back Left blinkers etc 3 times then turns right blinkers...
                     /// Copy-Pasted From MODE TWO!!!!!
                //     Serial.print("\n case3 \n");
           if (danceTwoFrontCounter <=5 && danceTwoFrontFlag == true)
    1212:	c0 91 c2 01 	lds	r28, 0x01C2	; 0x8001c2 <danceTwoFrontCounter>
    1216:	c6 30       	cpi	r28, 0x06	; 6
    1218:	b8 f5       	brcc	.+110    	; 0x1288 <Blink()+0x50c>
    121a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    121e:	88 23       	and	r24, r24
    1220:	99 f1       	breq	.+102    	; 0x1288 <Blink()+0x50c>
F:\Arduino\projects\HPiECU/HPiECU.ino:1066
           {            
              if ((millis() - DancePrev_Millis) >= 50)
    1222:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1226:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <DancePrev_Millis>
    122a:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <DancePrev_Millis+0x1>
    122e:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <DancePrev_Millis+0x2>
    1232:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <DancePrev_Millis+0x3>
    1236:	60 1b       	sub	r22, r16
    1238:	71 0b       	sbc	r23, r17
    123a:	82 0b       	sbc	r24, r18
    123c:	93 0b       	sbc	r25, r19
    123e:	62 33       	cpi	r22, 0x32	; 50
    1240:	71 05       	cpc	r23, r1
    1242:	81 05       	cpc	r24, r1
    1244:	91 05       	cpc	r25, r1
    1246:	08 f4       	brcc	.+2      	; 0x124a <Blink()+0x4ce>
    1248:	7e ce       	rjmp	.-772    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1068
              {
                digitalWrite(frontRightBlink_OutPin,LOW);//turn off the 
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1069
                digitalWrite(backRightBlink_OutPin,LOW);//Right blinkers
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	87 e0       	ldi	r24, 0x07	; 7
    1256:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1070
                DancePrev_Millis = millis();
    125a:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    125e:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <DancePrev_Millis>
    1262:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <DancePrev_Millis+0x1>
    1266:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <DancePrev_Millis+0x2>
    126a:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <DancePrev_Millis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1071
                danceTwoFrontState = !danceTwoFrontState;
    126e:	d0 91 c1 01 	lds	r29, 0x01C1	; 0x8001c1 <danceTwoFrontState>
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	d8 27       	eor	r29, r24
    1276:	d0 93 c1 01 	sts	0x01C1, r29	; 0x8001c1 <danceTwoFrontState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1072
                digitalWrite(frontLeftBlink_OutPin,danceTwoFrontState);//toggle the 
    127a:	6d 2f       	mov	r22, r29
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1073
                digitalWrite(backLeftBlink_OutPin,danceTwoFrontState);// Left blinkers.
    1282:	6d 2f       	mov	r22, r29
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	54 cf       	rjmp	.-344    	; 0x1130 <Blink()+0x3b4>
F:\Arduino\projects\HPiECU/HPiECU.ino:1089

                 }
               }
            }else
            {
             if (danceTwoBackCounter <=5 && danceTwoBackFlag == true )
    1288:	10 91 bf 01 	lds	r17, 0x01BF	; 0x8001bf <danceTwoBackCounter>
    128c:	16 30       	cpi	r17, 0x06	; 6
    128e:	08 f0       	brcs	.+2      	; 0x1292 <Blink()+0x516>
    1290:	5a ce       	rjmp	.-844    	; 0xf46 <Blink()+0x1ca>
    1292:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <danceTwoBackFlag>
    1296:	88 23       	and	r24, r24
    1298:	09 f4       	brne	.+2      	; 0x129c <Blink()+0x520>
    129a:	55 ce       	rjmp	.-854    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1091
             {
              if ((millis() - DancePrev_Millis) >=50)
    129c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    12a0:	c0 90 c5 01 	lds	r12, 0x01C5	; 0x8001c5 <DancePrev_Millis>
    12a4:	d0 90 c6 01 	lds	r13, 0x01C6	; 0x8001c6 <DancePrev_Millis+0x1>
    12a8:	e0 90 c7 01 	lds	r14, 0x01C7	; 0x8001c7 <DancePrev_Millis+0x2>
    12ac:	f0 90 c8 01 	lds	r15, 0x01C8	; 0x8001c8 <DancePrev_Millis+0x3>
    12b0:	6c 19       	sub	r22, r12
    12b2:	7d 09       	sbc	r23, r13
    12b4:	8e 09       	sbc	r24, r14
    12b6:	9f 09       	sbc	r25, r15
    12b8:	62 33       	cpi	r22, 0x32	; 50
    12ba:	71 05       	cpc	r23, r1
    12bc:	81 05       	cpc	r24, r1
    12be:	91 05       	cpc	r25, r1
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <Blink()+0x548>
    12c2:	41 ce       	rjmp	.-894    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1093
              {
                digitalWrite(frontLeftBlink_OutPin,LOW);//turn off the 
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1094
                digitalWrite(backLeftBlink_OutPin,LOW);//Left blinkers
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1095
                DancePrev_Millis = millis();
    12d4:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    12d8:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <DancePrev_Millis>
    12dc:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <DancePrev_Millis+0x1>
    12e0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <DancePrev_Millis+0x2>
    12e4:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <DancePrev_Millis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1096
                danceTwoBackState =!danceTwoBackState;
    12e8:	d0 91 be 01 	lds	r29, 0x01BE	; 0x8001be <danceTwoBackState>
    12ec:	01 e0       	ldi	r16, 0x01	; 1
    12ee:	d0 27       	eor	r29, r16
    12f0:	d0 93 be 01 	sts	0x01BE, r29	; 0x8001be <danceTwoBackState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1097
                digitalWrite(frontRightBlink_OutPin,danceTwoBackState);
    12f4:	6d 2f       	mov	r22, r29
    12f6:	84 e0       	ldi	r24, 0x04	; 4
    12f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1098
                digitalWrite(backRightBlink_OutPin,danceTwoBackState);
    12fc:	6d 2f       	mov	r22, r29
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1099
                 if (danceTwoBackState == HIGH)
    1304:	dd 23       	and	r29, r29
    1306:	09 f4       	brne	.+2      	; 0x130a <Blink()+0x58e>
    1308:	1e ce       	rjmp	.-964    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1102
                 {
               //   Serial.print("\n 1B \n");
                  danceTwoBackCounter++;
    130a:	1f 5f       	subi	r17, 0xFF	; 255
    130c:	10 93 bf 01 	sts	0x01BF, r17	; 0x8001bf <danceTwoBackCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1103
                  if (danceTwoFrontCounter >= 5 && danceTwoBackCounter >=5)
    1310:	c5 30       	cpi	r28, 0x05	; 5
    1312:	08 f4       	brcc	.+2      	; 0x1316 <Blink()+0x59a>
    1314:	18 ce       	rjmp	.-976    	; 0xf46 <Blink()+0x1ca>
    1316:	15 30       	cpi	r17, 0x05	; 5
    1318:	08 f4       	brcc	.+2      	; 0x131c <Blink()+0x5a0>
    131a:	15 ce       	rjmp	.-982    	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1105
                  {
                    danceTwoFrontCounter = 0;
    131c:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <danceTwoFrontCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1106
                    danceTwoBackCounter = 0;
    1320:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <danceTwoBackCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1107
                   danceTwoFrontFlag = true;
    1324:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
F:\Arduino\projects\HPiECU/HPiECU.ino:1108
                   danceTwoBackFlag = false;
    1328:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <danceTwoBackFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1109
                   stagecounter++;
    132c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <stagecounter>
    1330:	8f 5f       	subi	r24, 0xFF	; 255
F:\Arduino\projects\HPiECU/HPiECU.ino:1110
                   if (stagecounter >= 5)
    1332:	85 30       	cpi	r24, 0x05	; 5
    1334:	08 f4       	brcc	.+2      	; 0x1338 <Blink()+0x5bc>
    1336:	64 cf       	rjmp	.-312    	; 0x1200 <Blink()+0x484>
F:\Arduino\projects\HPiECU/HPiECU.ino:1112
                    {
                     stagecounter = 0;
    1338:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <stagecounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1113
                     danceMode++;
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	66 cf       	rjmp	.-308    	; 0x120c <Blink()+0x490>
F:\Arduino\projects\HPiECU/HPiECU.ino:1150

                 }
               }
            }else
            {
             if (danceTwoBackCounter <=5 && danceTwoBackFlag == true )
    1340:	c0 91 bf 01 	lds	r28, 0x01BF	; 0x8001bf <danceTwoBackCounter>
    1344:	c6 30       	cpi	r28, 0x06	; 6
    1346:	08 f0       	brcs	.+2      	; 0x134a <Blink()+0x5ce>
    1348:	fe cd       	rjmp	.-1028   	; 0xf46 <Blink()+0x1ca>
    134a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <danceTwoBackFlag>
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <Blink()+0x5d8>
    1352:	f9 cd       	rjmp	.-1038   	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1152
             {
              if ((millis() - DancePrev_Millis) >=50)
    1354:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1358:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <DancePrev_Millis>
    135c:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <DancePrev_Millis+0x1>
    1360:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <DancePrev_Millis+0x2>
    1364:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <DancePrev_Millis+0x3>
    1368:	60 1b       	sub	r22, r16
    136a:	71 0b       	sbc	r23, r17
    136c:	82 0b       	sbc	r24, r18
    136e:	93 0b       	sbc	r25, r19
    1370:	62 33       	cpi	r22, 0x32	; 50
    1372:	71 05       	cpc	r23, r1
    1374:	81 05       	cpc	r24, r1
    1376:	91 05       	cpc	r25, r1
    1378:	08 f4       	brcc	.+2      	; 0x137c <Blink()+0x600>
    137a:	e5 cd       	rjmp	.-1078   	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1154
              {
                digitalWrite(frontLeftBlink_OutPin,LOW);//turn off the 
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1155
                digitalWrite(backLeftBlink_OutPin,LOW);//Left blinkers
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	85 e0       	ldi	r24, 0x05	; 5
    1388:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1156
                digitalWrite(frontRightBlink_OutPin,LOW);
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1157
                digitalWrite(backRightBlink_OutPin,LOW);
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	87 e0       	ldi	r24, 0x07	; 7
    1398:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1158
                DancePrev_Millis = millis();
    139c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    13a0:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <DancePrev_Millis>
    13a4:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <DancePrev_Millis+0x1>
    13a8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <DancePrev_Millis+0x2>
    13ac:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <DancePrev_Millis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1159
                danceTwoBackState =!danceTwoBackState;
    13b0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <danceTwoBackState>
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	89 27       	eor	r24, r25
    13b8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <danceTwoBackState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1161

                 if (danceTwoBackState == HIGH)
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <Blink()+0x646>
    13c0:	c2 cd       	rjmp	.-1148   	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1164
                 {
                  //Serial.print("\n mode4 waiting \n");
                  danceTwoBackCounter++;
    13c2:	cf 5f       	subi	r28, 0xFF	; 255
    13c4:	c0 93 bf 01 	sts	0x01BF, r28	; 0x8001bf <danceTwoBackCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1165
                  if (danceTwoFrontCounter >= 5 && danceTwoBackCounter >=5)
    13c8:	d5 30       	cpi	r29, 0x05	; 5
    13ca:	08 f4       	brcc	.+2      	; 0x13ce <Blink()+0x652>
    13cc:	bc cd       	rjmp	.-1160   	; 0xf46 <Blink()+0x1ca>
    13ce:	c5 30       	cpi	r28, 0x05	; 5
    13d0:	08 f4       	brcc	.+2      	; 0x13d4 <Blink()+0x658>
    13d2:	b9 cd       	rjmp	.-1166   	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1167
                  {
                    danceTwoFrontCounter = 0;
    13d4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <danceTwoFrontCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1168
                    danceTwoBackCounter = 0;
    13d8:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <danceTwoBackCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1169
                   danceTwoFrontFlag = true;
    13dc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
F:\Arduino\projects\HPiECU/HPiECU.ino:1170
                   danceTwoBackFlag = false;
    13e0:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <danceTwoBackFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1171
                   stagecounter++;
    13e4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <stagecounter>
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
F:\Arduino\projects\HPiECU/HPiECU.ino:1172
                   if (stagecounter >=5)
    13ea:	85 30       	cpi	r24, 0x05	; 5
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <Blink()+0x674>
    13ee:	08 cf       	rjmp	.-496    	; 0x1200 <Blink()+0x484>
F:\Arduino\projects\HPiECU/HPiECU.ino:1174
                    {
                     stagecounter = 0;
    13f0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <stagecounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1175
                     danceMode = 1;
    13f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <danceMode>
    13f8:	a6 cd       	rjmp	.-1204   	; 0xf46 <Blink()+0x1ca>
F:\Arduino\projects\HPiECU/HPiECU.ino:1189
          }
        }
       }else
       {
       //turn off AllBlinkers
       digitalWrite(frontLeftBlink_OutPin,LOW);
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1190
       digitalWrite(frontRightBlink_OutPin,LOW);
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1191
       digitalWrite(backLeftBlink_OutPin,LOW);
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	85 e0       	ldi	r24, 0x05	; 5
    140e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1192
       digitalWrite(backRightBlink_OutPin,LOW);
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	4f ce       	rjmp	.-866    	; 0x10b4 <Blink()+0x338>

00001416 <DoAlarm()>:
DoAlarm():
F:\Arduino\projects\HPiECU/HPiECU.ino:1909

/// <summary>
/// Play's Alarm Sounds.
/// </summary>
void DoAlarm()
{
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
F:\Arduino\projects\HPiECU/HPiECU.ino:1910
    if (Alarm == true)
    1426:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Alarm>
    142a:	88 23       	and	r24, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <DoAlarm()+0x1a>
    142e:	d5 c1       	rjmp	.+938    	; 0x17da <DoAlarm()+0x3c4>
F:\Arduino\projects\HPiECU/HPiECU.ino:1912
    {
        if (Silenced == false)// if not silenced
    1430:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Silenced>
    1434:	81 11       	cpse	r24, r1
    1436:	cb c1       	rjmp	.+918    	; 0x17ce <DoAlarm()+0x3b8>
F:\Arduino\projects\HPiECU/HPiECU.ino:1914
        {
            blinkerstate = true;//Enable Blinkers.
    1438:	d1 e0       	ldi	r29, 0x01	; 1
    143a:	d0 93 39 02 	sts	0x0239, r29	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:1915
            multiblink = true;//Enable Blinkers.
    143e:	d0 93 3a 02 	sts	0x023A, r29	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:1917

            switch (Alarmstage)
    1442:	c0 91 6e 00 	lds	r28, 0x006E	; 0x80006e <Alarmstage>
    1446:	c2 30       	cpi	r28, 0x02	; 2
    1448:	09 f4       	brne	.+2      	; 0x144c <DoAlarm()+0x36>
    144a:	25 c1       	rjmp	.+586    	; 0x1696 <DoAlarm()+0x280>
    144c:	08 f0       	brcs	.+2      	; 0x1450 <DoAlarm()+0x3a>
    144e:	99 c0       	rjmp	.+306    	; 0x1582 <DoAlarm()+0x16c>
    1450:	c1 30       	cpi	r28, 0x01	; 1
    1452:	09 f4       	brne	.+2      	; 0x1456 <DoAlarm()+0x40>
    1454:	ce c0       	rjmp	.+412    	; 0x15f2 <DoAlarm()+0x1dc>
F:\Arduino\projects\HPiECU/HPiECU.ino:2018
                }//micros
                break;
            }


            if (currentCounter >= 10)
    1456:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <currentCounter>
    145a:	8a 30       	cpi	r24, 0x0A	; 10
    145c:	60 f0       	brcs	.+24     	; 0x1476 <DoAlarm()+0x60>
F:\Arduino\projects\HPiECU/HPiECU.ino:2020
            {
                currentCounter = 0;
    145e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <currentCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:2021
                Alarmstage++;
    1462:	cf 5f       	subi	r28, 0xFF	; 255
    1464:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <Alarmstage>
F:\Arduino\projects\HPiECU/HPiECU.ino:2022
                flag = true;///reset the Flag
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:2023
                mod3_wait = 0;//reset counter 
    146e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <mod3_wait+0x1>
    1472:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <mod3_wait>
F:\Arduino\projects\HPiECU/HPiECU.ino:2025
            }
            if (Alarmstage > 4)
    1476:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Alarmstage>
    147a:	85 30       	cpi	r24, 0x05	; 5
    147c:	18 f0       	brcs	.+6      	; 0x1484 <DoAlarm()+0x6e>
F:\Arduino\projects\HPiECU/HPiECU.ino:2027
            {
                Alarmstage = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Alarmstage>
F:\Arduino\projects\HPiECU/HPiECU.ino:2036
        {
            blinkerstate = true;//Enable Blinkers.
            multiblink = true;//Enable Blinkers.
        }

        if ((millis() - Alarm_Timer) >= 20000)
    1484:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1488:	00 91 e5 01 	lds	r16, 0x01E5	; 0x8001e5 <Alarm_Timer>
    148c:	10 91 e6 01 	lds	r17, 0x01E6	; 0x8001e6 <Alarm_Timer+0x1>
    1490:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <Alarm_Timer+0x2>
    1494:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <Alarm_Timer+0x3>
    1498:	60 1b       	sub	r22, r16
    149a:	71 0b       	sbc	r23, r17
    149c:	82 0b       	sbc	r24, r18
    149e:	93 0b       	sbc	r25, r19
    14a0:	60 32       	cpi	r22, 0x20	; 32
    14a2:	7e 44       	sbci	r23, 0x4E	; 78
    14a4:	81 05       	cpc	r24, r1
    14a6:	91 05       	cpc	r25, r1
    14a8:	88 f0       	brcs	.+34     	; 0x14cc <DoAlarm()+0xb6>
F:\Arduino\projects\HPiECU/HPiECU.ino:2038
        {
            Alarm_Timer = 0;//reset The Timer.
    14aa:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <Alarm_Timer>
    14ae:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <Alarm_Timer+0x1>
    14b2:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <Alarm_Timer+0x2>
    14b6:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <Alarm_Timer+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:2039
            Alarm = false;
    14ba:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <Alarm>
F:\Arduino\projects\HPiECU/HPiECU.ino:2040
            blinkerstate = false;//
    14be:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:2041
            multiblink = false;
    14c2:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:2042
            noTone(Piezo_OutPin);
    14c6:	8c e1       	ldi	r24, 0x1C	; 28
    14c8:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
F:\Arduino\projects\HPiECU/HPiECU.ino:2054
        blinkerstate = false;//Disable Blinkers.
        multiblink = false;//Disable Blinkers.
    }
    //
    /////////Single Alarm
    if (single_Alarm == true)
    14cc:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <single_Alarm>
    14d0:	88 23       	and	r24, r24
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <DoAlarm()+0xc0>
    14d4:	9e c1       	rjmp	.+828    	; 0x1812 <DoAlarm()+0x3fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:2056
    {
        blinkerstate = true;//Enable Blinkers.
    14d6:	11 e0       	ldi	r17, 0x01	; 1
    14d8:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:2057
        multiblink = true;//Enable Blinkers.
    14dc:	10 93 3a 02 	sts	0x023A, r17	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:2059
       /* Serial.println("s");*/
        if ((micros() - Alarm_prevmicros) >= Single_delay)
    14e0:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    14e4:	c0 90 f0 01 	lds	r12, 0x01F0	; 0x8001f0 <Alarm_prevmicros>
    14e8:	d0 90 f1 01 	lds	r13, 0x01F1	; 0x8001f1 <Alarm_prevmicros+0x1>
    14ec:	e0 90 f2 01 	lds	r14, 0x01F2	; 0x8001f2 <Alarm_prevmicros+0x2>
    14f0:	f0 90 f3 01 	lds	r15, 0x01F3	; 0x8001f3 <Alarm_prevmicros+0x3>
    14f4:	6c 19       	sub	r22, r12
    14f6:	7d 09       	sbc	r23, r13
    14f8:	8e 09       	sbc	r24, r14
    14fa:	9f 09       	sbc	r25, r15
    14fc:	64 3f       	cpi	r22, 0xF4	; 244
    14fe:	71 40       	sbci	r23, 0x01	; 1
    1500:	81 05       	cpc	r24, r1
    1502:	91 05       	cpc	r25, r1
    1504:	28 f1       	brcs	.+74     	; 0x1550 <DoAlarm()+0x13a>
    1506:	00 91 e3 01 	lds	r16, 0x01E3	; 0x8001e3 <singlecount>
F:\Arduino\projects\HPiECU/HPiECU.ino:2061
        {
            Alarm_prevmicros = micros();
    150a:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    150e:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <Alarm_prevmicros>
    1512:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <Alarm_prevmicros+0x1>
    1516:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Alarm_prevmicros+0x2>
    151a:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <Alarm_prevmicros+0x3>
    151e:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <Single_freq>
    1522:	d0 91 66 00 	lds	r29, 0x0066	; 0x800066 <Single_freq+0x1>
F:\Arduino\projects\HPiECU/HPiECU.ino:2062
            if (flag == true)
    1526:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
    152a:	88 23       	and	r24, r24
    152c:	09 f4       	brne	.+2      	; 0x1530 <DoAlarm()+0x11a>
    152e:	62 c1       	rjmp	.+708    	; 0x17f4 <DoAlarm()+0x3de>
F:\Arduino\projects\HPiECU/HPiECU.ino:2064
            {
                Single_freq++;
    1530:	21 96       	adiw	r28, 0x01	; 1
    1532:	d0 93 66 00 	sts	0x0066, r29	; 0x800066 <Single_freq+0x1>
    1536:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <Single_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:2065
                tone(Piezo_OutPin, Single_freq);
    153a:	ce 01       	movw	r24, r28
    153c:	0e 94 57 01 	call	0x2ae	; 0x2ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]>
F:\Arduino\projects\HPiECU/HPiECU.ino:2066
                if (Single_freq >= 768)
    1540:	c1 15       	cp	r28, r1
    1542:	d3 40       	sbci	r29, 0x03	; 3
    1544:	28 f0       	brcs	.+10     	; 0x1550 <DoAlarm()+0x13a>
F:\Arduino\projects\HPiECU/HPiECU.ino:2068
                {
                    singlecount++;
    1546:	0f 5f       	subi	r16, 0xFF	; 255
    1548:	00 93 e3 01 	sts	0x01E3, r16	; 0x8001e3 <singlecount>
F:\Arduino\projects\HPiECU/HPiECU.ino:2070
                    //freq =768;
                    flag = false;
    154c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:2082
                    flag = true;
            }
        }//micros


        if (singlecount >= 2)
    1550:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <singlecount>
    1554:	82 30       	cpi	r24, 0x02	; 2
    1556:	58 f0       	brcs	.+22     	; 0x156e <DoAlarm()+0x158>
F:\Arduino\projects\HPiECU/HPiECU.ino:2084
        {
            blinkerstate = false;//disable Blinkers.
    1558:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:2085
            multiblink = false;//disable Blinkers.
    155c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:2086
            singlecount = 0;
    1560:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <singlecount>
F:\Arduino\projects\HPiECU/HPiECU.ino:2087
            noTone(Piezo_OutPin);
    1564:	8c e1       	ldi	r24, 0x1C	; 28
    1566:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
F:\Arduino\projects\HPiECU/HPiECU.ino:2088
            single_Alarm = false;
    156a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <single_Alarm>
F:\Arduino\projects\HPiECU/HPiECU.ino:2093
        }
        Blink();

    }///single
}//
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	df 90       	pop	r13
    157c:	cf 90       	pop	r12
F:\Arduino\projects\HPiECU/HPiECU.ino:2090
            multiblink = false;//disable Blinkers.
            singlecount = 0;
            noTone(Piezo_OutPin);
            single_Alarm = false;
        }
        Blink();
    157e:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <Blink()>
F:\Arduino\projects\HPiECU/HPiECU.ino:1917
        if (Silenced == false)// if not silenced
        {
            blinkerstate = true;//Enable Blinkers.
            multiblink = true;//Enable Blinkers.

            switch (Alarmstage)
    1582:	c3 30       	cpi	r28, 0x03	; 3
    1584:	09 f4       	brne	.+2      	; 0x1588 <DoAlarm()+0x172>
    1586:	e0 c0       	rjmp	.+448    	; 0x1748 <DoAlarm()+0x332>
    1588:	c4 30       	cpi	r28, 0x04	; 4
    158a:	09 f0       	breq	.+2      	; 0x158e <DoAlarm()+0x178>
    158c:	64 cf       	rjmp	.-312    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:1947

                break;
            case 4:
               // Serial.println("4B");
                //play_tone_in_case = false;
                if ((millis() - Alarm_prevmillis) >= mod_D_delay)
    158e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1592:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <Alarm_prevmillis>
    1596:	10 91 ec 01 	lds	r17, 0x01EC	; 0x8001ec <Alarm_prevmillis+0x1>
    159a:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <Alarm_prevmillis+0x2>
    159e:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <Alarm_prevmillis+0x3>
    15a2:	60 1b       	sub	r22, r16
    15a4:	71 0b       	sbc	r23, r17
    15a6:	82 0b       	sbc	r24, r18
    15a8:	93 0b       	sbc	r25, r19
    15aa:	60 39       	cpi	r22, 0x90	; 144
    15ac:	71 40       	sbci	r23, 0x01	; 1
    15ae:	81 05       	cpc	r24, r1
    15b0:	91 05       	cpc	r25, r1
    15b2:	d0 f0       	brcs	.+52     	; 0x15e8 <DoAlarm()+0x1d2>
    15b4:	00 91 69 00 	lds	r16, 0x0069	; 0x800069 <D_freq>
    15b8:	10 91 6a 00 	lds	r17, 0x006A	; 0x80006a <D_freq+0x1>
    15bc:	d0 91 ef 01 	lds	r29, 0x01EF	; 0x8001ef <currentCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1949
                {
                    Alarm_prevmillis = millis();
    15c0:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    15c4:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <Alarm_prevmillis>
    15c8:	70 93 ec 01 	sts	0x01EC, r23	; 0x8001ec <Alarm_prevmillis+0x1>
    15cc:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <Alarm_prevmillis+0x2>
    15d0:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <Alarm_prevmillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1950
                    if (D_freq <= 511)
    15d4:	01 15       	cp	r16, r1
    15d6:	12 40       	sbci	r17, 0x02	; 2
    15d8:	08 f0       	brcs	.+2      	; 0x15dc <DoAlarm()+0x1c6>
    15da:	53 c0       	rjmp	.+166    	; 0x1682 <DoAlarm()+0x26c>
F:\Arduino\projects\HPiECU/HPiECU.ino:1952
                    {
                        D_freq = 912;
    15dc:	80 e9       	ldi	r24, 0x90	; 144
    15de:	93 e0       	ldi	r25, 0x03	; 3
    15e0:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <D_freq+0x1>
    15e4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <D_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:1959
                    {
                        D_freq = 511;
                        currentCounter++;
                    }
                }
                tone(Piezo_OutPin, D_freq);
    15e8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <D_freq>
    15ec:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <D_freq+0x1>
    15f0:	39 c0       	rjmp	.+114    	; 0x1664 <DoAlarm()+0x24e>
F:\Arduino\projects\HPiECU/HPiECU.ino:1922
            switch (Alarmstage)
            {
            case 1:
                //Serial.println("1A");
                //play_tone_in_case = false;
                if ((micros() - Alarm_prevmicros) >= mod_A_delay)
    15f2:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    15f6:	00 91 f0 01 	lds	r16, 0x01F0	; 0x8001f0 <Alarm_prevmicros>
    15fa:	10 91 f1 01 	lds	r17, 0x01F1	; 0x8001f1 <Alarm_prevmicros+0x1>
    15fe:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <Alarm_prevmicros+0x2>
    1602:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <Alarm_prevmicros+0x3>
    1606:	60 1b       	sub	r22, r16
    1608:	71 0b       	sbc	r23, r17
    160a:	82 0b       	sbc	r24, r18
    160c:	93 0b       	sbc	r25, r19
    160e:	6e 35       	cpi	r22, 0x5E	; 94
    1610:	71 40       	sbci	r23, 0x01	; 1
    1612:	81 05       	cpc	r24, r1
    1614:	91 05       	cpc	r25, r1
    1616:	10 f1       	brcs	.+68     	; 0x165c <DoAlarm()+0x246>
    1618:	00 91 6b 00 	lds	r16, 0x006B	; 0x80006b <A_freq>
    161c:	10 91 6c 00 	lds	r17, 0x006C	; 0x80006c <A_freq+0x1>
    1620:	d0 91 ef 01 	lds	r29, 0x01EF	; 0x8001ef <currentCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1924
                {
                    Alarm_prevmicros = micros();
    1624:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    1628:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <Alarm_prevmicros>
    162c:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <Alarm_prevmicros+0x1>
    1630:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Alarm_prevmicros+0x2>
    1634:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <Alarm_prevmicros+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1925
                    if (flag == true)
    1638:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
    163c:	88 23       	and	r24, r24
    163e:	a9 f0       	breq	.+42     	; 0x166a <DoAlarm()+0x254>
F:\Arduino\projects\HPiECU/HPiECU.ino:1927
                    {
                        A_freq++;
    1640:	0f 5f       	subi	r16, 0xFF	; 255
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	10 93 6c 00 	sts	0x006C, r17	; 0x80006c <A_freq+0x1>
    1648:	00 93 6b 00 	sts	0x006B, r16	; 0x80006b <A_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:1928
                        if (A_freq >= 768)
    164c:	01 15       	cp	r16, r1
    164e:	13 40       	sbci	r17, 0x03	; 3
    1650:	28 f0       	brcs	.+10     	; 0x165c <DoAlarm()+0x246>
F:\Arduino\projects\HPiECU/HPiECU.ino:1930
                        {
                            currentCounter++;
    1652:	df 5f       	subi	r29, 0xFF	; 255
    1654:	d0 93 ef 01 	sts	0x01EF, r29	; 0x8001ef <currentCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1931
                            flag = false;
    1658:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1941
                        if (A_freq <= 511)
                            flag = true;

                    }
                }
                tone(Piezo_OutPin, A_freq);
    165c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <A_freq>
    1660:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <A_freq+0x1>
F:\Arduino\projects\HPiECU/HPiECU.ino:2010
                        //mod3_wait++;
                        noTone(Piezo_OutPin);
                    } else
                    {
                        //freq--;
                        tone(Piezo_OutPin, C_freq);
    1664:	0e 94 57 01 	call	0x2ae	; 0x2ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]>
    1668:	f6 ce       	rjmp	.-532    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:1935
                            currentCounter++;
                            flag = false;
                        }
                    } else
                    {
                        A_freq--;
    166a:	01 50       	subi	r16, 0x01	; 1
    166c:	11 09       	sbc	r17, r1
    166e:	10 93 6c 00 	sts	0x006C, r17	; 0x80006c <A_freq+0x1>
    1672:	00 93 6b 00 	sts	0x006B, r16	; 0x80006b <A_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:1936
                        if (A_freq <= 511)
    1676:	01 15       	cp	r16, r1
    1678:	12 40       	sbci	r17, 0x02	; 2
    167a:	80 f7       	brcc	.-32     	; 0x165c <DoAlarm()+0x246>
F:\Arduino\projects\HPiECU/HPiECU.ino:1937
                            flag = true;
    167c:	c0 93 6d 00 	sts	0x006D, r28	; 0x80006d <flag>
    1680:	ed cf       	rjmp	.-38     	; 0x165c <DoAlarm()+0x246>
F:\Arduino\projects\HPiECU/HPiECU.ino:1955
                    if (D_freq <= 511)
                    {
                        D_freq = 912;
                    } else
                    {
                        D_freq = 511;
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <D_freq+0x1>
    168a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <D_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:1956
                        currentCounter++;
    168e:	df 5f       	subi	r29, 0xFF	; 255
    1690:	d0 93 ef 01 	sts	0x01EF, r29	; 0x8001ef <currentCounter>
    1694:	a9 cf       	rjmp	.-174    	; 0x15e8 <DoAlarm()+0x1d2>
F:\Arduino\projects\HPiECU/HPiECU.ino:1964
                tone(Piezo_OutPin, D_freq);
                break;
            case 2:
               // Serial.println("2B");
                //play_tone_in_case = true;
                if ((micros() - Alarm_prevmicros) >= mod_B_delay)
    1696:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    169a:	00 91 f0 01 	lds	r16, 0x01F0	; 0x8001f0 <Alarm_prevmicros>
    169e:	10 91 f1 01 	lds	r17, 0x01F1	; 0x8001f1 <Alarm_prevmicros+0x1>
    16a2:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <Alarm_prevmicros+0x2>
    16a6:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <Alarm_prevmicros+0x3>
    16aa:	60 1b       	sub	r22, r16
    16ac:	71 0b       	sbc	r23, r17
    16ae:	82 0b       	sbc	r24, r18
    16b0:	93 0b       	sbc	r25, r19
    16b2:	6e 35       	cpi	r22, 0x5E	; 94
    16b4:	71 40       	sbci	r23, 0x01	; 1
    16b6:	81 05       	cpc	r24, r1
    16b8:	91 05       	cpc	r25, r1
    16ba:	08 f4       	brcc	.+2      	; 0x16be <DoAlarm()+0x2a8>
    16bc:	cc ce       	rjmp	.-616    	; 0x1456 <DoAlarm()+0x40>
    16be:	f0 90 ef 01 	lds	r15, 0x01EF	; 0x8001ef <currentCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1966
                {
                    Alarm_prevmicros = micros();
    16c2:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    16c6:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <Alarm_prevmicros>
    16ca:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <Alarm_prevmicros+0x1>
    16ce:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Alarm_prevmicros+0x2>
    16d2:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <Alarm_prevmicros+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1967
                    if (flag == true)
    16d6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
    16da:	88 23       	and	r24, r24
    16dc:	f1 f0       	breq	.+60     	; 0x171a <DoAlarm()+0x304>
F:\Arduino\projects\HPiECU/HPiECU.ino:1969
                    {
                        mod3_wait++;
    16de:	00 91 e9 01 	lds	r16, 0x01E9	; 0x8001e9 <mod3_wait>
    16e2:	10 91 ea 01 	lds	r17, 0x01EA	; 0x8001ea <mod3_wait+0x1>
    16e6:	0f 5f       	subi	r16, 0xFF	; 255
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	10 93 ea 01 	sts	0x01EA, r17	; 0x8001ea <mod3_wait+0x1>
    16ee:	00 93 e9 01 	sts	0x01E9, r16	; 0x8001e9 <mod3_wait>
F:\Arduino\projects\HPiECU/HPiECU.ino:1970
                        noTone(Piezo_OutPin);
    16f2:	8c e1       	ldi	r24, 0x1C	; 28
    16f4:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1971
                        if (mod3_wait >= 100)
    16f8:	04 36       	cpi	r16, 0x64	; 100
    16fa:	11 05       	cpc	r17, r1
    16fc:	0c f4       	brge	.+2      	; 0x1700 <DoAlarm()+0x2ea>
    16fe:	ab ce       	rjmp	.-682    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:1974
                        {

                            B_freq = 912;
    1700:	80 e9       	ldi	r24, 0x90	; 144
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <B_freq+0x1>
    1708:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <B_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:1975
                            flag = false;
    170c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1976
                            mod3_wait = 0;
    1710:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <mod3_wait+0x1>
    1714:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <mod3_wait>
    1718:	9e ce       	rjmp	.-708    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:1980
                        }
                    } else
                    {
                        B_freq--;
    171a:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <B_freq>
    171e:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <B_freq+0x1>
    1722:	01 50       	subi	r16, 0x01	; 1
    1724:	11 09       	sbc	r17, r1
    1726:	10 93 68 00 	sts	0x0068, r17	; 0x800068 <B_freq+0x1>
    172a:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <B_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:1981
                        tone(Piezo_OutPin, B_freq);
    172e:	c8 01       	movw	r24, r16
    1730:	0e 94 57 01 	call	0x2ae	; 0x2ae <tone(unsigned char, unsigned int, unsigned long) [clone .constprop.24]>
F:\Arduino\projects\HPiECU/HPiECU.ino:1982
                        if (B_freq <= 511)
    1734:	01 15       	cp	r16, r1
    1736:	12 40       	sbci	r17, 0x02	; 2
    1738:	08 f0       	brcs	.+2      	; 0x173c <DoAlarm()+0x326>
    173a:	8d ce       	rjmp	.-742    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:1984
                        {
                            flag = true;
    173c:	d0 93 6d 00 	sts	0x006D, r29	; 0x80006d <flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1985
                            currentCounter++;
    1740:	f3 94       	inc	r15
    1742:	f0 92 ef 01 	sts	0x01EF, r15	; 0x8001ef <currentCounter>
    1746:	87 ce       	rjmp	.-754    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:1993
                }//micros
                break;
            case 3:
               // Serial.println("3C");
                //play_tone_in_case = true;
                if ((micros() - Alarm_prevmicros) >= mod_C_delay)
    1748:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    174c:	00 91 f0 01 	lds	r16, 0x01F0	; 0x8001f0 <Alarm_prevmicros>
    1750:	10 91 f1 01 	lds	r17, 0x01F1	; 0x8001f1 <Alarm_prevmicros+0x1>
    1754:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <Alarm_prevmicros+0x2>
    1758:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <Alarm_prevmicros+0x3>
    175c:	60 1b       	sub	r22, r16
    175e:	71 0b       	sbc	r23, r17
    1760:	82 0b       	sbc	r24, r18
    1762:	93 0b       	sbc	r25, r19
    1764:	68 3b       	cpi	r22, 0xB8	; 184
    1766:	7b 40       	sbci	r23, 0x0B	; 11
    1768:	81 05       	cpc	r24, r1
    176a:	91 05       	cpc	r25, r1
    176c:	08 f4       	brcc	.+2      	; 0x1770 <DoAlarm()+0x35a>
    176e:	73 ce       	rjmp	.-794    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:1995
                {
                    Alarm_prevmicros = micros();
    1770:	0e 94 47 03 	call	0x68e	; 0x68e <micros>
    1774:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <Alarm_prevmicros>
    1778:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <Alarm_prevmicros+0x1>
    177c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Alarm_prevmicros+0x2>
    1780:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <Alarm_prevmicros+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1996
                    mod3_wait++;
    1784:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <mod3_wait>
    1788:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <mod3_wait+0x1>
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <mod3_wait+0x1>
    1792:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <mod3_wait>
F:\Arduino\projects\HPiECU/HPiECU.ino:1997
                    if (mod3_wait >= 100)
    1796:	84 36       	cpi	r24, 0x64	; 100
    1798:	91 05       	cpc	r25, r1
    179a:	74 f0       	brlt	.+28     	; 0x17b8 <DoAlarm()+0x3a2>
    179c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1999
                    {
                        mod3_wait = 0;
    17a0:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <mod3_wait+0x1>
    17a4:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <mod3_wait>
F:\Arduino\projects\HPiECU/HPiECU.ino:2000
                        currentCounter++;
    17a8:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <currentCounter>
    17ac:	9f 5f       	subi	r25, 0xFF	; 255
    17ae:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <currentCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:2001
                        flag = !flag;
    17b2:	d8 27       	eor	r29, r24
    17b4:	d0 93 6d 00 	sts	0x006D, r29	; 0x80006d <flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:2003
                    }
                    if (flag == true)
    17b8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
    17bc:	88 23       	and	r24, r24
    17be:	21 f0       	breq	.+8      	; 0x17c8 <DoAlarm()+0x3b2>
F:\Arduino\projects\HPiECU/HPiECU.ino:2006
                    {
                        //mod3_wait++;
                        noTone(Piezo_OutPin);
    17c0:	8c e1       	ldi	r24, 0x1C	; 28
    17c2:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
    17c6:	47 ce       	rjmp	.-882    	; 0x1456 <DoAlarm()+0x40>
F:\Arduino\projects\HPiECU/HPiECU.ino:2010
                    } else
                    {
                        //freq--;
                        tone(Piezo_OutPin, C_freq);
    17c8:	8a ea       	ldi	r24, 0xAA	; 170
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	4b cf       	rjmp	.-362    	; 0x1664 <DoAlarm()+0x24e>
F:\Arduino\projects\HPiECU/HPiECU.ino:2032
                Alarmstage = 1;
            }

        } else//Silent Mode. Just Blinkers.
        {
            blinkerstate = true;//Enable Blinkers.
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:2033
            multiblink = true;//Enable Blinkers.
    17d4:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <multiblink>
    17d8:	55 ce       	rjmp	.-854    	; 0x1484 <DoAlarm()+0x6e>
F:\Arduino\projects\HPiECU/HPiECU.ino:2048
        }

    } else// Disable Alarm
    {
        Alarm = false;//Disable Alarm
        Alarm_Timer = 0;//reset The Timer.
    17da:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <Alarm_Timer>
    17de:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <Alarm_Timer+0x1>
    17e2:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <Alarm_Timer+0x2>
    17e6:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <Alarm_Timer+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:2049
        blinkerstate = false;//Disable Blinkers.
    17ea:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:2050
        multiblink = false;//Disable Blinkers.
    17ee:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
    17f2:	6c ce       	rjmp	.-808    	; 0x14cc <DoAlarm()+0xb6>
F:\Arduino\projects\HPiECU/HPiECU.ino:2074
                    //freq =768;
                    flag = false;
                }
            } else
            {
                Single_freq--;
    17f4:	21 97       	sbiw	r28, 0x01	; 1
    17f6:	d0 93 66 00 	sts	0x0066, r29	; 0x800066 <Single_freq+0x1>
    17fa:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <Single_freq>
F:\Arduino\projects\HPiECU/HPiECU.ino:2075
                noTone(Piezo_OutPin);
    17fe:	8c e1       	ldi	r24, 0x1C	; 28
    1800:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
F:\Arduino\projects\HPiECU/HPiECU.ino:2076
                if (Single_freq <= 611)
    1804:	c4 36       	cpi	r28, 0x64	; 100
    1806:	d2 40       	sbci	r29, 0x02	; 2
    1808:	08 f0       	brcs	.+2      	; 0x180c <DoAlarm()+0x3f6>
    180a:	a2 ce       	rjmp	.-700    	; 0x1550 <DoAlarm()+0x13a>
F:\Arduino\projects\HPiECU/HPiECU.ino:2077
                    flag = true;
    180c:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <flag>
    1810:	9f ce       	rjmp	.-706    	; 0x1550 <DoAlarm()+0x13a>
F:\Arduino\projects\HPiECU/HPiECU.ino:2093
            single_Alarm = false;
        }
        Blink();

    }///single
}//
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	08 95       	ret

00001824 <DoLock()>:
DoLock():
F:\Arduino\projects\HPiECU/HPiECU.ino:1885
/// <summary>
/// Lock ENGINE.  
/// </summary>
void DoLock()
{
    if (lockflag == true)
    1824:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <lockflag>
    1828:	88 23       	and	r24, r24
    182a:	c9 f0       	breq	.+50     	; 0x185e <DoLock()+0x3a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1888
    {
        //single Alarm
        single_Alarm = true;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <single_Alarm>
F:\Arduino\projects\HPiECU/HPiECU.ino:1889
        pinMode(ShakeSense_INpin, INPUT);//toggle Piezo to shake sensor
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	8b e0       	ldi	r24, 0x0B	; 11
    1836:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
attachInterrupt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    183a:	87 e4       	ldi	r24, 0x47	; 71
    183c:	9c e0       	ldi	r25, 0x0C	; 12
    183e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <intFunc+0x3>
    1842:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <intFunc+0x2>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:193
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
          GICR |= (1 << INT0);
          break;
        case 1:
          MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1846:	85 b7       	in	r24, 0x35	; 53
    1848:	83 7f       	andi	r24, 0xF3	; 243
    184a:	84 60       	ori	r24, 0x04	; 4
    184c:	85 bf       	out	0x35, r24	; 53
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:194
          GICR |= (1 << INT1);
    184e:	8b b7       	in	r24, 0x3b	; 59
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	8b bf       	out	0x3b, r24	; 59
DoLock():
F:\Arduino\projects\HPiECU/HPiECU.ino:1891
        attachInterrupt(digitalPinToInterrupt(ShakeSense_INpin), ListenForPiezo, CHANGE);//Attach Interrupt For Piezo sensor
        TemporaryDOSwitch(false);//close switch.
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0e 94 95 05 	call	0xb2a	; 0xb2a <TemporaryDOSwitch(bool)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1892
        DoAlarm();//play one time lock Alarm.
    185a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <DoAlarm()>
F:\Arduino\projects\HPiECU/HPiECU.ino:1894
    }
    if (PiezoDetected == true)
    185e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <PiezoDetected>
    1862:	88 23       	and	r24, r24
    1864:	89 f0       	breq	.+34     	; 0x1888 <DoLock()+0x64>
F:\Arduino\projects\HPiECU/HPiECU.ino:1897
    {
        //continous Alarm
        single_Alarm = false;
    1866:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <single_Alarm>
F:\Arduino\projects\HPiECU/HPiECU.ino:1898
        Alarm = true;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Alarm>
F:\Arduino\projects\HPiECU/HPiECU.ino:1899
        Alarm_Timer = millis();//Start the Alarm's Auto-Disable Timer
    1870:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1874:	60 93 e5 01 	sts	0x01E5, r22	; 0x8001e5 <Alarm_Timer>
    1878:	70 93 e6 01 	sts	0x01E6, r23	; 0x8001e6 <Alarm_Timer+0x1>
    187c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <Alarm_Timer+0x2>
    1880:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <Alarm_Timer+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1900
        DoAlarm();
    1884:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <DoAlarm()>
F:\Arduino\projects\HPiECU/HPiECU.ino:1903
    }

}
    1888:	08 95       	ret

0000188a <Print::print(char const*) [clone .constprop.48]>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:62
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
    188a:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>

0000188e <ListenForPiezo()>:
ListenForPiezo():
F:\Arduino\projects\HPiECU/HPiECU.ino:1431
/// ISR For Shake detecting Using Piezo Sensor. 
/// </summary>
void ListenForPiezo()
{
//Piezo was detected an shake.
    Serial.print(OutSerial_ShakeDetected_cmd);
    188e:	87 ea       	ldi	r24, 0xA7	; 167
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:1432
    PiezoDetected = true;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <PiezoDetected>
F:\Arduino\projects\HPiECU/HPiECU.ino:1433
    DoLock();
    189c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <DoLock()>

000018a0 <Horn()>:
Horn():
F:\Arduino\projects\HPiECU/HPiECU.ino:1207
//  it Has 4 Modes 
// modes will Change by  1 to 4 clicks Under 2seconds
/////////////////////////////////////////////

void Horn ()
{
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
F:\Arduino\projects\HPiECU/HPiECU.ino:1210
 
 // hornclicks = 3;
    if (digitalRead(HornINpin) == HIGH)
    18ae:	8a e0       	ldi	r24, 0x0A	; 10
    18b0:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	09 f0       	breq	.+2      	; 0x18ba <Horn()+0x1a>
    18b8:	1c c2       	rjmp	.+1080   	; 0x1cf2 <Horn()+0x452>
F:\Arduino\projects\HPiECU/HPiECU.ino:1213
  {
  //Serial.println("true");
        if (HornFlag == true)
    18ba:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <HornFlag>
    18be:	88 23       	and	r24, r24
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <Horn()+0x24>
    18c2:	ce c0       	rjmp	.+412    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1218
        {
            //Serial.println("horNing");
           // {
             // case 1:
            if ((hornclicks == 1) && (millis() - buttonPrevMillis) > 300)
    18c4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hornclicks>
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	11 f5       	brne	.+68     	; 0x1910 <Horn()+0x70>
    18cc:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    18d0:	c0 90 dc 01 	lds	r12, 0x01DC	; 0x8001dc <buttonPrevMillis>
    18d4:	d0 90 dd 01 	lds	r13, 0x01DD	; 0x8001dd <buttonPrevMillis+0x1>
    18d8:	e0 90 de 01 	lds	r14, 0x01DE	; 0x8001de <buttonPrevMillis+0x2>
    18dc:	f0 90 df 01 	lds	r15, 0x01DF	; 0x8001df <buttonPrevMillis+0x3>
    18e0:	6c 19       	sub	r22, r12
    18e2:	7d 09       	sbc	r23, r13
    18e4:	8e 09       	sbc	r24, r14
    18e6:	9f 09       	sbc	r25, r15
    18e8:	6d 32       	cpi	r22, 0x2D	; 45
    18ea:	71 40       	sbci	r23, 0x01	; 1
    18ec:	81 05       	cpc	r24, r1
    18ee:	91 05       	cpc	r25, r1
    18f0:	78 f0       	brcs	.+30     	; 0x1910 <Horn()+0x70>
F:\Arduino\projects\HPiECU/HPiECU.ino:1220
            {
                digitalWrite(RightHorn_OutPin, HIGH);
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	89 e1       	ldi	r24, 0x19	; 25
    18f6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1221
                digitalWrite(LeftHorn_OutPin, HIGH);
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	86 e0       	ldi	r24, 0x06	; 6
F:\Arduino\projects\HPiECU/HPiECU.ino:1393
  { 
 //   Serial.println("released");
   digitalWrite(LeftHorn_OutPin,LOW);
   digitalWrite(RightHorn_OutPin,LOW);
  }
} 
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
F:\Arduino\projects\HPiECU/HPiECU.ino:1391
        }
  }else
  { 
 //   Serial.println("released");
   digitalWrite(LeftHorn_OutPin,LOW);
   digitalWrite(RightHorn_OutPin,LOW);
    190c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1222
             // case 1:
            if ((hornclicks == 1) && (millis() - buttonPrevMillis) > 300)
            {
                digitalWrite(RightHorn_OutPin, HIGH);
                digitalWrite(LeftHorn_OutPin, HIGH);
            } else if ((hornclicks == 2) && (millis() - buttonPrevMillis) > 300)
    1910:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hornclicks>
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	09 f4       	brne	.+2      	; 0x191a <Horn()+0x7a>
    1918:	4b c0       	rjmp	.+150    	; 0x19b0 <Horn()+0x110>
F:\Arduino\projects\HPiECU/HPiECU.ino:1274
                            }
                        }
                    }
                }
                //hornclicks = 0;                                       
            } else if ((hornclicks == 3) && (millis() - buttonPrevMillis) > 300)
    191a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hornclicks>
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	09 f0       	breq	.+2      	; 0x1924 <Horn()+0x84>
    1922:	a6 c0       	rjmp	.+332    	; 0x1a70 <Horn()+0x1d0>
    1924:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1928:	c0 90 dc 01 	lds	r12, 0x01DC	; 0x8001dc <buttonPrevMillis>
    192c:	d0 90 dd 01 	lds	r13, 0x01DD	; 0x8001dd <buttonPrevMillis+0x1>
    1930:	e0 90 de 01 	lds	r14, 0x01DE	; 0x8001de <buttonPrevMillis+0x2>
    1934:	f0 90 df 01 	lds	r15, 0x01DF	; 0x8001df <buttonPrevMillis+0x3>
    1938:	6c 19       	sub	r22, r12
    193a:	7d 09       	sbc	r23, r13
    193c:	8e 09       	sbc	r24, r14
    193e:	9f 09       	sbc	r25, r15
    1940:	6d 32       	cpi	r22, 0x2D	; 45
    1942:	71 40       	sbci	r23, 0x01	; 1
    1944:	81 05       	cpc	r24, r1
    1946:	91 05       	cpc	r25, r1
    1948:	08 f4       	brcc	.+2      	; 0x194c <Horn()+0xac>
    194a:	92 c0       	rjmp	.+292    	; 0x1a70 <Horn()+0x1d0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1277
            {

                  Serial.print("\n case3 \n");
    194c:	85 eb       	ldi	r24, 0xB5	; 181
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:1279
                 ////mod2
                if ((millis() - Horn_delayMillis) > 100)
    1954:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1958:	c0 90 d3 01 	lds	r12, 0x01D3	; 0x8001d3 <Horn_delayMillis>
    195c:	d0 90 d4 01 	lds	r13, 0x01D4	; 0x8001d4 <Horn_delayMillis+0x1>
    1960:	e0 90 d5 01 	lds	r14, 0x01D5	; 0x8001d5 <Horn_delayMillis+0x2>
    1964:	f0 90 d6 01 	lds	r15, 0x01D6	; 0x8001d6 <Horn_delayMillis+0x3>
    1968:	6c 19       	sub	r22, r12
    196a:	7d 09       	sbc	r23, r13
    196c:	8e 09       	sbc	r24, r14
    196e:	9f 09       	sbc	r25, r15
    1970:	65 36       	cpi	r22, 0x65	; 101
    1972:	71 05       	cpc	r23, r1
    1974:	81 05       	cpc	r24, r1
    1976:	91 05       	cpc	r25, r1
    1978:	08 f4       	brcc	.+2      	; 0x197c <Horn()+0xdc>
    197a:	72 c0       	rjmp	.+228    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1281
                {
                    Horn_delayMillis = millis();
    197c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1980:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <Horn_delayMillis>
    1984:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <Horn_delayMillis+0x1>
    1988:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Horn_delayMillis+0x2>
    198c:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <Horn_delayMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1282
                    if (hornModeTwoState == HIGH)
    1990:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <hornModeTwoState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1284
                    {
                        digitalWrite(LeftHorn_OutPin, LOW);
    1994:	60 e0       	ldi	r22, 0x00	; 0
F:\Arduino\projects\HPiECU/HPiECU.ino:1282
                  Serial.print("\n case3 \n");
                 ////mod2
                if ((millis() - Horn_delayMillis) > 100)
                {
                    Horn_delayMillis = millis();
                    if (hornModeTwoState == HIGH)
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <Horn()+0xfc>
    199a:	71 c1       	rjmp	.+738    	; 0x1c7e <Horn()+0x3de>
F:\Arduino\projects\HPiECU/HPiECU.ino:1284
                    {
                        digitalWrite(LeftHorn_OutPin, LOW);
    199c:	86 e0       	ldi	r24, 0x06	; 6
    199e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1285
                        digitalWrite(RightHorn_OutPin, HIGH);
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	89 e1       	ldi	r24, 0x19	; 25
    19a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1286
                        hornModeTwoState = false;
    19aa:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <hornModeTwoState>
    19ae:	58 c0       	rjmp	.+176    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1222
             // case 1:
            if ((hornclicks == 1) && (millis() - buttonPrevMillis) > 300)
            {
                digitalWrite(RightHorn_OutPin, HIGH);
                digitalWrite(LeftHorn_OutPin, HIGH);
            } else if ((hornclicks == 2) && (millis() - buttonPrevMillis) > 300)
    19b0:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    19b4:	c0 90 dc 01 	lds	r12, 0x01DC	; 0x8001dc <buttonPrevMillis>
    19b8:	d0 90 dd 01 	lds	r13, 0x01DD	; 0x8001dd <buttonPrevMillis+0x1>
    19bc:	e0 90 de 01 	lds	r14, 0x01DE	; 0x8001de <buttonPrevMillis+0x2>
    19c0:	f0 90 df 01 	lds	r15, 0x01DF	; 0x8001df <buttonPrevMillis+0x3>
    19c4:	6c 19       	sub	r22, r12
    19c6:	7d 09       	sbc	r23, r13
    19c8:	8e 09       	sbc	r24, r14
    19ca:	9f 09       	sbc	r25, r15
    19cc:	6d 32       	cpi	r22, 0x2D	; 45
    19ce:	71 40       	sbci	r23, 0x01	; 1
    19d0:	81 05       	cpc	r24, r1
    19d2:	91 05       	cpc	r25, r1
    19d4:	08 f4       	brcc	.+2      	; 0x19d8 <Horn()+0x138>
    19d6:	a1 cf       	rjmp	.-190    	; 0x191a <Horn()+0x7a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1225
            {
      
                Serial.print("\n case2 \n");
    19d8:	8b ea       	ldi	r24, 0xAB	; 171
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:1226
                if (hornCountA <= 5 && horn1Aflag == true)
    19e0:	c0 91 d7 01 	lds	r28, 0x01D7	; 0x8001d7 <hornCountA>
    19e4:	c6 30       	cpi	r28, 0x06	; 6
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <Horn()+0x14a>
    19e8:	ff c0       	rjmp	.+510    	; 0x1be8 <Horn()+0x348>
    19ea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <horn1Aflag>
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <Horn()+0x154>
    19f2:	fa c0       	rjmp	.+500    	; 0x1be8 <Horn()+0x348>
F:\Arduino\projects\HPiECU/HPiECU.ino:1228
                {
                    if ((millis() - Horn_delayMillis) >= 50)
    19f4:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    19f8:	c0 90 d3 01 	lds	r12, 0x01D3	; 0x8001d3 <Horn_delayMillis>
    19fc:	d0 90 d4 01 	lds	r13, 0x01D4	; 0x8001d4 <Horn_delayMillis+0x1>
    1a00:	e0 90 d5 01 	lds	r14, 0x01D5	; 0x8001d5 <Horn_delayMillis+0x2>
    1a04:	f0 90 d6 01 	lds	r15, 0x01D6	; 0x8001d6 <Horn_delayMillis+0x3>
    1a08:	6c 19       	sub	r22, r12
    1a0a:	7d 09       	sbc	r23, r13
    1a0c:	8e 09       	sbc	r24, r14
    1a0e:	9f 09       	sbc	r25, r15
    1a10:	62 33       	cpi	r22, 0x32	; 50
    1a12:	71 05       	cpc	r23, r1
    1a14:	81 05       	cpc	r24, r1
    1a16:	91 05       	cpc	r25, r1
    1a18:	18 f1       	brcs	.+70     	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1230
                    {
                        digitalWrite(RightHorn_OutPin, LOW);
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	89 e1       	ldi	r24, 0x19	; 25
    1a1e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1231
                        Horn_delayMillis = millis();
    1a22:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1a26:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <Horn_delayMillis>
    1a2a:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <Horn_delayMillis+0x1>
    1a2e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Horn_delayMillis+0x2>
    1a32:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <Horn_delayMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1232
                        hornStateA = !hornStateA;
    1a36:	d0 91 d2 01 	lds	r29, 0x01D2	; 0x8001d2 <hornStateA>
    1a3a:	11 e0       	ldi	r17, 0x01	; 1
    1a3c:	d1 27       	eor	r29, r17
    1a3e:	d0 93 d2 01 	sts	0x01D2, r29	; 0x8001d2 <hornStateA>
F:\Arduino\projects\HPiECU/HPiECU.ino:1233
                        digitalWrite(LeftHorn_OutPin, hornStateA);
    1a42:	6d 2f       	mov	r22, r29
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1234
                        if (hornStateA == HIGH)
    1a4a:	dd 23       	and	r29, r29
    1a4c:	49 f0       	breq	.+18     	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1237
                        {
                            //  Serial.print("\n 1A \n");
                            hornCountA++;
    1a4e:	cf 5f       	subi	r28, 0xFF	; 255
    1a50:	c0 93 d7 01 	sts	0x01D7, r28	; 0x8001d7 <hornCountA>
F:\Arduino\projects\HPiECU/HPiECU.ino:1238
                            if (hornCountA >= 5)
    1a54:	c5 30       	cpi	r28, 0x05	; 5
    1a56:	20 f0       	brcs	.+8      	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1241
                            {

                                horn1Aflag = false;
    1a58:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <horn1Aflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1242
                                horn1Bflag = true;
    1a5c:	10 93 d1 01 	sts	0x01D1, r17	; 0x8001d1 <horn1Bflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1393
  { 
 //   Serial.println("released");
   digitalWrite(LeftHorn_OutPin,LOW);
   digitalWrite(RightHorn_OutPin,LOW);
  }
} 
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	08 95       	ret
F:\Arduino\projects\HPiECU/HPiECU.ino:1295
                        digitalWrite(LeftHorn_OutPin, HIGH);
                        hornModeTwoState = true;
                    }
                }
                //hornclicks = 0;
            } else if ((hornclicks == 4) && (millis() - buttonPrevMillis) > 300)
    1a70:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hornclicks>
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	a1 f7       	brne	.-24     	; 0x1a60 <Horn()+0x1c0>
    1a78:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1a7c:	c0 90 dc 01 	lds	r12, 0x01DC	; 0x8001dc <buttonPrevMillis>
    1a80:	d0 90 dd 01 	lds	r13, 0x01DD	; 0x8001dd <buttonPrevMillis+0x1>
    1a84:	e0 90 de 01 	lds	r14, 0x01DE	; 0x8001de <buttonPrevMillis+0x2>
    1a88:	f0 90 df 01 	lds	r15, 0x01DF	; 0x8001df <buttonPrevMillis+0x3>
    1a8c:	6c 19       	sub	r22, r12
    1a8e:	7d 09       	sbc	r23, r13
    1a90:	8e 09       	sbc	r24, r14
    1a92:	9f 09       	sbc	r25, r15
    1a94:	6d 32       	cpi	r22, 0x2D	; 45
    1a96:	71 40       	sbci	r23, 0x01	; 1
    1a98:	81 05       	cpc	r24, r1
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	08 f3       	brcs	.-62     	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1297
            {
                  Serial.print("\n case4 \n");
    1a9e:	8f eb       	ldi	r24, 0xBF	; 191
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:1299
                 //Mode 3 Wedding Mode ^_^
                if ((millis() - Horn_delayMillis) >= 100 && hornModThreeState == false && hornModeCStage == 1)
    1aa6:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1aaa:	c0 90 d3 01 	lds	r12, 0x01D3	; 0x8001d3 <Horn_delayMillis>
    1aae:	d0 90 d4 01 	lds	r13, 0x01D4	; 0x8001d4 <Horn_delayMillis+0x1>
    1ab2:	e0 90 d5 01 	lds	r14, 0x01D5	; 0x8001d5 <Horn_delayMillis+0x2>
    1ab6:	f0 90 d6 01 	lds	r15, 0x01D6	; 0x8001d6 <Horn_delayMillis+0x3>
    1aba:	6c 19       	sub	r22, r12
    1abc:	7d 09       	sbc	r23, r13
    1abe:	8e 09       	sbc	r24, r14
    1ac0:	9f 09       	sbc	r25, r15
    1ac2:	64 36       	cpi	r22, 0x64	; 100
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	81 05       	cpc	r24, r1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	48 f0       	brcs	.+18     	; 0x1ade <Horn()+0x23e>
    1acc:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1ad0:	81 11       	cpse	r24, r1
    1ad2:	05 c0       	rjmp	.+10     	; 0x1ade <Horn()+0x23e>
    1ad4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <Horn()+0x23e>
    1adc:	db c0       	rjmp	.+438    	; 0x1c94 <Horn()+0x3f4>
F:\Arduino\projects\HPiECU/HPiECU.ino:1307
                    hornModeCStage = 2;
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 50 && hornModThreeState == true && hornModeCStage == 2)
    1ade:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1ae2:	6c 19       	sub	r22, r12
    1ae4:	7d 09       	sbc	r23, r13
    1ae6:	8e 09       	sbc	r24, r14
    1ae8:	9f 09       	sbc	r25, r15
    1aea:	62 33       	cpi	r22, 0x32	; 50
    1aec:	71 05       	cpc	r23, r1
    1aee:	81 05       	cpc	r24, r1
    1af0:	91 05       	cpc	r25, r1
    1af2:	08 f0       	brcs	.+2      	; 0x1af6 <Horn()+0x256>
    1af4:	e5 c0       	rjmp	.+458    	; 0x1cc0 <Horn()+0x420>
F:\Arduino\projects\HPiECU/HPiECU.ino:1315
                    hornModeCStage = 3;
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 100 && hornModThreeState == false && hornModeCStage == 3)
    1af6:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1afa:	6c 19       	sub	r22, r12
    1afc:	7d 09       	sbc	r23, r13
    1afe:	8e 09       	sbc	r24, r14
    1b00:	9f 09       	sbc	r25, r15
    1b02:	64 36       	cpi	r22, 0x64	; 100
    1b04:	71 05       	cpc	r23, r1
    1b06:	81 05       	cpc	r24, r1
    1b08:	91 05       	cpc	r25, r1
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <Horn()+0x26e>
    1b0c:	f8 c0       	rjmp	.+496    	; 0x1cfe <Horn()+0x45e>
F:\Arduino\projects\HPiECU/HPiECU.ino:1323
                    hornModeCStage = 4;
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 50 && hornModThreeState == true && hornModeCStage == 4)
    1b0e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1b12:	6c 19       	sub	r22, r12
    1b14:	7d 09       	sbc	r23, r13
    1b16:	8e 09       	sbc	r24, r14
    1b18:	9f 09       	sbc	r25, r15
    1b1a:	62 33       	cpi	r22, 0x32	; 50
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	81 05       	cpc	r24, r1
    1b20:	91 05       	cpc	r25, r1
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <Horn()+0x286>
    1b24:	fa c0       	rjmp	.+500    	; 0x1d1a <Horn()+0x47a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1331
                    hornModeCStage = 5;
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 200 && hornModThreeState == false && hornModeCStage == 5)
    1b26:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1b2a:	6c 19       	sub	r22, r12
    1b2c:	7d 09       	sbc	r23, r13
    1b2e:	8e 09       	sbc	r24, r14
    1b30:	9f 09       	sbc	r25, r15
    1b32:	68 3c       	cpi	r22, 0xC8	; 200
    1b34:	71 05       	cpc	r23, r1
    1b36:	81 05       	cpc	r24, r1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <Horn()+0x29e>
    1b3c:	fa c0       	rjmp	.+500    	; 0x1d32 <Horn()+0x492>
F:\Arduino\projects\HPiECU/HPiECU.ino:1339
                    hornModeCStage = 6;
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 200 && hornModThreeState == true && hornModeCStage == 6)
    1b3e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1b42:	6c 19       	sub	r22, r12
    1b44:	7d 09       	sbc	r23, r13
    1b46:	8e 09       	sbc	r24, r14
    1b48:	9f 09       	sbc	r25, r15
    1b4a:	68 3c       	cpi	r22, 0xC8	; 200
    1b4c:	71 05       	cpc	r23, r1
    1b4e:	81 05       	cpc	r24, r1
    1b50:	91 05       	cpc	r25, r1
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <Horn()+0x2b6>
    1b54:	f9 c0       	rjmp	.+498    	; 0x1d48 <Horn()+0x4a8>
F:\Arduino\projects\HPiECU/HPiECU.ino:1347
                    hornModeCStage = 7;
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == false && hornModeCStage == 7)
    1b56:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1b5a:	6c 19       	sub	r22, r12
    1b5c:	7d 09       	sbc	r23, r13
    1b5e:	8e 09       	sbc	r24, r14
    1b60:	9f 09       	sbc	r25, r15
    1b62:	6a 3f       	cpi	r22, 0xFA	; 250
    1b64:	71 05       	cpc	r23, r1
    1b66:	81 05       	cpc	r24, r1
    1b68:	91 05       	cpc	r25, r1
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <Horn()+0x2ce>
    1b6c:	f9 c0       	rjmp	.+498    	; 0x1d60 <Horn()+0x4c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1355
                    hornModeCStage = 8;
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == true && hornModeCStage == 8)
    1b6e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1b72:	6c 19       	sub	r22, r12
    1b74:	7d 09       	sbc	r23, r13
    1b76:	8e 09       	sbc	r24, r14
    1b78:	9f 09       	sbc	r25, r15
    1b7a:	6a 3f       	cpi	r22, 0xFA	; 250
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	81 05       	cpc	r24, r1
    1b80:	91 05       	cpc	r25, r1
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <Horn()+0x2e6>
    1b84:	f8 c0       	rjmp	.+496    	; 0x1d76 <Horn()+0x4d6>
F:\Arduino\projects\HPiECU/HPiECU.ino:1363
                    hornModeCStage = 9;
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == false && hornModeCStage == 9)
    1b86:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1b8a:	6c 19       	sub	r22, r12
    1b8c:	7d 09       	sbc	r23, r13
    1b8e:	8e 09       	sbc	r24, r14
    1b90:	9f 09       	sbc	r25, r15
    1b92:	6a 3f       	cpi	r22, 0xFA	; 250
    1b94:	71 05       	cpc	r23, r1
    1b96:	81 05       	cpc	r24, r1
    1b98:	91 05       	cpc	r25, r1
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <Horn()+0x2fe>
    1b9c:	f8 c0       	rjmp	.+496    	; 0x1d8e <Horn()+0x4ee>
F:\Arduino\projects\HPiECU/HPiECU.ino:1371
                    hornModeCStage = 10;
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == true && hornModeCStage == 10)
    1b9e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1ba2:	6c 19       	sub	r22, r12
    1ba4:	7d 09       	sbc	r23, r13
    1ba6:	8e 09       	sbc	r24, r14
    1ba8:	9f 09       	sbc	r25, r15
    1baa:	6a 3f       	cpi	r22, 0xFA	; 250
    1bac:	71 05       	cpc	r23, r1
    1bae:	81 05       	cpc	r24, r1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	08 f0       	brcs	.+2      	; 0x1bb6 <Horn()+0x316>
    1bb4:	f7 c0       	rjmp	.+494    	; 0x1da4 <Horn()+0x504>
F:\Arduino\projects\HPiECU/HPiECU.ino:1379
                    hornModeCStage = 11;
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == false && hornModeCStage == 11)
    1bb6:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1bba:	6c 19       	sub	r22, r12
    1bbc:	7d 09       	sbc	r23, r13
    1bbe:	8e 09       	sbc	r24, r14
    1bc0:	9f 09       	sbc	r25, r15
    1bc2:	6a 3f       	cpi	r22, 0xFA	; 250
    1bc4:	71 05       	cpc	r23, r1
    1bc6:	81 05       	cpc	r24, r1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <Horn()+0x32e>
    1bcc:	49 cf       	rjmp	.-366    	; 0x1a60 <Horn()+0x1c0>
    1bce:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	45 cf       	rjmp	.-374    	; 0x1a60 <Horn()+0x1c0>
    1bd6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1bda:	8b 30       	cpi	r24, 0x0B	; 11
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <Horn()+0x340>
    1bde:	40 cf       	rjmp	.-384    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1382
                {
                    //  Serial.println("stage 11");
                    hornModeCStage = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <hornModeCStage>
    1be6:	3c cf       	rjmp	.-392    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1249

                        }
                    }
                } else
                {
                    if (hornCountB <= 5 && horn1Bflag == true)
    1be8:	d0 91 d0 01 	lds	r29, 0x01D0	; 0x8001d0 <hornCountB>
    1bec:	d6 30       	cpi	r29, 0x06	; 6
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <Horn()+0x352>
    1bf0:	37 cf       	rjmp	.-402    	; 0x1a60 <Horn()+0x1c0>
    1bf2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <horn1Bflag>
    1bf6:	88 23       	and	r24, r24
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <Horn()+0x35c>
    1bfa:	32 cf       	rjmp	.-412    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1251
                    {
                        if ((millis() - Horn_delayMillis) >= 50)
    1bfc:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1c00:	c0 90 d3 01 	lds	r12, 0x01D3	; 0x8001d3 <Horn_delayMillis>
    1c04:	d0 90 d4 01 	lds	r13, 0x01D4	; 0x8001d4 <Horn_delayMillis+0x1>
    1c08:	e0 90 d5 01 	lds	r14, 0x01D5	; 0x8001d5 <Horn_delayMillis+0x2>
    1c0c:	f0 90 d6 01 	lds	r15, 0x01D6	; 0x8001d6 <Horn_delayMillis+0x3>
    1c10:	6c 19       	sub	r22, r12
    1c12:	7d 09       	sbc	r23, r13
    1c14:	8e 09       	sbc	r24, r14
    1c16:	9f 09       	sbc	r25, r15
    1c18:	62 33       	cpi	r22, 0x32	; 50
    1c1a:	71 05       	cpc	r23, r1
    1c1c:	81 05       	cpc	r24, r1
    1c1e:	91 05       	cpc	r25, r1
    1c20:	08 f4       	brcc	.+2      	; 0x1c24 <Horn()+0x384>
    1c22:	1e cf       	rjmp	.-452    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1253
                        {
                            digitalWrite(LeftHorn_OutPin, LOW);
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	86 e0       	ldi	r24, 0x06	; 6
    1c28:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1254
                            Horn_delayMillis = millis();
    1c2c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1c30:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <Horn_delayMillis>
    1c34:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <Horn_delayMillis+0x1>
    1c38:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Horn_delayMillis+0x2>
    1c3c:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <Horn_delayMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1255
                            hornStateB = !hornStateB;
    1c40:	f0 90 cf 01 	lds	r15, 0x01CF	; 0x8001cf <hornStateB>
    1c44:	11 e0       	ldi	r17, 0x01	; 1
    1c46:	f1 26       	eor	r15, r17
    1c48:	f0 92 cf 01 	sts	0x01CF, r15	; 0x8001cf <hornStateB>
F:\Arduino\projects\HPiECU/HPiECU.ino:1256
                            digitalWrite(RightHorn_OutPin, hornStateB);
    1c4c:	6f 2d       	mov	r22, r15
    1c4e:	89 e1       	ldi	r24, 0x19	; 25
    1c50:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1257
                            if (hornStateB == HIGH)
    1c54:	ff 20       	and	r15, r15
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <Horn()+0x3ba>
    1c58:	03 cf       	rjmp	.-506    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1260
                            {
                                //  Serial.print("\n 1B \n");
                                hornCountB++;
    1c5a:	df 5f       	subi	r29, 0xFF	; 255
    1c5c:	d0 93 d0 01 	sts	0x01D0, r29	; 0x8001d0 <hornCountB>
F:\Arduino\projects\HPiECU/HPiECU.ino:1261
                                if (hornCountA >= 5 && hornCountB >= 5)
    1c60:	c5 30       	cpi	r28, 0x05	; 5
    1c62:	08 f4       	brcc	.+2      	; 0x1c66 <Horn()+0x3c6>
    1c64:	fd ce       	rjmp	.-518    	; 0x1a60 <Horn()+0x1c0>
    1c66:	d5 30       	cpi	r29, 0x05	; 5
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <Horn()+0x3cc>
    1c6a:	fa ce       	rjmp	.-524    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1263
                                {
                                    hornCountA = 0;
    1c6c:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <hornCountA>
F:\Arduino\projects\HPiECU/HPiECU.ino:1264
                                    hornCountB = 0;
    1c70:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <hornCountB>
F:\Arduino\projects\HPiECU/HPiECU.ino:1265
                                    horn1Aflag = true;
    1c74:	10 93 64 00 	sts	0x0064, r17	; 0x800064 <horn1Aflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1266
                                    horn1Bflag = false;
    1c78:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <horn1Bflag>
    1c7c:	f1 ce       	rjmp	.-542    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1289
                        digitalWrite(LeftHorn_OutPin, LOW);
                        digitalWrite(RightHorn_OutPin, HIGH);
                        hornModeTwoState = false;
                    } else
                    {
                        digitalWrite(RightHorn_OutPin, LOW);
    1c7e:	89 e1       	ldi	r24, 0x19	; 25
    1c80:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1290
                        digitalWrite(LeftHorn_OutPin, HIGH);
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	86 e0       	ldi	r24, 0x06	; 6
    1c88:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1291
                        hornModeTwoState = true;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <hornModeTwoState>
    1c92:	e6 ce       	rjmp	.-564    	; 0x1a60 <Horn()+0x1c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1302
                  Serial.print("\n case4 \n");
                 //Mode 3 Wedding Mode ^_^
                if ((millis() - Horn_delayMillis) >= 100 && hornModThreeState == false && hornModeCStage == 1)
                {
                    // Serial.println("stage 1");
                    hornModeCStage = 2;
    1c94:	92 e0       	ldi	r25, 0x02	; 2
    1c96:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <hornModeCStage>
F:\Arduino\projects\HPiECU/HPiECU.ino:1367
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == false && hornModeCStage == 9)
                {
                    //  Serial.println("stage 9");
                    hornModeCStage = 10;
                    hornModThreeState = true;
    1c9a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <hornModThreeState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1368
                    Horn_delayMillis = millis();
    1c9e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1ca2:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <Horn_delayMillis>
    1ca6:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <Horn_delayMillis+0x1>
    1caa:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Horn_delayMillis+0x2>
    1cae:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <Horn_delayMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1369
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	86 e0       	ldi	r24, 0x06	; 6
    1cb6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1370
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
    1cba:	61 e0       	ldi	r22, 0x01	; 1
F:\Arduino\projects\HPiECU/HPiECU.ino:1391
        }
  }else
  { 
 //   Serial.println("released");
   digitalWrite(LeftHorn_OutPin,LOW);
   digitalWrite(RightHorn_OutPin,LOW);
    1cbc:	89 e1       	ldi	r24, 0x19	; 25
    1cbe:	1f ce       	rjmp	.-962    	; 0x18fe <Horn()+0x5e>
F:\Arduino\projects\HPiECU/HPiECU.ino:1307
                    hornModeCStage = 2;
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 50 && hornModThreeState == true && hornModeCStage == 2)
    1cc0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1cc4:	88 23       	and	r24, r24
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <Horn()+0x42a>
    1cc8:	16 cf       	rjmp	.-468    	; 0x1af6 <Horn()+0x256>
    1cca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <Horn()+0x434>
    1cd2:	11 cf       	rjmp	.-478    	; 0x1af6 <Horn()+0x256>
F:\Arduino\projects\HPiECU/HPiECU.ino:1310
                {
                    // Serial.println("stage 2");
                    hornModeCStage = 3;
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
F:\Arduino\projects\HPiECU/HPiECU.ino:1374
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == true && hornModeCStage == 10)
                {
                    // Serial.println("stage 10");
                    hornModeCStage = 11;
    1cd6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <hornModeCStage>
F:\Arduino\projects\HPiECU/HPiECU.ino:1375
                    hornModThreeState = false;
    1cda:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <hornModThreeState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1376
                    Horn_delayMillis = millis();
    1cde:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1ce2:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <Horn_delayMillis>
    1ce6:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <Horn_delayMillis+0x1>
    1cea:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Horn_delayMillis+0x2>
    1cee:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <Horn_delayMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1390
            }
        }
  }else
  { 
 //   Serial.println("released");
   digitalWrite(LeftHorn_OutPin,LOW);
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	86 e0       	ldi	r24, 0x06	; 6
    1cf6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1391
   digitalWrite(RightHorn_OutPin,LOW);
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	df cf       	rjmp	.-66     	; 0x1cbc <Horn()+0x41c>
F:\Arduino\projects\HPiECU/HPiECU.ino:1315
                    hornModeCStage = 3;
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 100 && hornModThreeState == false && hornModeCStage == 3)
    1cfe:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1d02:	81 11       	cpse	r24, r1
    1d04:	04 cf       	rjmp	.-504    	; 0x1b0e <Horn()+0x26e>
    1d06:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1d0a:	83 30       	cpi	r24, 0x03	; 3
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <Horn()+0x470>
    1d0e:	ff ce       	rjmp	.-514    	; 0x1b0e <Horn()+0x26e>
F:\Arduino\projects\HPiECU/HPiECU.ino:1318
                {
                    //  Serial.println("stage 3");
                    hornModeCStage = 4;
    1d10:	84 e0       	ldi	r24, 0x04	; 4
F:\Arduino\projects\HPiECU/HPiECU.ino:1366
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == false && hornModeCStage == 9)
                {
                    //  Serial.println("stage 9");
                    hornModeCStage = 10;
    1d12:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <hornModeCStage>
F:\Arduino\projects\HPiECU/HPiECU.ino:1367
                    hornModThreeState = true;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	c0 cf       	rjmp	.-128    	; 0x1c9a <Horn()+0x3fa>
F:\Arduino\projects\HPiECU/HPiECU.ino:1323
                    hornModeCStage = 4;
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 50 && hornModThreeState == true && hornModeCStage == 4)
    1d1a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1d1e:	88 23       	and	r24, r24
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <Horn()+0x484>
    1d22:	01 cf       	rjmp	.-510    	; 0x1b26 <Horn()+0x286>
    1d24:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <Horn()+0x48e>
    1d2c:	fc ce       	rjmp	.-520    	; 0x1b26 <Horn()+0x286>
F:\Arduino\projects\HPiECU/HPiECU.ino:1326
                {
                    //  Serial.println("stage 4");
                    hornModeCStage = 5;
    1d2e:	85 e0       	ldi	r24, 0x05	; 5
    1d30:	d2 cf       	rjmp	.-92     	; 0x1cd6 <Horn()+0x436>
F:\Arduino\projects\HPiECU/HPiECU.ino:1331
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 200 && hornModThreeState == false && hornModeCStage == 5)
    1d32:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1d36:	81 11       	cpse	r24, r1
    1d38:	02 cf       	rjmp	.-508    	; 0x1b3e <Horn()+0x29e>
    1d3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1d3e:	85 30       	cpi	r24, 0x05	; 5
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <Horn()+0x4a4>
    1d42:	fd ce       	rjmp	.-518    	; 0x1b3e <Horn()+0x29e>
F:\Arduino\projects\HPiECU/HPiECU.ino:1334
                {
                    //  Serial.println("stage 5");
                    hornModeCStage = 6;
    1d44:	86 e0       	ldi	r24, 0x06	; 6
    1d46:	e5 cf       	rjmp	.-54     	; 0x1d12 <Horn()+0x472>
F:\Arduino\projects\HPiECU/HPiECU.ino:1339
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 200 && hornModThreeState == true && hornModeCStage == 6)
    1d48:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <Horn()+0x4b2>
    1d50:	02 cf       	rjmp	.-508    	; 0x1b56 <Horn()+0x2b6>
    1d52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1d56:	86 30       	cpi	r24, 0x06	; 6
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <Horn()+0x4bc>
    1d5a:	fd ce       	rjmp	.-518    	; 0x1b56 <Horn()+0x2b6>
F:\Arduino\projects\HPiECU/HPiECU.ino:1342
                {
                    //  Serial.println("stage 6");
                    hornModeCStage = 7;
    1d5c:	87 e0       	ldi	r24, 0x07	; 7
    1d5e:	bb cf       	rjmp	.-138    	; 0x1cd6 <Horn()+0x436>
F:\Arduino\projects\HPiECU/HPiECU.ino:1347
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == false && hornModeCStage == 7)
    1d60:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1d64:	81 11       	cpse	r24, r1
    1d66:	03 cf       	rjmp	.-506    	; 0x1b6e <Horn()+0x2ce>
    1d68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1d6c:	87 30       	cpi	r24, 0x07	; 7
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <Horn()+0x4d2>
    1d70:	fe ce       	rjmp	.-516    	; 0x1b6e <Horn()+0x2ce>
F:\Arduino\projects\HPiECU/HPiECU.ino:1350
                {
                    // Serial.println("stage 7");
                    hornModeCStage = 8;
    1d72:	88 e0       	ldi	r24, 0x08	; 8
    1d74:	ce cf       	rjmp	.-100    	; 0x1d12 <Horn()+0x472>
F:\Arduino\projects\HPiECU/HPiECU.ino:1355
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == true && hornModeCStage == 8)
    1d76:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1d7a:	88 23       	and	r24, r24
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <Horn()+0x4e0>
    1d7e:	03 cf       	rjmp	.-506    	; 0x1b86 <Horn()+0x2e6>
    1d80:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1d84:	88 30       	cpi	r24, 0x08	; 8
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <Horn()+0x4ea>
    1d88:	fe ce       	rjmp	.-516    	; 0x1b86 <Horn()+0x2e6>
F:\Arduino\projects\HPiECU/HPiECU.ino:1358
                {
                    // Serial.println("stage 8");
                    hornModeCStage = 9;
    1d8a:	89 e0       	ldi	r24, 0x09	; 9
    1d8c:	a4 cf       	rjmp	.-184    	; 0x1cd6 <Horn()+0x436>
F:\Arduino\projects\HPiECU/HPiECU.ino:1363
                    hornModThreeState = false;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == false && hornModeCStage == 9)
    1d8e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1d92:	81 11       	cpse	r24, r1
    1d94:	04 cf       	rjmp	.-504    	; 0x1b9e <Horn()+0x2fe>
    1d96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1d9a:	89 30       	cpi	r24, 0x09	; 9
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <Horn()+0x500>
    1d9e:	ff ce       	rjmp	.-514    	; 0x1b9e <Horn()+0x2fe>
F:\Arduino\projects\HPiECU/HPiECU.ino:1366
                {
                    //  Serial.println("stage 9");
                    hornModeCStage = 10;
    1da0:	8a e0       	ldi	r24, 0x0A	; 10
    1da2:	b7 cf       	rjmp	.-146    	; 0x1d12 <Horn()+0x472>
F:\Arduino\projects\HPiECU/HPiECU.ino:1371
                    hornModThreeState = true;
                    Horn_delayMillis = millis();
                    digitalWrite(LeftHorn_OutPin, hornModThreeState);
                    digitalWrite(RightHorn_OutPin, hornModThreeState);
                } else if ((millis() - Horn_delayMillis) >= 250 && hornModThreeState == true && hornModeCStage == 10)
    1da4:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hornModThreeState>
    1da8:	88 23       	and	r24, r24
    1daa:	09 f4       	brne	.+2      	; 0x1dae <Horn()+0x50e>
    1dac:	04 cf       	rjmp	.-504    	; 0x1bb6 <Horn()+0x316>
    1dae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hornModeCStage>
    1db2:	8a 30       	cpi	r24, 0x0A	; 10
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <Horn()+0x518>
    1db6:	ff ce       	rjmp	.-514    	; 0x1bb6 <Horn()+0x316>
F:\Arduino\projects\HPiECU/HPiECU.ino:1374
                {
                    // Serial.println("stage 10");
                    hornModeCStage = 11;
    1db8:	8b e0       	ldi	r24, 0x0B	; 11
    1dba:	8d cf       	rjmp	.-230    	; 0x1cd6 <Horn()+0x436>

00001dbc <Print::println(double, int) [clone .constprop.15]>:
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:187
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    1dbc:	4f 92       	push	r4
    1dbe:	5f 92       	push	r5
    1dc0:	6f 92       	push	r6
    1dc2:	7f 92       	push	r7
    1dc4:	8f 92       	push	r8
    1dc6:	9f 92       	push	r9
    1dc8:	af 92       	push	r10
    1dca:	bf 92       	push	r11
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	6b 01       	movw	r12, r22
    1dd6:	7c 01       	movw	r14, r24
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:256

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1dd8:	ac 01       	movw	r20, r24
    1dda:	9b 01       	movw	r18, r22
    1ddc:	0e 94 35 23 	call	0x466a	; 0x466a <__unordsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	c1 f0       	breq	.+48     	; 0x1e14 <Print::println(double, int) [clone .constprop.15]+0x58>
write():
    1de4:	89 ec       	ldi	r24, 0xC9	; 201
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
    1dec:	7c 01       	movw	r14, r24
    1dee:	8c e9       	ldi	r24, 0x9C	; 156
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:192
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    1df6:	8e 0d       	add	r24, r14
    1df8:	9f 1d       	adc	r25, r15
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	bf 90       	pop	r11
    1e04:	af 90       	pop	r10
    1e06:	9f 90       	pop	r9
    1e08:	8f 90       	pop	r8
    1e0a:	7f 90       	pop	r7
    1e0c:	6f 90       	pop	r6
    1e0e:	5f 90       	pop	r5
    1e10:	4f 90       	pop	r4
    1e12:	08 95       	ret
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:257
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1e14:	46 01       	movw	r8, r12
    1e16:	57 01       	movw	r10, r14
    1e18:	e8 94       	clt
    1e1a:	b7 f8       	bld	r11, 7
    1e1c:	2f ef       	ldi	r18, 0xFF	; 255
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	5f e7       	ldi	r21, 0x7F	; 127
    1e24:	c5 01       	movw	r24, r10
    1e26:	b4 01       	movw	r22, r8
    1e28:	0e 94 35 23 	call	0x466a	; 0x466a <__unordsf2>
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	0d c0       	rjmp	.+26     	; 0x1e4a <Print::println(double, int) [clone .constprop.15]+0x8e>
    1e30:	2f ef       	ldi	r18, 0xFF	; 255
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	5f e7       	ldi	r21, 0x7F	; 127
    1e38:	c5 01       	movw	r24, r10
    1e3a:	b4 01       	movw	r22, r8
    1e3c:	0e 94 45 20 	call	0x408a	; 0x408a <__cmpsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	1c f4       	brge	.+6      	; 0x1e4a <Print::println(double, int) [clone .constprop.15]+0x8e>
write():
    1e44:	8d ec       	ldi	r24, 0xCD	; 205
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	cf cf       	rjmp	.-98     	; 0x1de8 <Print::println(double, int) [clone .constprop.15]+0x2c>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1e4a:	2f ef       	ldi	r18, 0xFF	; 255
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	5f e4       	ldi	r21, 0x4F	; 79
    1e52:	c7 01       	movw	r24, r14
    1e54:	b6 01       	movw	r22, r12
    1e56:	0e 94 30 23 	call	0x4660	; 0x4660 <__gesf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	1c f4       	brge	.+6      	; 0x1e64 <Print::println(double, int) [clone .constprop.15]+0xa8>
write():
    1e5e:	81 ed       	ldi	r24, 0xD1	; 209
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	c2 cf       	rjmp	.-124    	; 0x1de8 <Print::println(double, int) [clone .constprop.15]+0x2c>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1e64:	2f ef       	ldi	r18, 0xFF	; 255
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	5f ec       	ldi	r21, 0xCF	; 207
    1e6c:	c7 01       	movw	r24, r14
    1e6e:	b6 01       	movw	r22, r12
    1e70:	0e 94 45 20 	call	0x408a	; 0x408a <__cmpsf2>
    1e74:	87 fd       	sbrc	r24, 7
    1e76:	f3 cf       	rjmp	.-26     	; 0x1e5e <Print::println(double, int) [clone .constprop.15]+0xa2>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	a9 01       	movw	r20, r18
    1e7e:	c7 01       	movw	r24, r14
    1e80:	b6 01       	movw	r22, r12
    1e82:	0e 94 45 20 	call	0x408a	; 0x408a <__cmpsf2>
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1e86:	b1 2c       	mov	r11, r1
    1e88:	a1 2c       	mov	r10, r1
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    1e8a:	87 ff       	sbrs	r24, 7
    1e8c:	0a c0       	rjmp	.+20     	; 0x1ea2 <Print::println(double, int) [clone .constprop.15]+0xe6>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1e8e:	6d e2       	ldi	r22, 0x2D	; 45
    1e90:	88 e5       	ldi	r24, 0x58	; 88
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	0e 94 a1 04 	call	0x942	; 0x942 <HardwareSerial::write(unsigned char)>
    1e98:	5c 01       	movw	r10, r24
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1e9a:	f7 fa       	bst	r15, 7
    1e9c:	f0 94       	com	r15
    1e9e:	f7 f8       	bld	r15, 7
    1ea0:	f0 94       	com	r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:273
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    1ea2:	2a e0       	ldi	r18, 0x0A	; 10
    1ea4:	37 ed       	ldi	r19, 0xD7	; 215
    1ea6:	43 ea       	ldi	r20, 0xA3	; 163
    1ea8:	5b e3       	ldi	r21, 0x3B	; 59
    1eaa:	c7 01       	movw	r24, r14
    1eac:	b6 01       	movw	r22, r12
    1eae:	0e 94 1c 22 	call	0x4438	; 0x4438 <__addsf3>
    1eb2:	2b 01       	movw	r4, r22
    1eb4:	3c 01       	movw	r6, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1eb6:	0e 94 01 23 	call	0x4602	; 0x4602 <__fixunssfsi>
    1eba:	6b 01       	movw	r12, r22
    1ebc:	7c 01       	movw	r14, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:277
  double remainder = number - (double)int_part;
    1ebe:	0e 94 4a 20 	call	0x4094	; 0x4094 <__floatunsisf>
    1ec2:	9b 01       	movw	r18, r22
    1ec4:	ac 01       	movw	r20, r24
    1ec6:	c3 01       	movw	r24, r6
    1ec8:	b2 01       	movw	r22, r4
    1eca:	0e 94 1b 22 	call	0x4436	; 0x4436 <__subsf3>
    1ece:	2b 01       	movw	r4, r22
    1ed0:	3c 01       	movw	r6, r24
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1ed2:	4a e0       	ldi	r20, 0x0A	; 10
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1edc:	7c 01       	movw	r14, r24
    1ede:	ea 0c       	add	r14, r10
    1ee0:	fb 1c       	adc	r15, r11
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1ee2:	6e e2       	ldi	r22, 0x2E	; 46
    1ee4:	88 e5       	ldi	r24, 0x58	; 88
    1ee6:	92 e0       	ldi	r25, 0x02	; 2
    1ee8:	0e 94 a1 04 	call	0x942	; 0x942 <HardwareSerial::write(unsigned char)>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:282
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1eec:	e8 0e       	add	r14, r24
    1eee:	f9 1e       	adc	r15, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:288
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	c3 01       	movw	r24, r6
    1efa:	b2 01       	movw	r22, r4
    1efc:	0e 94 ab 20 	call	0x4156	; 0x4156 <__mulsf3>
    1f00:	2b 01       	movw	r4, r22
    1f02:	3c 01       	movw	r6, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    1f04:	0e 94 01 23 	call	0x4602	; 0x4602 <__fixunssfsi>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1f08:	4b 01       	movw	r8, r22
    1f0a:	b1 2c       	mov	r11, r1
    1f0c:	a1 2c       	mov	r10, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1f0e:	4a e0       	ldi	r20, 0x0A	; 10
    1f10:	c5 01       	movw	r24, r10
    1f12:	b4 01       	movw	r22, r8
    1f14:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    1f18:	e8 0e       	add	r14, r24
    1f1a:	f9 1e       	adc	r15, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    1f1c:	c5 01       	movw	r24, r10
    1f1e:	b4 01       	movw	r22, r8
    1f20:	0e 94 4a 20 	call	0x4094	; 0x4094 <__floatunsisf>
    1f24:	9b 01       	movw	r18, r22
    1f26:	ac 01       	movw	r20, r24
    1f28:	c3 01       	movw	r24, r6
    1f2a:	b2 01       	movw	r22, r4
    1f2c:	0e 94 1b 22 	call	0x4436	; 0x4436 <__subsf3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:288
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 ab 20 	call	0x4156	; 0x4156 <__mulsf3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    1f3c:	0e 94 01 23 	call	0x4602	; 0x4602 <__fixunssfsi>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1f44:	4a e0       	ldi	r20, 0x0A	; 10
    1f46:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    1f4a:	e8 0e       	add	r14, r24
    1f4c:	f9 1e       	adc	r15, r25
    1f4e:	4f cf       	rjmp	.-354    	; 0x1dee <Print::println(double, int) [clone .constprop.15]+0x32>

00001f50 <checkHornKey()>:
checkHornKey():
F:\Arduino\projects\HPiECU/HPiECU.ino:1398
} 
/// <summary>
/// Interrupt@ Horn KeyPress Listener
/// </summary>
void checkHornKey()
{
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
F:\Arduino\projects\HPiECU/HPiECU.ino:1400

  if((digitalRead(HornINpin)) == HIGH)
    1f54:	8a e0       	ldi	r24, 0x0A	; 10
    1f56:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <checkHornKey()+0x10>
    1f5e:	5e c0       	rjmp	.+188    	; 0x201c <checkHornKey()+0xcc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1403
  {
 
      if ((millis() - buttonPrevMillis) > 500)hornclicks = 0; //if no cicks comes after timeout so restart counter .
    1f60:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1f64:	00 91 dc 01 	lds	r16, 0x01DC	; 0x8001dc <buttonPrevMillis>
    1f68:	10 91 dd 01 	lds	r17, 0x01DD	; 0x8001dd <buttonPrevMillis+0x1>
    1f6c:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <buttonPrevMillis+0x2>
    1f70:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <buttonPrevMillis+0x3>
    1f74:	60 1b       	sub	r22, r16
    1f76:	71 0b       	sbc	r23, r17
    1f78:	82 0b       	sbc	r24, r18
    1f7a:	93 0b       	sbc	r25, r19
    1f7c:	65 3f       	cpi	r22, 0xF5	; 245
    1f7e:	71 40       	sbci	r23, 0x01	; 1
    1f80:	81 05       	cpc	r24, r1
    1f82:	91 05       	cpc	r25, r1
    1f84:	10 f0       	brcs	.+4      	; 0x1f8a <checkHornKey()+0x3a>
    1f86:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <hornclicks>
F:\Arduino\projects\HPiECU/HPiECU.ino:1404
   if (millis() - lastDebounceTime > debounceDelay)
    1f8a:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1f8e:	00 91 d8 01 	lds	r16, 0x01D8	; 0x8001d8 <lastDebounceTime>
    1f92:	10 91 d9 01 	lds	r17, 0x01D9	; 0x8001d9 <lastDebounceTime+0x1>
    1f96:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <lastDebounceTime+0x2>
    1f9a:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <lastDebounceTime+0x3>
    1f9e:	60 1b       	sub	r22, r16
    1fa0:	71 0b       	sbc	r23, r17
    1fa2:	82 0b       	sbc	r24, r18
    1fa4:	93 0b       	sbc	r25, r19
    1fa6:	69 3c       	cpi	r22, 0xC9	; 201
    1fa8:	71 05       	cpc	r23, r1
    1faa:	81 05       	cpc	r24, r1
    1fac:	91 05       	cpc	r25, r1
    1fae:	10 f1       	brcs	.+68     	; 0x1ff4 <checkHornKey()+0xa4>
F:\Arduino\projects\HPiECU/HPiECU.ino:1406
    {
      lastDebounceTime = millis();
    1fb0:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1fb4:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <lastDebounceTime>
    1fb8:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <lastDebounceTime+0x1>
    1fbc:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <lastDebounceTime+0x2>
    1fc0:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <lastDebounceTime+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1408
     // Serial.println("intermillis");
      HornFlag = true;
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <HornFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1410
      //cli();
      hornclicks++;
    1fca:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hornclicks>
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <hornclicks>
F:\Arduino\projects\HPiECU/HPiECU.ino:1411
      if (hornclicks > 4 ) hornclicks = 1; // if we was  pressed the button more than 4 times so reset the click counter.
    1fd4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hornclicks>
    1fd8:	85 30       	cpi	r24, 0x05	; 5
    1fda:	10 f0       	brcs	.+4      	; 0x1fe0 <checkHornKey()+0x90>
    1fdc:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <hornclicks>
F:\Arduino\projects\HPiECU/HPiECU.ino:1412
      buttonPrevMillis = millis();
    1fe0:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    1fe4:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <buttonPrevMillis>
    1fe8:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <buttonPrevMillis+0x1>
    1fec:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <buttonPrevMillis+0x2>
    1ff0:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <buttonPrevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1414
    }
       Serial.print("pressing");
    1ff4:	85 ed       	ldi	r24, 0xD5	; 213
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:1415
   Serial.println(hornclicks);
    1ffc:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <hornclicks>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2006:	4a e0       	ldi	r20, 0x0A	; 10
    2008:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]>
write():
    200c:	8c e9       	ldi	r24, 0x9C	; 156
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
checkHornKey():
F:\Arduino\projects\HPiECU/HPiECU.ino:1423


 
  //Serial.println("interout");
//Serial.print(hornclicks);
}
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
F:\Arduino\projects\HPiECU/HPiECU.ino:1416
      if (hornclicks > 4 ) hornclicks = 1; // if we was  pressed the button more than 4 times so reset the click counter.
      buttonPrevMillis = millis();
    }
       Serial.print("pressing");
   Serial.println(hornclicks);
    Horn();
    2018:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <Horn()>
F:\Arduino\projects\HPiECU/HPiECU.ino:1417
  }else if ((digitalRead(HornINpin)) == false) HornFlag = false;//this code is Unnecessary. will removed.
    201c:	8a e0       	ldi	r24, 0x0A	; 10
    201e:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    2022:	89 2b       	or	r24, r25
    2024:	11 f4       	brne	.+4      	; 0x202a <checkHornKey()+0xda>
    2026:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <HornFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1423


 
  //Serial.println("interout");
//Serial.print(hornclicks);
}
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <String::equals(char const*) const [clone .constprop.20]>:
equals():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:452
  return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
  if (len == 0) return (cstr == NULL || *cstr == 0);
    2030:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <input+0x4>
    2034:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <input+0x5>
    2038:	23 2b       	or	r18, r19
    203a:	39 f4       	brne	.+14     	; 0x204a <String::equals(char const*) const [clone .constprop.20]+0x1a>
    203c:	21 e0       	ldi	r18, 0x01	; 1
    203e:	fc 01       	movw	r30, r24
    2040:	80 81       	ld	r24, Z
    2042:	88 23       	and	r24, r24
    2044:	61 f0       	breq	.+24     	; 0x205e <String::equals(char const*) const [clone .constprop.20]+0x2e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:454
  if (cstr == NULL) return buffer[0] == 0;
  return strcmp(buffer, cstr) == 0;
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	0a c0       	rjmp	.+20     	; 0x205e <String::equals(char const*) const [clone .constprop.20]+0x2e>
    204a:	bc 01       	movw	r22, r24
    204c:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <input>
    2050:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <input+0x1>
    2054:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <strcmp>
    2058:	21 e0       	ldi	r18, 0x01	; 1
    205a:	89 2b       	or	r24, r25
    205c:	a1 f7       	brne	.-24     	; 0x2046 <String::equals(char const*) const [clone .constprop.20]+0x16>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:455
}
    205e:	82 2f       	mov	r24, r18
    2060:	08 95       	ret

00002062 <String::startsWith(String const&) const [clone .constprop.12]>:
startsWith():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:490
    if (tolower(*p1++) != tolower(*p2++)) return 0;
  } 
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    2062:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:492
{
  if (len < s2.len) return 0;
    2064:	44 81       	ldd	r20, Z+4	; 0x04
    2066:	55 81       	ldd	r21, Z+5	; 0x05
    2068:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <input+0x4>
    206c:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <input+0x5>
    2070:	84 17       	cp	r24, r20
    2072:	95 07       	cpc	r25, r21
    2074:	80 f0       	brcs	.+32     	; 0x2096 <String::startsWith(String const&) const [clone .constprop.12]+0x34>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:498
  return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
  if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    2076:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <input>
    207a:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <input+0x1>
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	51 f0       	breq	.+20     	; 0x2096 <String::startsWith(String const&) const [clone .constprop.12]+0x34>
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	61 15       	cp	r22, r1
    2088:	71 05       	cpc	r23, r1
    208a:	29 f0       	breq	.+10     	; 0x2096 <String::startsWith(String const&) const [clone .constprop.12]+0x34>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:499
  return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    208c:	0e 94 5e 25 	call	0x4abc	; 0x4abc <strncmp>
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	89 2b       	or	r24, r25
    2094:	09 f0       	breq	.+2      	; 0x2098 <String::startsWith(String const&) const [clone .constprop.12]+0x36>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:492
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
  if (len < s2.len) return 0;
    2096:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:494
  return startsWith(s2, 0);
}
    2098:	82 2f       	mov	r24, r18
    209a:	08 95       	ret

0000209c <String::invalidate()>:
invalidate():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:140
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:141
  if (buffer) free(buffer);
    20a2:	88 81       	ld	r24, Y
    20a4:	99 81       	ldd	r25, Y+1	; 0x01
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	11 f0       	breq	.+4      	; 0x20ae <String::invalidate()+0x12>
    20aa:	0e 94 ff 23 	call	0x47fe	; 0x47fe <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	18 82       	st	Y, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    20b2:	1d 82       	std	Y+5, r1	; 0x05
    20b4:	1c 82       	std	Y+4, r1	; 0x04
    20b6:	1b 82       	std	Y+3, r1	; 0x03
    20b8:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:144
}
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	08 95       	ret

000020c0 <String::~String()>:
__base_dtor ():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
    20c0:	fc 01       	movw	r30, r24
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	11 f0       	breq	.+4      	; 0x20ce <String::~String()+0xe>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:125
    free(buffer);
    20ca:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:126
}
    20ce:	08 95       	ret

000020d0 <String::toInt() const>:
toInt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    20d0:	fc 01       	movw	r30, r24
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	11 f0       	breq	.+4      	; 0x20de <String::toInt() const+0xe>
    20da:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <atol>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:740
  return 0;
}
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	cb 01       	movw	r24, r22
    20e4:	08 95       	ret

000020e6 <String::reserve(unsigned int)>:
reserve():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
    20f0:	88 81       	ld	r24, Y
    20f2:	99 81       	ldd	r25, Y+1	; 0x01
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	59 f0       	breq	.+22     	; 0x210e <String::reserve(unsigned int)+0x28>
    20f8:	2a 81       	ldd	r18, Y+2	; 0x02
    20fa:	3b 81       	ldd	r19, Y+3	; 0x03
    20fc:	26 17       	cp	r18, r22
    20fe:	37 07       	cpc	r19, r23
    2100:	30 f0       	brcs	.+12     	; 0x210e <String::reserve(unsigned int)+0x28>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    2102:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret
    210e:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2110:	6f 5f       	subi	r22, 0xFF	; 255
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	0e 94 88 24 	call	0x4910	; 0x4910 <realloc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	59 f0       	breq	.+22     	; 0x2132 <String::reserve(unsigned int)+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    211c:	99 83       	std	Y+1, r25	; 0x01
    211e:	88 83       	st	Y, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    2120:	1b 83       	std	Y+3, r17	; 0x03
    2122:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    2124:	2c 81       	ldd	r18, Y+4	; 0x04
    2126:	3d 81       	ldd	r19, Y+5	; 0x05
    2128:	23 2b       	or	r18, r19
    212a:	59 f7       	brne	.-42     	; 0x2102 <String::reserve(unsigned int)+0x1c>
    212c:	fc 01       	movw	r30, r24
    212e:	10 82       	st	Z, r1
    2130:	e8 cf       	rjmp	.-48     	; 0x2102 <String::reserve(unsigned int)+0x1c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	e7 cf       	rjmp	.-50     	; 0x2104 <String::reserve(unsigned int)+0x1e>

00002136 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:239
  if (this != &rval) move(rval);
  return *this;
}
#endif

String & String::operator = (const char *cstr)
    2136:	ef 92       	push	r14
    2138:	ff 92       	push	r15
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	8c 01       	movw	r16, r24
    2144:	7b 01       	movw	r14, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:241
{
  if (cstr) copy(cstr, strlen(cstr));
    2146:	eb 01       	movw	r28, r22
    2148:	09 90       	ld	r0, Y+
    214a:	00 20       	and	r0, r0
    214c:	e9 f7       	brne	.-6      	; 0x2148 <String::operator=(char const*) [clone .part.3]+0x12>
    214e:	21 97       	sbiw	r28, 0x01	; 1
    2150:	c6 1b       	sub	r28, r22
    2152:	d7 0b       	sbc	r29, r23
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    2154:	be 01       	movw	r22, r28
    2156:	0e 94 73 10 	call	0x20e6	; 0x20e6 <String::reserve(unsigned int)>
    215a:	81 11       	cpse	r24, r1
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <String::operator=(char const*) [clone .part.3]+0x3a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:174
    invalidate();
    215e:	c8 01       	movw	r24, r16
_ZN6StringaSEPKc.part.3():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:174
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    216c:	0c 94 4e 10 	jmp	0x209c	; 0x209c <String::invalidate()>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:177
    return *this;
  }
  len = length;
    2170:	f8 01       	movw	r30, r16
    2172:	d5 83       	std	Z+5, r29	; 0x05
    2174:	c4 83       	std	Z+4, r28	; 0x04
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    2176:	b7 01       	movw	r22, r14
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
_ZN6StringaSEPKc.part.3():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	1f 91       	pop	r17
    2182:	0f 91       	pop	r16
    2184:	ff 90       	pop	r15
    2186:	ef 90       	pop	r14
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    2188:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <strcpy>

0000218c <String::String(char const*)>:
__base_ctor ():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    218c:	ef 92       	push	r14
    218e:	ff 92       	push	r15
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	ec 01       	movw	r28, r24
    219a:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    219c:	19 82       	std	Y+1, r1	; 0x01
    219e:	18 82       	st	Y, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    21a0:	1b 82       	std	Y+3, r1	; 0x03
    21a2:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
    21a4:	1d 82       	std	Y+5, r1	; 0x05
    21a6:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    21a8:	fb 01       	movw	r30, r22
    21aa:	01 90       	ld	r0, Z+
    21ac:	00 20       	and	r0, r0
    21ae:	e9 f7       	brne	.-6      	; 0x21aa <String::String(char const*)+0x1e>
    21b0:	31 97       	sbiw	r30, 0x01	; 1
    21b2:	8f 01       	movw	r16, r30
    21b4:	06 1b       	sub	r16, r22
    21b6:	17 0b       	sbc	r17, r23
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    21b8:	b8 01       	movw	r22, r16
    21ba:	0e 94 73 10 	call	0x20e6	; 0x20e6 <String::reserve(unsigned int)>
    21be:	81 11       	cpse	r24, r1
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <String::String(char const*)+0x48>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:174
    invalidate();
    21c2:	ce 01       	movw	r24, r28
__base_ctor ():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:174
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    21d0:	0c 94 4e 10 	jmp	0x209c	; 0x209c <String::invalidate()>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:177
    return *this;
  }
  len = length;
    21d4:	1d 83       	std	Y+5, r17	; 0x05
    21d6:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    21d8:	b7 01       	movw	r22, r14
    21da:	88 81       	ld	r24, Y
    21dc:	99 81       	ldd	r25, Y+1	; 0x01
__base_ctor ():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    21ea:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <strcpy>

000021ee <String::substring(unsigned int) const [clone .constprop.46]>:
substring():
  int indexOf( const String &str, unsigned int fromIndex ) const;
  int lastIndexOf( char ch ) const;
  int lastIndexOf( char ch, unsigned int fromIndex ) const;
  int lastIndexOf( const String &str ) const;
  int lastIndexOf( const String &str, unsigned int fromIndex ) const;
  String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    21ee:	cf 92       	push	r12
    21f0:	df 92       	push	r13
    21f2:	ef 92       	push	r14
    21f4:	ff 92       	push	r15
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	7c 01       	movw	r14, r24
    2200:	00 91 1e 03 	lds	r16, 0x031E	; 0x80031e <input+0x4>
    2204:	10 91 1f 03 	lds	r17, 0x031F	; 0x80031f <input+0x5>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:617
  return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
  if (left > right) {
    2208:	84 e0       	ldi	r24, 0x04	; 4
    220a:	c8 2e       	mov	r12, r24
    220c:	d1 2c       	mov	r13, r1
    220e:	04 30       	cpi	r16, 0x04	; 4
    2210:	11 05       	cpc	r17, r1
    2212:	18 f4       	brcc	.+6      	; 0x221a <String::substring(unsigned int) const [clone .constprop.46]+0x2c>
    2214:	68 01       	movw	r12, r16
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:619
    unsigned int temp = right;
    right = left;
    2216:	04 e0       	ldi	r16, 0x04	; 4
    2218:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:622
    left = temp;
  }
  String out;
    221a:	6e e9       	ldi	r22, 0x9E	; 158
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	c7 01       	movw	r24, r14
    2220:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:623
  if (left >= len) return out;
    2224:	c0 91 1e 03 	lds	r28, 0x031E	; 0x80031e <input+0x4>
    2228:	d0 91 1f 03 	lds	r29, 0x031F	; 0x80031f <input+0x5>
    222c:	cc 16       	cp	r12, r28
    222e:	dd 06       	cpc	r13, r29
    2230:	f8 f4       	brcc	.+62     	; 0x2270 <String::substring(unsigned int) const [clone .constprop.46]+0x82>
    2232:	0c 17       	cp	r16, r28
    2234:	1d 07       	cpc	r17, r29
    2236:	08 f4       	brcc	.+2      	; 0x223a <String::substring(unsigned int) const [clone .constprop.46]+0x4c>
    2238:	e8 01       	movw	r28, r16
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:625
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
    223a:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <input>
    223e:	f0 91 1b 03 	lds	r31, 0x031B	; 0x80031b <input+0x1>
    2242:	ec 0f       	add	r30, r28
    2244:	fd 1f       	adc	r31, r29
    2246:	10 81       	ld	r17, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:626
  buffer[right] = '\0'; 
    2248:	10 82       	st	Z, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:627
  out = buffer + left;  // pointer arithmetic
    224a:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <input>
    224e:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <input+0x1>
    2252:	6c 0d       	add	r22, r12
    2254:	7d 1d       	adc	r23, r13
operator=():
    2256:	c7 01       	movw	r24, r14
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    2258:	61 15       	cp	r22, r1
    225a:	71 05       	cpc	r23, r1
    225c:	99 f0       	breq	.+38     	; 0x2284 <String::substring(unsigned int) const [clone .constprop.46]+0x96>
    225e:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:628
  if (left >= len) return out;
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
  buffer[right] = '\0'; 
  out = buffer + left;  // pointer arithmetic
  buffer[right] = temp;  //restore character
    2262:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <input>
    2266:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <input+0x1>
    226a:	c8 0f       	add	r28, r24
    226c:	d9 1f       	adc	r29, r25
    226e:	18 83       	st	Y, r17
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:178
    2270:	c7 01       	movw	r24, r14
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	df 90       	pop	r13
    2280:	cf 90       	pop	r12
    2282:	08 95       	ret
operator=():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:242
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
    2284:	0e 94 4e 10 	call	0x209c	; 0x209c <String::invalidate()>
    2288:	ec cf       	rjmp	.-40     	; 0x2262 <String::substring(unsigned int) const [clone .constprop.46]+0x74>

0000228a <EERef::update(unsigned char)>:
update():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    228a:	ff 92       	push	r15
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	ec 01       	movw	r28, r24
    2296:	f6 2e       	mov	r15, r22
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2298:	08 81       	ld	r16, Y
    229a:	19 81       	ldd	r17, Y+1	; 0x01
    229c:	c8 01       	movw	r24, r16
    229e:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <eeprom_read_byte>
update():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    22a2:	f8 16       	cp	r15, r24
    22a4:	21 f0       	breq	.+8      	; 0x22ae <EERef::update(unsigned char)+0x24>
_ZN5EERefaSEh():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    22a6:	6f 2d       	mov	r22, r15
    22a8:	c8 01       	movw	r24, r16
    22aa:	0e 94 74 21 	call	0x42e8	; 0x42e8 <eeprom_write_byte>
update():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    22ae:	ce 01       	movw	r24, r28
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	08 95       	ret

000022bc <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.13]>:
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.13():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:137
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
        return t;
    }
    
    template< typename T > const T &put( int idx, const T &t ){
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.13]+0xe>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	8c 01       	movw	r16, r24
    22d0:	7b 01       	movw	r14, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:140
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	fb 01       	movw	r30, r22
    22d8:	60 81       	ld	r22, Z
    22da:	ce 01       	movw	r24, r28
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	0e 94 45 11 	call	0x228a	; 0x228a <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:100
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    22e2:	0f 5f       	subi	r16, 0xFF	; 255
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.13():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:140
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    22e6:	1a 83       	std	Y+2, r17	; 0x02
    22e8:	09 83       	std	Y+1, r16	; 0x01
    22ea:	f7 01       	movw	r30, r14
    22ec:	61 81       	ldd	r22, Z+1	; 0x01
    22ee:	ce 01       	movw	r24, r28
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	0e 94 45 11 	call	0x228a	; 0x228a <EERef::update(unsigned char)>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:142
        return t;
    }
    22f6:	c7 01       	movw	r24, r14
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	08 95       	ret

0000230a <__vector_11>:
__vector_11():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    230a:	1f 92       	push	r1
    230c:	0f 92       	push	r0
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	0f 92       	push	r0
    2312:	11 24       	eor	r1, r1
    2314:	2f 93       	push	r18
    2316:	3f 93       	push	r19
    2318:	8f 93       	push	r24
    231a:	9f 93       	push	r25
    231c:	af 93       	push	r26
    231e:	bf 93       	push	r27
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    2320:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <timer0_millis>
    2324:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <timer0_millis+0x1>
    2328:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <timer0_millis+0x2>
    232c:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    2330:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    2334:	23 e0       	ldi	r18, 0x03	; 3
    2336:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    2338:	2d 37       	cpi	r18, 0x7D	; 125
    233a:	68 f1       	brcs	.+90     	; 0x2396 <__vector_11+0x8c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    233c:	26 e8       	ldi	r18, 0x86	; 134
    233e:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    2340:	02 96       	adiw	r24, 0x02	; 2
    2342:	a1 1d       	adc	r26, r1
    2344:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    2346:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    234a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <timer0_millis>
    234e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <timer0_millis+0x1>
    2352:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <timer0_millis+0x2>
    2356:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    235a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <timer0_overflow_count>
    235e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <timer0_overflow_count+0x1>
    2362:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <timer0_overflow_count+0x2>
    2366:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <timer0_overflow_count+0x3>
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	a1 1d       	adc	r26, r1
    236e:	b1 1d       	adc	r27, r1
    2370:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <timer0_overflow_count>
    2374:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <timer0_overflow_count+0x1>
    2378:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <timer0_overflow_count+0x2>
    237c:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    2380:	bf 91       	pop	r27
    2382:	af 91       	pop	r26
    2384:	9f 91       	pop	r25
    2386:	8f 91       	pop	r24
    2388:	3f 91       	pop	r19
    238a:	2f 91       	pop	r18
    238c:	0f 90       	pop	r0
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	0f 90       	pop	r0
    2392:	1f 90       	pop	r1
    2394:	18 95       	reti
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	a1 1d       	adc	r26, r1
    239a:	b1 1d       	adc	r27, r1
    239c:	d4 cf       	rjmp	.-88     	; 0x2346 <__vector_11+0x3c>

0000239e <__vector_2>:
__vector_2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:462

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
#elif defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__) \
|| defined(__AVR_ATmega32__)      || defined(__AVR_ATmega162__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    239e:	1f 92       	push	r1
    23a0:	0f 92       	push	r0
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	0f 92       	push	r0
    23a6:	11 24       	eor	r1, r1
    23a8:	2f 93       	push	r18
    23aa:	3f 93       	push	r19
    23ac:	4f 93       	push	r20
    23ae:	5f 93       	push	r21
    23b0:	6f 93       	push	r22
    23b2:	7f 93       	push	r23
    23b4:	8f 93       	push	r24
    23b6:	9f 93       	push	r25
    23b8:	af 93       	push	r26
    23ba:	bf 93       	push	r27
    23bc:	ef 93       	push	r30
    23be:	ff 93       	push	r31
    23c0:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <intFunc+0x2>
    23c4:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <intFunc+0x3>
    23c8:	09 95       	icall
    23ca:	ff 91       	pop	r31
    23cc:	ef 91       	pop	r30
    23ce:	bf 91       	pop	r27
    23d0:	af 91       	pop	r26
    23d2:	9f 91       	pop	r25
    23d4:	8f 91       	pop	r24
    23d6:	7f 91       	pop	r23
    23d8:	6f 91       	pop	r22
    23da:	5f 91       	pop	r21
    23dc:	4f 91       	pop	r20
    23de:	3f 91       	pop	r19
    23e0:	2f 91       	pop	r18
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	0f 90       	pop	r0
    23e8:	1f 90       	pop	r1
    23ea:	18 95       	reti

000023ec <__vector_1>:
__vector_1():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:461
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
#elif defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__) \
|| defined(__AVR_ATmega32__)      || defined(__AVR_ATmega162__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    23ec:	1f 92       	push	r1
    23ee:	0f 92       	push	r0
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	0f 92       	push	r0
    23f4:	11 24       	eor	r1, r1
    23f6:	2f 93       	push	r18
    23f8:	3f 93       	push	r19
    23fa:	4f 93       	push	r20
    23fc:	5f 93       	push	r21
    23fe:	6f 93       	push	r22
    2400:	7f 93       	push	r23
    2402:	8f 93       	push	r24
    2404:	9f 93       	push	r25
    2406:	af 93       	push	r26
    2408:	bf 93       	push	r27
    240a:	ef 93       	push	r30
    240c:	ff 93       	push	r31
    240e:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <intFunc>
    2412:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <intFunc+0x1>
    2416:	09 95       	icall
    2418:	ff 91       	pop	r31
    241a:	ef 91       	pop	r30
    241c:	bf 91       	pop	r27
    241e:	af 91       	pop	r26
    2420:	9f 91       	pop	r25
    2422:	8f 91       	pop	r24
    2424:	7f 91       	pop	r23
    2426:	6f 91       	pop	r22
    2428:	5f 91       	pop	r21
    242a:	4f 91       	pop	r20
    242c:	3f 91       	pop	r19
    242e:	2f 91       	pop	r18
    2430:	0f 90       	pop	r0
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

0000243a <__vector_4>:
__vector_4():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:580
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    243a:	1f 92       	push	r1
    243c:	0f 92       	push	r0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	2f 93       	push	r18
    2446:	3f 93       	push	r19
    2448:	4f 93       	push	r20
    244a:	5f 93       	push	r21
    244c:	6f 93       	push	r22
    244e:	7f 93       	push	r23
    2450:	8f 93       	push	r24
    2452:	9f 93       	push	r25
    2454:	af 93       	push	r26
    2456:	bf 93       	push	r27
    2458:	ef 93       	push	r30
    245a:	ff 93       	push	r31
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:582

  if (timer2_toggle_count != 0)
    245c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <timer2_toggle_count>
    2460:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <timer2_toggle_count+0x1>
    2464:	a0 91 52 02 	lds	r26, 0x0252	; 0x800252 <timer2_toggle_count+0x2>
    2468:	b0 91 53 02 	lds	r27, 0x0253	; 0x800253 <timer2_toggle_count+0x3>
    246c:	89 2b       	or	r24, r25
    246e:	8a 2b       	or	r24, r26
    2470:	8b 2b       	or	r24, r27
    2472:	d1 f1       	breq	.+116    	; 0x24e8 <__vector_4+0xae>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:585
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    2474:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <timer2_pin_mask>
    2478:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <timer2_pin_port>
    247c:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <timer2_pin_port+0x1>
    2480:	80 81       	ld	r24, Z
    2482:	89 27       	eor	r24, r25
    2484:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:587

    if (timer2_toggle_count > 0)
    2486:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <timer2_toggle_count>
    248a:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <timer2_toggle_count+0x1>
    248e:	a0 91 52 02 	lds	r26, 0x0252	; 0x800252 <timer2_toggle_count+0x2>
    2492:	b0 91 53 02 	lds	r27, 0x0253	; 0x800253 <timer2_toggle_count+0x3>
    2496:	18 16       	cp	r1, r24
    2498:	19 06       	cpc	r1, r25
    249a:	1a 06       	cpc	r1, r26
    249c:	1b 06       	cpc	r1, r27
    249e:	9c f4       	brge	.+38     	; 0x24c6 <__vector_4+0x8c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:588
      timer2_toggle_count--;
    24a0:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <timer2_toggle_count>
    24a4:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <timer2_toggle_count+0x1>
    24a8:	a0 91 52 02 	lds	r26, 0x0252	; 0x800252 <timer2_toggle_count+0x2>
    24ac:	b0 91 53 02 	lds	r27, 0x0253	; 0x800253 <timer2_toggle_count+0x3>
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	a1 09       	sbc	r26, r1
    24b4:	b1 09       	sbc	r27, r1
    24b6:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <timer2_toggle_count>
    24ba:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <timer2_toggle_count+0x1>
    24be:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <timer2_toggle_count+0x2>
    24c2:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <timer2_toggle_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:599
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	bf 91       	pop	r27
    24cc:	af 91       	pop	r26
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	7f 91       	pop	r23
    24d4:	6f 91       	pop	r22
    24d6:	5f 91       	pop	r21
    24d8:	4f 91       	pop	r20
    24da:	3f 91       	pop	r19
    24dc:	2f 91       	pop	r18
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Tone.cpp:595
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    24e8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tone_pins>
    24ec:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
    24f0:	ea cf       	rjmp	.-44     	; 0x24c6 <__vector_4+0x8c>

000024f2 <__vector_14>:
__vector_14():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    24f2:	1f 92       	push	r1
    24f4:	0f 92       	push	r0
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	0f 92       	push	r0
    24fa:	11 24       	eor	r1, r1
    24fc:	2f 93       	push	r18
    24fe:	3f 93       	push	r19
    2500:	4f 93       	push	r20
    2502:	5f 93       	push	r21
    2504:	6f 93       	push	r22
    2506:	7f 93       	push	r23
    2508:	8f 93       	push	r24
    250a:	9f 93       	push	r25
    250c:	af 93       	push	r26
    250e:	bf 93       	push	r27
    2510:	ef 93       	push	r30
    2512:	ff 93       	push	r31
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2514:	88 e5       	ldi	r24, 0x58	; 88
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	0e 94 80 04 	call	0x900	; 0x900 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <__vector_13>:
__vector_13():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    253e:	1f 92       	push	r1
    2540:	0f 92       	push	r0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	0f 92       	push	r0
    2546:	11 24       	eor	r1, r1
    2548:	2f 93       	push	r18
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	ef 93       	push	r30
    2550:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2552:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <Serial+0x10>
    2556:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <Serial+0x11>
    255a:	80 81       	ld	r24, Z
    255c:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <Serial+0x16>
    2560:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <Serial+0x17>
    2564:	82 fd       	sbrc	r24, 2
    2566:	1b c0       	rjmp	.+54     	; 0x259e <__vector_13+0x60>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2568:	90 81       	ld	r25, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    256a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <Serial+0x19>
    256e:	8f 5f       	subi	r24, 0xFF	; 255
    2570:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2572:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <Serial+0x1a>
    2576:	82 17       	cp	r24, r18
    2578:	41 f0       	breq	.+16     	; 0x258a <__vector_13+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    257a:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <Serial+0x19>
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	e8 5a       	subi	r30, 0xA8	; 168
    2582:	fd 4f       	sbci	r31, 0xFD	; 253
    2584:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2586:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <Serial+0x19>
__vector_13():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    258a:	ff 91       	pop	r31
    258c:	ef 91       	pop	r30
    258e:	9f 91       	pop	r25
    2590:	8f 91       	pop	r24
    2592:	2f 91       	pop	r18
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	1f 90       	pop	r1
    259c:	18 95       	reti
_rx_complete_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    259e:	80 81       	ld	r24, Z
    25a0:	f4 cf       	rjmp	.-24     	; 0x258a <__vector_13+0x4c>

000025a2 <__vector_7>:
__vector_7():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:81

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
    25a2:	1f 92       	push	r1
    25a4:	0f 92       	push	r0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	11 24       	eor	r1, r1
    25ac:	2f 93       	push	r18
    25ae:	3f 93       	push	r19
    25b0:	4f 93       	push	r20
    25b2:	5f 93       	push	r21
    25b4:	6f 93       	push	r22
    25b6:	7f 93       	push	r23
    25b8:	8f 93       	push	r24
    25ba:	9f 93       	push	r25
    25bc:	af 93       	push	r26
    25be:	bf 93       	push	r27
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	ef 93       	push	r30
    25c6:	ff 93       	push	r31
handle_interrupts():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:54

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    25c8:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Channel>
    25cc:	c0 91 19 03 	lds	r28, 0x0319	; 0x800319 <ServoCount>
    25d0:	d0 e0       	ldi	r29, 0x00	; 0
    25d2:	87 ff       	sbrs	r24, 7
    25d4:	1e c0       	rjmp	.+60     	; 0x2612 <__vector_7+0x70>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:55
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
    25d6:	1d bc       	out	0x2d, r1	; 45
    25d8:	1c bc       	out	0x2c, r1	; 44
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:61
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
    25da:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Channel>
    25de:	8f 5f       	subi	r24, 0xFF	; 255
    25e0:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <Channel>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:62
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    25e4:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Channel>
    25e8:	08 2e       	mov	r0, r24
    25ea:	00 0c       	add	r0, r0
    25ec:	99 0b       	sbc	r25, r25
    25ee:	8c 17       	cp	r24, r28
    25f0:	9d 07       	cpc	r25, r29
    25f2:	24 f4       	brge	.+8      	; 0x25fc <__vector_7+0x5a>
    25f4:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Channel>
    25f8:	8c 30       	cpi	r24, 0x0C	; 12
    25fa:	a4 f1       	brlt	.+104    	; 0x2664 <__vector_7+0xc2>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:69
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
    25fc:	8c b5       	in	r24, 0x2c	; 44
    25fe:	9d b5       	in	r25, 0x2d	; 45
    2600:	04 96       	adiw	r24, 0x04	; 4
    2602:	80 34       	cpi	r24, 0x40	; 64
    2604:	9c 49       	sbci	r25, 0x9C	; 156
    2606:	08 f4       	brcc	.+2      	; 0x260a <__vector_7+0x68>
    2608:	74 c0       	rjmp	.+232    	; 0x26f2 <__vector_7+0x150>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:72
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    260a:	8c b5       	in	r24, 0x2c	; 44
    260c:	9d b5       	in	r25, 0x2d	; 45
    260e:	04 96       	adiw	r24, 0x04	; 4
    2610:	72 c0       	rjmp	.+228    	; 0x26f6 <__vector_7+0x154>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:57
static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
    2612:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Channel>
    2616:	08 2e       	mov	r0, r24
    2618:	00 0c       	add	r0, r0
    261a:	99 0b       	sbc	r25, r25
    261c:	8c 17       	cp	r24, r28
    261e:	9d 07       	cpc	r25, r29
    2620:	e4 f6       	brge	.-72     	; 0x25da <__vector_7+0x38>
    2622:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <Channel>
    2626:	8e 2f       	mov	r24, r30
    2628:	ee 0f       	add	r30, r30
    262a:	99 0b       	sbc	r25, r25
    262c:	fc 01       	movw	r30, r24
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	e8 0f       	add	r30, r24
    2634:	f9 1f       	adc	r31, r25
    2636:	eb 50       	subi	r30, 0x0B	; 11
    2638:	fd 4f       	sbci	r31, 0xFD	; 253
    263a:	80 81       	ld	r24, Z
    263c:	86 ff       	sbrs	r24, 6
    263e:	cd cf       	rjmp	.-102    	; 0x25da <__vector_7+0x38>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:58
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
    2640:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <Channel>
    2644:	8e 2f       	mov	r24, r30
    2646:	ee 0f       	add	r30, r30
    2648:	99 0b       	sbc	r25, r25
    264a:	fc 01       	movw	r30, r24
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	e8 0f       	add	r30, r24
    2652:	f9 1f       	adc	r31, r25
    2654:	eb 50       	subi	r30, 0x0B	; 11
    2656:	fd 4f       	sbci	r31, 0xFD	; 253
    2658:	80 81       	ld	r24, Z
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	8f 73       	andi	r24, 0x3F	; 63
    265e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
    2662:	bb cf       	rjmp	.-138    	; 0x25da <__vector_7+0x38>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:63
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    2664:	2c b5       	in	r18, 0x2c	; 44
    2666:	3d b5       	in	r19, 0x2d	; 45
    2668:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <Channel>
    266c:	8e 2f       	mov	r24, r30
    266e:	ee 0f       	add	r30, r30
    2670:	99 0b       	sbc	r25, r25
    2672:	fc 01       	movw	r30, r24
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	e8 0f       	add	r30, r24
    267a:	f9 1f       	adc	r31, r25
    267c:	eb 50       	subi	r30, 0x0B	; 11
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	81 81       	ldd	r24, Z+1	; 0x01
    2682:	92 81       	ldd	r25, Z+2	; 0x02
    2684:	82 0f       	add	r24, r18
    2686:	93 1f       	adc	r25, r19
    2688:	9b bd       	out	0x2b, r25	; 43
    268a:	8a bd       	out	0x2a, r24	; 42
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:64
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    268c:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <Channel>
    2690:	8e 2f       	mov	r24, r30
    2692:	ee 0f       	add	r30, r30
    2694:	99 0b       	sbc	r25, r25
    2696:	fc 01       	movw	r30, r24
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	e8 0f       	add	r30, r24
    269e:	f9 1f       	adc	r31, r25
    26a0:	eb 50       	subi	r30, 0x0B	; 11
    26a2:	fd 4f       	sbci	r31, 0xFD	; 253
    26a4:	80 81       	ld	r24, Z
    26a6:	86 ff       	sbrs	r24, 6
    26a8:	11 c0       	rjmp	.+34     	; 0x26cc <__vector_7+0x12a>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:65
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    26aa:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <Channel>
    26ae:	8e 2f       	mov	r24, r30
    26b0:	ee 0f       	add	r30, r30
    26b2:	99 0b       	sbc	r25, r25
    26b4:	fc 01       	movw	r30, r24
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	e8 0f       	add	r30, r24
    26bc:	f9 1f       	adc	r31, r25
    26be:	eb 50       	subi	r30, 0x0B	; 11
    26c0:	fd 4f       	sbci	r31, 0xFD	; 253
    26c2:	80 81       	ld	r24, Z
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	8f 73       	andi	r24, 0x3F	; 63
    26c8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
__vector_7():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:83
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
}
    26cc:	ff 91       	pop	r31
    26ce:	ef 91       	pop	r30
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	bf 91       	pop	r27
    26d6:	af 91       	pop	r26
    26d8:	9f 91       	pop	r25
    26da:	8f 91       	pop	r24
    26dc:	7f 91       	pop	r23
    26de:	6f 91       	pop	r22
    26e0:	5f 91       	pop	r21
    26e2:	4f 91       	pop	r20
    26e4:	3f 91       	pop	r19
    26e6:	2f 91       	pop	r18
    26e8:	0f 90       	pop	r0
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	0f 90       	pop	r0
    26ee:	1f 90       	pop	r1
    26f0:	18 95       	reti
handle_interrupts():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:70
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    26f2:	80 e4       	ldi	r24, 0x40	; 64
    26f4:	9c e9       	ldi	r25, 0x9C	; 156
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:72
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    26f6:	9b bd       	out	0x2b, r25	; 43
    26f8:	8a bd       	out	0x2a, r24	; 42
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:73
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    26fa:	8f ef       	ldi	r24, 0xFF	; 255
    26fc:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <Channel>
    2700:	e5 cf       	rjmp	.-54     	; 0x26cc <__vector_7+0x12a>

00002702 <__vector_6>:
__vector_6():
F:\Arduino\projects\HPiECU/HPiECU.ino:313
    {
    T1OVF_Counter++;///RPM Meter
    }

ISR(TIMER1_CAPT_vect)
    {
    2702:	1f 92       	push	r1
    2704:	0f 92       	push	r0
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	0f 92       	push	r0
    270a:	11 24       	eor	r1, r1
    270c:	cf 92       	push	r12
    270e:	df 92       	push	r13
    2710:	ef 92       	push	r14
    2712:	ff 92       	push	r15
    2714:	2f 93       	push	r18
    2716:	3f 93       	push	r19
    2718:	4f 93       	push	r20
    271a:	5f 93       	push	r21
    271c:	6f 93       	push	r22
    271e:	7f 93       	push	r23
    2720:	8f 93       	push	r24
    2722:	9f 93       	push	r25
    2724:	af 93       	push	r26
    2726:	bf 93       	push	r27
    2728:	ef 93       	push	r30
    272a:	ff 93       	push	r31
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	00 d0       	rcall	.+0      	; 0x2732 <__vector_6+0x30>
    2732:	00 d0       	rcall	.+0      	; 0x2734 <__vector_6+0x32>
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
F:\Arduino\projects\HPiECU/HPiECU.ino:314
      volatile unsigned long  Freq = 0;
    2738:	19 82       	std	Y+1, r1	; 0x01
    273a:	1a 82       	std	Y+2, r1	; 0x02
    273c:	1b 82       	std	Y+3, r1	; 0x03
    273e:	1c 82       	std	Y+4, r1	; 0x04
F:\Arduino\projects\HPiECU/HPiECU.ino:315
    if (!MeasEnd)
    2740:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <MeasEnd>
    2744:	81 11       	cpse	r24, r1
    2746:	2a c0       	rjmp	.+84     	; 0x279c <__vector_6+0x9a>
F:\Arduino\projects\HPiECU/HPiECU.ino:317
        {
        input_Rissing_time = ICR1;
    2748:	86 b5       	in	r24, 0x26	; 38
    274a:	97 b5       	in	r25, 0x27	; 39
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	a0 e0       	ldi	r26, 0x00	; 0
    2750:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <input_Rissing_time>
    2754:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <input_Rissing_time+0x1>
    2758:	a0 93 bb 01 	sts	0x01BB, r26	; 0x8001bb <input_Rissing_time+0x2>
    275c:	b0 93 bc 01 	sts	0x01BC, r27	; 0x8001bc <input_Rissing_time+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:318
        MeasEnd = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <MeasEnd>
F:\Arduino\projects\HPiECU/HPiECU.ino:346
              //                  Freq = 0;
             //   RPM = 0;
        }
       // Freq = 0;
      //  RPM = 0;
    }
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	ff 91       	pop	r31
    2774:	ef 91       	pop	r30
    2776:	bf 91       	pop	r27
    2778:	af 91       	pop	r26
    277a:	9f 91       	pop	r25
    277c:	8f 91       	pop	r24
    277e:	7f 91       	pop	r23
    2780:	6f 91       	pop	r22
    2782:	5f 91       	pop	r21
    2784:	4f 91       	pop	r20
    2786:	3f 91       	pop	r19
    2788:	2f 91       	pop	r18
    278a:	ff 90       	pop	r15
    278c:	ef 90       	pop	r14
    278e:	df 90       	pop	r13
    2790:	cf 90       	pop	r12
    2792:	0f 90       	pop	r0
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	0f 90       	pop	r0
    2798:	1f 90       	pop	r1
    279a:	18 95       	reti
F:\Arduino\projects\HPiECU/HPiECU.ino:321
        {
        input_Rissing_time = ICR1;
        MeasEnd = 1;
        } else
        {
        input_Falling_time = ICR1;
    279c:	86 b5       	in	r24, 0x26	; 38
    279e:	97 b5       	in	r25, 0x27	; 39
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <input_Falling_time>
    27a8:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <input_Falling_time+0x1>
    27ac:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <input_Falling_time+0x2>
    27b0:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <input_Falling_time+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:322
        if (T1OVF_Counter)
    27b4:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <T1OVF_Counter>
    27b8:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <T1OVF_Counter+0x1>
    27bc:	89 2b       	or	r24, r25
    27be:	09 f4       	brne	.+2      	; 0x27c2 <__vector_6+0xc0>
    27c0:	6a c0       	rjmp	.+212    	; 0x2896 <__vector_6+0x194>
F:\Arduino\projects\HPiECU/HPiECU.ino:324
            {
            input_TOP_time = input_Falling_time + (65536 * T1OVF_Counter) - input_Rissing_time;
    27c2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <T1OVF_Counter>
    27c6:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <T1OVF_Counter+0x1>
    27ca:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <input_Falling_time>
    27ce:	50 91 b6 01 	lds	r21, 0x01B6	; 0x8001b6 <input_Falling_time+0x1>
    27d2:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <input_Falling_time+0x2>
    27d6:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <input_Falling_time+0x3>
    27da:	c0 90 b9 01 	lds	r12, 0x01B9	; 0x8001b9 <input_Rissing_time>
    27de:	d0 90 ba 01 	lds	r13, 0x01BA	; 0x8001ba <input_Rissing_time+0x1>
    27e2:	e0 90 bb 01 	lds	r14, 0x01BB	; 0x8001bb <input_Rissing_time+0x2>
    27e6:	f0 90 bc 01 	lds	r15, 0x01BC	; 0x8001bc <input_Rissing_time+0x3>
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	a0 e0       	ldi	r26, 0x00	; 0
    27ee:	dc 01       	movw	r26, r24
    27f0:	99 27       	eor	r25, r25
    27f2:	88 27       	eor	r24, r24
    27f4:	4c 19       	sub	r20, r12
    27f6:	5d 09       	sbc	r21, r13
    27f8:	6e 09       	sbc	r22, r14
    27fa:	7f 09       	sbc	r23, r15
    27fc:	84 0f       	add	r24, r20
    27fe:	95 1f       	adc	r25, r21
    2800:	a6 1f       	adc	r26, r22
    2802:	b7 1f       	adc	r27, r23
F:\Arduino\projects\HPiECU/HPiECU.ino:327
            } else
            {
            input_TOP_time = input_Falling_time - input_Rissing_time;
    2804:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <input_TOP_time>
    2808:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <input_TOP_time+0x1>
    280c:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <input_TOP_time+0x2>
    2810:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <input_TOP_time+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:329
            }
            if (input_TOP_time == 0)
    2814:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <input_TOP_time>
    2818:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <input_TOP_time+0x1>
    281c:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <input_TOP_time+0x2>
    2820:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <input_TOP_time+0x3>
    2824:	89 2b       	or	r24, r25
    2826:	8a 2b       	or	r24, r26
    2828:	8b 2b       	or	r24, r27
    282a:	71 f1       	breq	.+92     	; 0x2888 <__vector_6+0x186>
F:\Arduino\projects\HPiECU/HPiECU.ino:334
                {

                } else
                {
                Freq = (Timer1_prescaler_freq / input_TOP_time);
    282c:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <input_TOP_time>
    2830:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <input_TOP_time+0x1>
    2834:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <input_TOP_time+0x2>
    2838:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <input_TOP_time+0x3>
    283c:	60 e9       	ldi	r22, 0x90	; 144
    283e:	70 ed       	ldi	r23, 0xD0	; 208
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__udivmodsi4>
    2848:	29 83       	std	Y+1, r18	; 0x01
    284a:	3a 83       	std	Y+2, r19	; 0x02
    284c:	4b 83       	std	Y+3, r20	; 0x03
    284e:	5c 83       	std	Y+4, r21	; 0x04
F:\Arduino\projects\HPiECU/HPiECU.ino:336
                ///freq means revolution per second(RPS) and RPM Means Revolution per Minute
                RPM = Freq * 60;
    2850:	29 81       	ldd	r18, Y+1	; 0x01
    2852:	3a 81       	ldd	r19, Y+2	; 0x02
    2854:	4b 81       	ldd	r20, Y+3	; 0x03
    2856:	5c 81       	ldd	r21, Y+4	; 0x04
    2858:	ac e3       	ldi	r26, 0x3C	; 60
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	0e 94 a0 21 	call	0x4340	; 0x4340 <__muluhisi3>
    2860:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <RPM>
    2864:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <RPM+0x1>
    2868:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <RPM+0x2>
    286c:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <RPM+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:337
                RPS = Freq;
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	ab 81       	ldd	r26, Y+3	; 0x03
    2876:	bc 81       	ldd	r27, Y+4	; 0x04
    2878:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <RPS>
    287c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <RPS+0x1>
    2880:	a0 93 2d 02 	sts	0x022D, r26	; 0x80022d <RPS+0x2>
    2884:	b0 93 2e 02 	sts	0x022E, r27	; 0x80022e <RPS+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:339
                }
                T1OVF_Counter = 0;
    2888:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <T1OVF_Counter+0x1>
    288c:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <T1OVF_Counter>
F:\Arduino\projects\HPiECU/HPiECU.ino:340
                MeasEnd = 0; 
    2890:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <MeasEnd>
    2894:	68 cf       	rjmp	.-304    	; 0x2766 <__vector_6+0x64>
F:\Arduino\projects\HPiECU/HPiECU.ino:327
        if (T1OVF_Counter)
            {
            input_TOP_time = input_Falling_time + (65536 * T1OVF_Counter) - input_Rissing_time;
            } else
            {
            input_TOP_time = input_Falling_time - input_Rissing_time;
    2896:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <input_Falling_time>
    289a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <input_Falling_time+0x1>
    289e:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <input_Falling_time+0x2>
    28a2:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <input_Falling_time+0x3>
    28a6:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <input_Rissing_time>
    28aa:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <input_Rissing_time+0x1>
    28ae:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <input_Rissing_time+0x2>
    28b2:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <input_Rissing_time+0x3>
    28b6:	84 1b       	sub	r24, r20
    28b8:	95 0b       	sbc	r25, r21
    28ba:	a6 0b       	sbc	r26, r22
    28bc:	b7 0b       	sbc	r27, r23
    28be:	a2 cf       	rjmp	.-188    	; 0x2804 <__vector_6+0x102>

000028c0 <__vector_9>:
__vector_9():
F:\Arduino\projects\HPiECU/HPiECU.ino:308
};
*/
 volatile unsigned long  RPS = 0; ///For Debug RPM

ISR(TIMER1_OVF_vect)
    {
    28c0:	1f 92       	push	r1
    28c2:	0f 92       	push	r0
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	0f 92       	push	r0
    28c8:	11 24       	eor	r1, r1
    28ca:	8f 93       	push	r24
    28cc:	9f 93       	push	r25
F:\Arduino\projects\HPiECU/HPiECU.ino:309
    T1OVF_Counter++;///RPM Meter
    28ce:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <T1OVF_Counter>
    28d2:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <T1OVF_Counter+0x1>
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <T1OVF_Counter+0x1>
    28dc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <T1OVF_Counter>
F:\Arduino\projects\HPiECU/HPiECU.ino:310
    }
    28e0:	9f 91       	pop	r25
    28e2:	8f 91       	pop	r24
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <global constructors keyed to 65535_0_HPiECU.ino.cpp.o.2483>:
_GLOBAL__I_65535_0_HPiECU.ino.cpp.o.2483():
    28ee:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <Serial+0x3>
    28f2:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <Serial+0x2>
    28f6:	88 ee       	ldi	r24, 0xE8	; 232
    28f8:	93 e0       	ldi	r25, 0x03	; 3
    28fa:	a0 e0       	ldi	r26, 0x00	; 0
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <Serial+0x4>
    2902:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <Serial+0x5>
    2906:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <Serial+0x6>
    290a:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <Serial+0x7>
    290e:	8e e8       	ldi	r24, 0x8E	; 142
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <Serial+0x1>
    2916:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <Serial>
    291a:	80 e4       	ldi	r24, 0x40	; 64
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <Serial+0xd>
    2922:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <Serial+0xc>
    2926:	29 e2       	ldi	r18, 0x29	; 41
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	30 93 67 02 	sts	0x0267, r19	; 0x800267 <Serial+0xf>
    292e:	20 93 66 02 	sts	0x0266, r18	; 0x800266 <Serial+0xe>
    2932:	2b e2       	ldi	r18, 0x2B	; 43
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	30 93 69 02 	sts	0x0269, r19	; 0x800269 <Serial+0x11>
    293a:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <Serial+0x10>
    293e:	2a e2       	ldi	r18, 0x2A	; 42
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <Serial+0x13>
    2946:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <Serial+0x12>
    294a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <Serial+0x15>
    294e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <Serial+0x14>
    2952:	8c e2       	ldi	r24, 0x2C	; 44
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Serial+0x17>
    295a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Serial+0x16>
    295e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <Serial+0x19>
    2962:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Serial+0x1a>
    2966:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Serial+0x1b>
    296a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <Serial+0x1c>
    296e:	8c e0       	ldi	r24, 0x0C	; 12
    2970:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <thermocouple>
    2974:	81 e1       	ldi	r24, 0x11	; 17
    2976:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <thermocouple+0x2>
    297a:	8d e0       	ldi	r24, 0x0D	; 13
    297c:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <thermocouple+0x1>
    2980:	61 e0       	ldi	r22, 0x01	; 1
    2982:	81 e1       	ldi	r24, 0x11	; 17
    2984:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
    2988:	61 e0       	ldi	r22, 0x01	; 1
    298a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <thermocouple>
    298e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <thermocouple+0x1>
    2998:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <thermocouple+0x2>
    29a2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
    29a6:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <ServoCount>
    29aa:	8c 30       	cpi	r24, 0x0C	; 12
    29ac:	08 f5       	brcc	.+66     	; 0x29f0 <global constructors keyed to 65535_0_HPiECU.ino.cpp.o.2483+0x102>
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	98 0f       	add	r25, r24
    29b2:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <ServoCount>
    29b6:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <IdleServo>
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	fc 01       	movw	r30, r24
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	e8 0f       	add	r30, r24
    29c4:	f9 1f       	adc	r31, r25
    29c6:	eb 50       	subi	r30, 0x0B	; 11
    29c8:	fd 4f       	sbci	r31, 0xFD	; 253
    29ca:	88 eb       	ldi	r24, 0xB8	; 184
    29cc:	9b e0       	ldi	r25, 0x0B	; 11
    29ce:	92 83       	std	Z+2, r25	; 0x02
    29d0:	81 83       	std	Z+1, r24	; 0x01
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <eep_minimumIdleRPMAddress>
    29d8:	84 e0       	ldi	r24, 0x04	; 4
    29da:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <eep_minServoAngleAddress>
    29de:	86 e0       	ldi	r24, 0x06	; 6
    29e0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <eep_maxServoAngleAddress>
    29e4:	6e e9       	ldi	r22, 0x9E	; 158
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	8a e1       	ldi	r24, 0x1A	; 26
    29ea:	93 e0       	ldi	r25, 0x03	; 3
    29ec:	0c 94 c6 10 	jmp	0x218c	; 0x218c <String::String(char const*)>
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <IdleServo>
    29f6:	ed cf       	rjmp	.-38     	; 0x29d2 <global constructors keyed to 65535_0_HPiECU.ino.cpp.o.2483+0xe4>

000029f8 <main>:
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	28 97       	sbiw	r28, 0x08	; 8
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2a0c:	78 94       	sei
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
    2a0e:	83 b7       	in	r24, 0x33	; 51
    2a10:	83 60       	ori	r24, 0x03	; 3
    2a12:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
    2a14:	83 b7       	in	r24, 0x33	; 51
    2a16:	88 64       	ori	r24, 0x48	; 72
    2a18:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    2a1a:	89 b7       	in	r24, 0x39	; 57
    2a1c:	81 60       	ori	r24, 0x01	; 1
    2a1e:	89 bf       	out	0x39, r24	; 57
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2a20:	92 e0       	ldi	r25, 0x02	; 2
    2a22:	9e bd       	out	0x2e, r25	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2a24:	8e b5       	in	r24, 0x2e	; 46
    2a26:	81 60       	ori	r24, 0x01	; 1
    2a28:	8e bd       	out	0x2e, r24	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2a2a:	8f b5       	in	r24, 0x2f	; 47
    2a2c:	81 60       	ori	r24, 0x01	; 1
    2a2e:	8f bd       	out	0x2f, r24	; 47
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    2a30:	85 b5       	in	r24, 0x25	; 37
    2a32:	84 60       	ori	r24, 0x04	; 4
    2a34:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    2a36:	85 b5       	in	r24, 0x25	; 37
    2a38:	80 64       	ori	r24, 0x40	; 64
    2a3a:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    2a3c:	87 e8       	ldi	r24, 0x87	; 135
    2a3e:	86 b9       	out	0x06, r24	; 6
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
    2a40:	1a b8       	out	0x0a, r1	; 10
begin():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2a42:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <Serial+0x10>
    2a46:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <Serial+0x11>
    2a4a:	90 83       	st	Z, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2a4c:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <Serial+0xc>
    2a50:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <Serial+0xd>
    2a54:	10 82       	st	Z, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    2a56:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <Serial+0xe>
    2a5a:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <Serial+0xf>
    2a5e:	80 e1       	ldi	r24, 0x10	; 16
    2a60:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    2a62:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <Serial+0x18>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2a66:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <Serial+0x14>
    2a6a:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <Serial+0x15>
    2a6e:	86 e8       	ldi	r24, 0x86	; 134
    2a70:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2a72:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <Serial+0x12>
    2a76:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <Serial+0x13>
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 69       	ori	r24, 0x98	; 152
    2a7e:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    2a80:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <Serial+0x12>
    2a84:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <Serial+0x13>
    2a88:	80 81       	ld	r24, Z
    2a8a:	8f 7d       	andi	r24, 0xDF	; 223
    2a8c:	80 83       	st	Z, r24
analogReference():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:41
void analogReference(uint8_t mode)
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  analog_reference = mode;
    2a8e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <analog_reference>
setup():
F:\Arduino\projects\HPiECU/HPiECU.ino:353
{

  Serial.begin(115200);
  analogReference(EXTERNAL);
  //Outputs
  pinMode(headlight_OutPin,OUTPUT);
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:354
  pinMode(backLeftBlink_OutPin,OUTPUT);
    2a9a:	61 e0       	ldi	r22, 0x01	; 1
    2a9c:	85 e0       	ldi	r24, 0x05	; 5
    2a9e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:355
  pinMode(frontLeftBlink_OutPin,OUTPUT);
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:356
  pinMode(backRightBlink_OutPin,OUTPUT);
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	87 e0       	ldi	r24, 0x07	; 7
    2aae:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:357
  pinMode(frontRightBlink_OutPin,OUTPUT);
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	84 e0       	ldi	r24, 0x04	; 4
    2ab6:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:358
  pinMode(LeftHorn_OutPin,OUTPUT);
    2aba:	61 e0       	ldi	r22, 0x01	; 1
    2abc:	86 e0       	ldi	r24, 0x06	; 6
    2abe:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:359
  pinMode(RightHorn_OutPin,OUTPUT);
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	89 e1       	ldi	r24, 0x19	; 25
    2ac6:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:360
  pinMode(blueS_OutPin,OUTPUT);
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	82 e0       	ldi	r24, 0x02	; 2
    2ace:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:361
  pinMode(RedS_OutPin,OUTPUT);
    2ad2:	61 e0       	ldi	r22, 0x01	; 1
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:362
  pinMode(AudioSwitcher_OutPin,OUTPUT);
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	88 e1       	ldi	r24, 0x18	; 24
    2ade:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:365
  //pinMode(ThermoCS_OutPin, OUTPUT);
 // pinMode(ThermoSCK_OutPin, OUTPUT);
  pinMode(SERVO_OutPin, OUTPUT);
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	8f e1       	ldi	r24, 0x1F	; 31
    2ae6:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:366
  pinMode(CDI_ShutDown_OutPin, OUTPUT);
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	8e e1       	ldi	r24, 0x1E	; 30
    2aee:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:367
  pinMode(ENGINE_Start_OutPin, OUTPUT);
    2af2:	61 e0       	ldi	r22, 0x01	; 1
    2af4:	80 e1       	ldi	r24, 0x10	; 16
    2af6:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:368
  pinMode(Switch_OutPin, OUTPUT);
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	8f e0       	ldi	r24, 0x0F	; 15
    2afe:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:369
  pinMode(Piezo_OutPin, OUTPUT);
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	8c e1       	ldi	r24, 0x1C	; 28
    2b06:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:371
  ///Inputs
  pinMode(LturnINpin, INPUT);
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	8a e1       	ldi	r24, 0x1A	; 26
    2b0e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:372
  pinMode(RturnINpin, INPUT);
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	8b e1       	ldi	r24, 0x1B	; 27
    2b16:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:373
  pinMode(HEADLightINpin, INPUT);
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	82 e1       	ldi	r24, 0x12	; 18
    2b1e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:375
  //pinMode(ThermoSO_InPin, INPUT);
  pinMode(HornINpin, INPUT);
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	8a e0       	ldi	r24, 0x0A	; 10
    2b26:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:376
  pinMode(VBattINpin, INPUT);
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	8d e1       	ldi	r24, 0x1D	; 29
    2b2e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:377
  pinMode(ShakeSense_INpin, INPUT);
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	8b e0       	ldi	r24, 0x0B	; 11
    2b36:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:378
  pinMode(FuelGauge_IN, INPUT);
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	81 e1       	ldi	r24, 0x11	; 17
    2b3e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:379
  pinMode(RemoteLSINpin, INPUT);
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	83 e1       	ldi	r24, 0x13	; 19
    2b46:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:380
  pinMode(RemoteUnlockINpin, INPUT);
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	84 e1       	ldi	r24, 0x14	; 20
    2b4e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:381
  pinMode(RemoteStartINpin, INPUT);
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	86 e1       	ldi	r24, 0x16	; 22
    2b56:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
F:\Arduino\projects\HPiECU/HPiECU.ino:382
  pinMode(RemoteShutDownINpin, INPUT);
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	85 e1       	ldi	r24, 0x15	; 21
    2b5e:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
attachInterrupt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    2b62:	88 ea       	ldi	r24, 0xA8	; 168
    2b64:	9f e0       	ldi	r25, 0x0F	; 15
    2b66:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <intFunc+0x1>
    2b6a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <intFunc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:189

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
      #elif defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) \
      || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega162__)
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    2b6e:	85 b7       	in	r24, 0x35	; 53
    2b70:	8c 7f       	andi	r24, 0xFC	; 252
    2b72:	81 60       	ori	r24, 0x01	; 1
    2b74:	85 bf       	out	0x35, r24	; 53
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:190
          GICR |= (1 << INT0);
    2b76:	8b b7       	in	r24, 0x3b	; 59
    2b78:	80 64       	ori	r24, 0x40	; 64
    2b7a:	8b bf       	out	0x3b, r24	; 59
attach():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:240
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
  if(this->servoIndex < MAX_SERVOS ) {
    2b7c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <IdleServo>
    2b80:	8c 30       	cpi	r24, 0x0C	; 12
    2b82:	08 f0       	brcs	.+2      	; 0x2b86 <main+0x18e>
    2b84:	4e c0       	rjmp	.+156    	; 0x2c22 <main+0x22a>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:241
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
    2b86:	61 e0       	ldi	r22, 0x01	; 1
    2b88:	8f e1       	ldi	r24, 0x1F	; 31
    2b8a:	0e 94 26 01 	call	0x24c	; 0x24c <pinMode>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:242
    servos[this->servoIndex].Pin.nbr = pin;
    2b8e:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <IdleServo>
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	f9 01       	movw	r30, r18
    2b98:	ee 0f       	add	r30, r30
    2b9a:	ff 1f       	adc	r31, r31
    2b9c:	e2 0f       	add	r30, r18
    2b9e:	f3 1f       	adc	r31, r19
    2ba0:	eb 50       	subi	r30, 0x0B	; 11
    2ba2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba4:	90 81       	ld	r25, Z
    2ba6:	90 7c       	andi	r25, 0xC0	; 192
    2ba8:	9f 61       	ori	r25, 0x1F	; 31
    2baa:	90 83       	st	Z, r25
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:244
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 us
    2bac:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <IdleServo+0x1>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:245
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    2bb0:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <IdleServo+0x2>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:247
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    2bb4:	2c e0       	ldi	r18, 0x0C	; 12
    2bb6:	62 2f       	mov	r22, r18
    2bb8:	0e 94 4a 23 	call	0x4694	; 0x4694 <__udivmodqi4>
isTimerActive():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:214

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
    2bbc:	82 9f       	mul	r24, r18
    2bbe:	b0 01       	movw	r22, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	ab 01       	movw	r20, r22
    2bc8:	42 0f       	add	r20, r18
    2bca:	53 1f       	adc	r21, r19
    2bcc:	fa 01       	movw	r30, r20
    2bce:	ee 0f       	add	r30, r30
    2bd0:	ff 1f       	adc	r31, r31
    2bd2:	e4 0f       	add	r30, r20
    2bd4:	f5 1f       	adc	r31, r21
    2bd6:	eb 50       	subi	r30, 0x0B	; 11
    2bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bda:	90 81       	ld	r25, Z
    2bdc:	96 fd       	sbrc	r25, 6
    2bde:	13 c0       	rjmp	.+38     	; 0x2c06 <main+0x20e>
    2be0:	2f 5f       	subi	r18, 0xFF	; 255
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:213
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    2be4:	2c 30       	cpi	r18, 0x0C	; 12
    2be6:	31 05       	cpc	r19, r1
    2be8:	71 f7       	brne	.-36     	; 0x2bc6 <main+0x1ce>
initISR():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:127


static void initISR(timer16_Sequence_t timer)
{
#if defined (_useTimer1)
  if(timer == _timer1) {
    2bea:	81 11       	cpse	r24, r1
    2bec:	0c c0       	rjmp	.+24     	; 0x2c06 <main+0x20e>
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:128
    TCCR1A = 0;             // normal counting mode
    2bee:	1f bc       	out	0x2f, r1	; 47
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:129
    TCCR1B |= _BV(CS11);     // set prescaler of 8
    2bf0:	8e b5       	in	r24, 0x2e	; 46
    2bf2:	82 60       	ori	r24, 0x02	; 2
    2bf4:	8e bd       	out	0x2e, r24	; 46
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:130
    TCNT1 = 0;              // clear the timer count
    2bf6:	1d bc       	out	0x2d, r1	; 45
    2bf8:	1c bc       	out	0x2c, r1	; 44
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:132
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__) ||defined (__AVR_ATmega16__)|| defined(__AVR_ATmega32__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts
    2bfa:	88 b7       	in	r24, 0x38	; 56
    2bfc:	80 61       	ori	r24, 0x10	; 16
    2bfe:	88 bf       	out	0x38, r24	; 56
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:133
    TIMSK |= _BV(OCIE1A) ;  // enable the output compare interrupt
    2c00:	89 b7       	in	r24, 0x39	; 57
    2c02:	80 61       	ori	r24, 0x10	; 16
    2c04:	89 bf       	out	0x39, r24	; 57
attach():
C:\Users\Hosein\AppData\Local\Arduino15\libraries\Servo\src\avr/Servo.cpp:250
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    2c06:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <IdleServo>
    2c0a:	8e 2f       	mov	r24, r30
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	fc 01       	movw	r30, r24
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	e8 0f       	add	r30, r24
    2c16:	f9 1f       	adc	r31, r25
    2c18:	eb 50       	subi	r30, 0x0B	; 11
    2c1a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c1c:	80 81       	ld	r24, Z
    2c1e:	80 64       	ori	r24, 0x40	; 64
    2c20:	80 83       	st	Z, r24
setup():
F:\Arduino\projects\HPiECU/HPiECU.ino:388
  ///Horn Button Listener
  attachInterrupt(digitalPinToInterrupt(HornINpin), checkHornKey, CHANGE);
//servo
  IdleServo.attach(SERVO_OutPin);
  //RPM Meter 
  TCCR1A = 0;           // Init Timer1A
    2c22:	1f bc       	out	0x2f, r1	; 47
F:\Arduino\projects\HPiECU/HPiECU.ino:389
  TCCR1B = 0;           // Init Timer1B
    2c24:	1e bc       	out	0x2e, r1	; 46
F:\Arduino\projects\HPiECU/HPiECU.ino:390
  TCCR1B |= B11000011;  // (B11000010) Internal Clock, Prescaler = 16, ICU Filter EN, ICU Pin RISING
    2c26:	8e b5       	in	r24, 0x2e	; 46
    2c28:	83 6c       	ori	r24, 0xC3	; 195
    2c2a:	8e bd       	out	0x2e, r24	; 46
F:\Arduino\projects\HPiECU/HPiECU.ino:391
  TIMERMASK |= B00100001;  // Enable Timer OVF & CAPT Interrupts
    2c2c:	89 b7       	in	r24, 0x39	; 57
    2c2e:	81 62       	ori	r24, 0x21	; 33
    2c30:	89 bf       	out	0x39, r24	; 57
F:\Arduino\projects\HPiECU/HPiECU.ino:397
  ////SERVO

  //
  //Blink Lights For Test!
  
  digitalWrite(headlight_OutPin, HIGH);
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:398
  digitalWrite(frontLeftBlink_OutPin, HIGH);
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:399
  digitalWrite(frontRightBlink_OutPin, HIGH);
    2c42:	61 e0       	ldi	r22, 0x01	; 1
    2c44:	84 e0       	ldi	r24, 0x04	; 4
    2c46:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:400
  digitalWrite(backLeftBlink_OutPin, HIGH);
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	85 e0       	ldi	r24, 0x05	; 5
    2c4e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:401
  digitalWrite(backRightBlink_OutPin, HIGH);
    2c52:	61 e0       	ldi	r22, 0x01	; 1
    2c54:	87 e0       	ldi	r24, 0x07	; 7
    2c56:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:402
  delay(1000);
    2c5a:	68 ee       	ldi	r22, 0xE8	; 232
    2c5c:	73 e0       	ldi	r23, 0x03	; 3
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:403
  digitalWrite(headlight_OutPin, LOW);
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:404
  digitalWrite(frontLeftBlink_OutPin, LOW);
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:405
  digitalWrite(frontRightBlink_OutPin, LOW);
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	84 e0       	ldi	r24, 0x04	; 4
    2c7a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:406
  digitalWrite(backLeftBlink_OutPin, LOW);
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	85 e0       	ldi	r24, 0x05	; 5
    2c82:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:407
  digitalWrite(backRightBlink_OutPin, LOW);
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	87 e0       	ldi	r24, 0x07	; 7
    2c8a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:408
Serial.println(OutSerial_STARTUP_cmd);
    2c8e:	8e ed       	ldi	r24, 0xDE	; 222
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 b0 06 	call	0xd60	; 0xd60 <Print::println(char const*) [clone .constprop.49]>
adjustIdleSpeed():
F:\Arduino\projects\HPiECU/HPiECU.ino:1676
            //warm temperature
            SetIdleRPM(160);
        } else if (temperature > 35)
        {
            SetIdleRPM(eep_minimumIdleRPM);
            RPMadjusted = true;
    2c96:	01 e0       	ldi	r16, 0x01	; 1
map():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WMath.cpp:54
    2c98:	44 24       	eor	r4, r4
    2c9a:	4a 94       	dec	r4
    2c9c:	83 e0       	ldi	r24, 0x03	; 3
    2c9e:	58 2e       	mov	r5, r24
    2ca0:	61 2c       	mov	r6, r1
    2ca2:	71 2c       	mov	r7, r1
adjustIdleSpeed():
F:\Arduino\projects\HPiECU/HPiECU.ino:1676
    2ca4:	11 e0       	ldi	r17, 0x01	; 1
detachInterrupt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:414
          EIMSK &= ~(1 << INT0);
          break;

      #endif
    }
    intFunc[interruptNum] = nothing;
    2ca6:	9b ea       	ldi	r25, 0xAB	; 171
    2ca8:	29 2e       	mov	r2, r25
    2caa:	93 e0       	ldi	r25, 0x03	; 3
    2cac:	39 2e       	mov	r3, r25
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:417
void loop() 
{
 /// EEPROM DATA
///Blink Delay & Minimum Idle RPM + Servo Angle
//Serial.println(RPS);
    if (freshstart == true)
    2cae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <freshstart>
    2cb2:	88 23       	and	r24, r24
    2cb4:	11 f1       	breq	.+68     	; 0x2cfa <main+0x302>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <eeprom_read_byte>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:426
        firstcheck = EEPROM[add];
        



        if (firstcheck != EEP_FIRST_CHECK_FLAG)
    2cbe:	82 30       	cpi	r24, 0x02	; 2
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <main+0x2cc>
    2cc2:	4c c0       	rjmp	.+152    	; 0x2d5c <main+0x364>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <eeprom_read_byte>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.16():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    2ccc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <eep_blinkinterval>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <eeprom_read_byte>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.16():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    2cd8:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <eep_blinkinterval+0x1>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:443
            delay(5);
            EEPROM.put(eep_maxServoAngleAddress, eep_maxServoAngle);
        } else
        {
            EEPROM.get(eep_blinkintervalAddress, eep_blinkinterval);
            delay(5);
    2cdc:	65 e0       	ldi	r22, 0x05	; 5
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:444
            EEPROM.get(eep_minimumIdleRPMAddress, eep_minimumIdleRPM);
    2ce8:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <eep_minimumIdleRPMAddress>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <eeprom_read_byte>
_ZN11EEPROMClass3getIhEERT_iS2_.isra.17():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    2cf2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <eep_minimumIdleRPM>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:446
        }
        freshstart = false;
    2cf6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <freshstart>
F:\Arduino\projects\HPiECU/HPiECU.ino:451
    }
 //
 //Serial.println(millis());
    /// read Serial Commands
    if (Serial.available())
    2cfa:	88 e5       	ldi	r24, 0x58	; 88
    2cfc:	92 e0       	ldi	r25, 0x02	; 2
    2cfe:	0e 94 60 04 	call	0x8c0	; 0x8c0 <HardwareSerial::available()>
    2d02:	89 2b       	or	r24, r25
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <main+0x310>
    2d06:	a5 c0       	rjmp	.+330    	; 0x2e52 <main+0x45a>
readStringUntil():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:245
  return ret;
}

String Stream::readStringUntil(char terminator)
{
  String ret;
    2d08:	6e e9       	ldi	r22, 0x9E	; 158
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	01 96       	adiw	r24, 0x01	; 1
    2d10:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:246
  int c = timedRead();
    2d14:	0e 94 20 04 	call	0x840	; 0x840 <Stream::timedRead() [clone .constprop.6]>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:247
  while (c >= 0 && c != terminator)
    2d18:	97 fd       	sbrc	r25, 7
    2d1a:	5e c0       	rjmp	.+188    	; 0x2dd8 <main+0x3e0>
    2d1c:	8a 30       	cpi	r24, 0x0A	; 10
    2d1e:	91 05       	cpc	r25, r1
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <main+0x32c>
    2d22:	5a c0       	rjmp	.+180    	; 0x2dd8 <main+0x3e0>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Stream.cpp:249
  {
    ret += (char)c;
    2d24:	8f 83       	std	Y+7, r24	; 0x07
concat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:285

unsigned char String::concat(char c)
{
  char buf[2];
  buf[0] = c;
  buf[1] = 0;
    2d26:	18 86       	std	Y+8, r1	; 0x08
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:266
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    2d28:	ed 80       	ldd	r14, Y+5	; 0x05
    2d2a:	fe 80       	ldd	r15, Y+6	; 0x06
    2d2c:	2f ef       	ldi	r18, 0xFF	; 255
    2d2e:	e2 1a       	sub	r14, r18
    2d30:	f2 0a       	sbc	r15, r18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:269
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    2d32:	b7 01       	movw	r22, r14
    2d34:	ce 01       	movw	r24, r28
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	0e 94 73 10 	call	0x20e6	; 0x20e6 <String::reserve(unsigned int)>
    2d3c:	88 23       	and	r24, r24
    2d3e:	51 f3       	breq	.-44     	; 0x2d14 <main+0x31c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:270
  strcpy(buffer + len, cstr);
    2d40:	29 81       	ldd	r18, Y+1	; 0x01
    2d42:	3a 81       	ldd	r19, Y+2	; 0x02
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	be 01       	movw	r22, r28
    2d4a:	69 5f       	subi	r22, 0xF9	; 249
    2d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4e:	82 0f       	add	r24, r18
    2d50:	93 1f       	adc	r25, r19
    2d52:	0e 94 57 25 	call	0x4aae	; 0x4aae <strcpy>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:271
  len = newlen;
    2d56:	fe 82       	std	Y+6, r15	; 0x06
    2d58:	ed 82       	std	Y+5, r14	; 0x05
    2d5a:	dc cf       	rjmp	.-72     	; 0x2d14 <main+0x31c>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:429


        if (firstcheck != EEP_FIRST_CHECK_FLAG)
        {
            //Blink Interval
            EEPROM.put(add, EEP_FIRST_CHECK_FLAG);
    2d5c:	68 e8       	ldi	r22, 0x88	; 136
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	0e 94 5e 11 	call	0x22bc	; 0x22bc <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.13]>
F:\Arduino\projects\HPiECU/HPiECU.ino:430
            delay(5);
    2d68:	65 e0       	ldi	r22, 0x05	; 5
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:431
            EEPROM.put(eep_blinkintervalAddress, eep_blinkinterval);
    2d74:	6e e7       	ldi	r22, 0x7E	; 126
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.13]>
F:\Arduino\projects\HPiECU/HPiECU.ino:432
            delay(5);
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:434
            //IDLE RPM
            EEPROM.put(eep_minimumIdleRPMAddress, eep_minimumIdleRPM);
    2d8c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <eep_minimumIdleRPMAddress>
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass3putIhEERKT_iS3_.isra.14():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:140
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    2d96:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <eep_minimumIdleRPM>
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	0e 94 45 11 	call	0x228a	; 0x228a <EERef::update(unsigned char)>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:436
            //SERVO Angle
            delay(5);
    2da2:	65 e0       	ldi	r22, 0x05	; 5
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:437
            EEPROM.put(eep_minServoAngleAddress, eep_minServoAngle);
    2dae:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <eep_minServoAngleAddress>
    2db2:	61 e4       	ldi	r22, 0x41	; 65
    2db4:	72 e0       	ldi	r23, 0x02	; 2
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.13]>
F:\Arduino\projects\HPiECU/HPiECU.ino:438
            delay(5);
    2dbc:	65 e0       	ldi	r22, 0x05	; 5
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:439
            EEPROM.put(eep_maxServoAngleAddress, eep_maxServoAngle);
    2dc8:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <eep_maxServoAngleAddress>
    2dcc:	6b e7       	ldi	r22, 0x7B	; 123
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.13]>
    2dd6:	8f cf       	rjmp	.-226    	; 0x2cf6 <main+0x2fe>
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:196
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
  if (buffer) {
    2dd8:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <input>
    2ddc:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <input+0x1>
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <main+0x3ee>
    2de4:	00 c5       	rjmp	.+2560   	; 0x37e6 <main+0xdee>
    2de6:	69 81       	ldd	r22, Y+1	; 0x01
    2de8:	7a 81       	ldd	r23, Y+2	; 0x02
_ZNK6StringcvMS_KFvvEEv.isra.0():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    2dea:	61 15       	cp	r22, r1
    2dec:	71 05       	cpc	r23, r1
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <main+0x3fa>
    2df0:	f8 c4       	rjmp	.+2544   	; 0x37e2 <main+0xdea>
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
    2df2:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <input+0x2>
    2df6:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <input+0x3>
    2dfa:	2d 81       	ldd	r18, Y+5	; 0x05
    2dfc:	3e 81       	ldd	r19, Y+6	; 0x06
    2dfe:	42 17       	cp	r20, r18
    2e00:	53 07       	cpc	r21, r19
    2e02:	08 f4       	brcc	.+2      	; 0x2e06 <main+0x40e>
    2e04:	ee c4       	rjmp	.+2524   	; 0x37e2 <main+0xdea>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
    2e06:	0e 94 57 25 	call	0x4aae	; 0x4aae <strcpy>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <input+0x5>
    2e12:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <input+0x4>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
    2e16:	1e 82       	std	Y+6, r1	; 0x06
    2e18:	1d 82       	std	Y+5, r1	; 0x05
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:453
 //
 //Serial.println(millis());
    /// read Serial Commands
    if (Serial.available())
    {
        input = Serial.readStringUntil('\n');
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
F:\Arduino\projects\HPiECU/HPiECU.ino:454
        delay(1);
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:58
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    2e2e:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <input+0x4>
    2e32:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <input+0x5>
    2e36:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <input>
    2e3a:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <input+0x1>
    2e3e:	88 e5       	ldi	r24, 0x58	; 88
    2e40:	92 e0       	ldi	r25, 0x02	; 2
    2e42:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Print::write(unsigned char const*, unsigned int)>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:456
        Serial.print(input);
        delay(1);
    2e46:	61 e0       	ldi	r22, 0x01	; 1
    2e48:	70 e0       	ldi	r23, 0x00	; 0
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:461
    }


 ///// RPM Adjusting
 if (RPMadjusted == false) adjustIdleSpeed();
    2e52:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <RPMadjusted>
    2e56:	81 11       	cpse	r24, r1
    2e58:	2f c0       	rjmp	.+94     	; 0x2eb8 <main+0x4c0>
GetEngineTemp():
F:\Arduino\projects\HPiECU/HPiECU.ino:1601
/// </summary>
/// <returns>Current Engine's Temperature</returns>
float GetEngineTemp()
{ 
   // Serial.println(thermocouple.readCelsius());
   return thermocouple.readCelsius();
    2e5a:	0e 94 14 03 	call	0x628	; 0x628 <MAX6675::readCelsius() [clone .constprop.28]>
    2e5e:	6b 01       	movw	r12, r22
    2e60:	7c 01       	movw	r14, r24
adjustIdleSpeed():
F:\Arduino\projects\HPiECU/HPiECU.ino:1640
void adjustIdleSpeed()
{
    uint16_t  temperature = GetEngineTemp();
    

    if ((millis() - idleSpeedPrevMillis) >= 1000)
    2e62:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    2e66:	80 90 fa 01 	lds	r8, 0x01FA	; 0x8001fa <idleSpeedPrevMillis>
    2e6a:	90 90 fb 01 	lds	r9, 0x01FB	; 0x8001fb <idleSpeedPrevMillis+0x1>
    2e6e:	a0 90 fc 01 	lds	r10, 0x01FC	; 0x8001fc <idleSpeedPrevMillis+0x2>
    2e72:	b0 90 fd 01 	lds	r11, 0x01FD	; 0x8001fd <idleSpeedPrevMillis+0x3>
    2e76:	68 19       	sub	r22, r8
    2e78:	79 09       	sbc	r23, r9
    2e7a:	8a 09       	sbc	r24, r10
    2e7c:	9b 09       	sbc	r25, r11
    2e7e:	68 3e       	cpi	r22, 0xE8	; 232
    2e80:	73 40       	sbci	r23, 0x03	; 3
    2e82:	81 05       	cpc	r24, r1
    2e84:	91 05       	cpc	r25, r1
    2e86:	c0 f0       	brcs	.+48     	; 0x2eb8 <main+0x4c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1637
/// and warms engine in cool temps. 
/// </summary>
/// 
void adjustIdleSpeed()
{
    uint16_t  temperature = GetEngineTemp();
    2e88:	c7 01       	movw	r24, r14
    2e8a:	b6 01       	movw	r22, r12
    2e8c:	0e 94 01 23 	call	0x4602	; 0x4602 <__fixunssfsi>
    2e90:	4b 01       	movw	r8, r22
F:\Arduino\projects\HPiECU/HPiECU.ino:1642
    

    if ((millis() - idleSpeedPrevMillis) >= 1000)
    {
        idleSpeedPrevMillis = millis();
    2e92:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    2e96:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <idleSpeedPrevMillis>
    2e9a:	70 93 fb 01 	sts	0x01FB, r23	; 0x8001fb <idleSpeedPrevMillis+0x1>
    2e9e:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <idleSpeedPrevMillis+0x2>
    2ea2:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <idleSpeedPrevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1645
//Serial.println("tmp millis");

        if (temperature < 5)
    2ea6:	85 e0       	ldi	r24, 0x05	; 5
    2ea8:	88 16       	cp	r8, r24
    2eaa:	91 04       	cpc	r9, r1
    2eac:	08 f0       	brcs	.+2      	; 0x2eb0 <main+0x4b8>
    2eae:	b2 c4       	rjmp	.+2404   	; 0x3814 <main+0xe1c>
F:\Arduino\projects\HPiECU/HPiECU.ino:1648
        {
            // Ice
            SetIdleRPM(280);
    2eb0:	88 e1       	ldi	r24, 0x18	; 24
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
F:\Arduino\projects\HPiECU/HPiECU.ino:1652
        } else if (temperature >= 5 && temperature < 10)
        {
            // very cold temperature near ice
            SetIdleRPM(250);
    2eb4:	0e 94 a9 05 	call	0xb52	; 0xb52 <SetIdleRPM(unsigned int)>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:467




    //headlight
  if (digitalRead(HEADLightINpin) == HIGH)
    2eb8:	82 e1       	ldi	r24, 0x12	; 18
    2eba:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <main+0x4cc>
    2ec2:	df c4       	rjmp	.+2494   	; 0x3882 <main+0xe8a>
F:\Arduino\projects\HPiECU/HPiECU.ino:469
   {
    digitalWrite(headlight_OutPin, HIGH);
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:470
    headlightFlag = true;
    2ecc:	10 93 3f 02 	sts	0x023F, r17	; 0x80023f <headlightFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:471
    if (headlight_SerialOut_flag == false)
    2ed0:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <headlight_SerialOut_flag>
    2ed4:	81 11       	cpse	r24, r1
    2ed6:	06 c0       	rjmp	.+12     	; 0x2ee4 <main+0x4ec>
F:\Arduino\projects\HPiECU/HPiECU.ino:473
    {
    headlight_SerialOut_flag = true;//Set The Flag
    2ed8:	10 93 3e 02 	sts	0x023E, r17	; 0x80023e <headlight_SerialOut_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:474
    Serial.print(OutSerial_HeadLightIsON_cmd);
    2edc:	8a ee       	ldi	r24, 0xEA	; 234
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:494
      }


    }
/////left turn
  if (digitalRead(LturnINpin) == HIGH )
    2ee4:	8a e1       	ldi	r24, 0x1A	; 26
    2ee6:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <main+0x4f8>
    2eee:	e0 c4       	rjmp	.+2496   	; 0x38b0 <main+0xeb8>
F:\Arduino\projects\HPiECU/HPiECU.ino:496
  {
      if(blinkInterval <=0) blinkInterval = EEPROM.read(eep_blinkintervalAddress);
    2ef0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <eep_blinkinterval>
    2ef4:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <eep_blinkinterval+0x1>
    2ef8:	18 16       	cp	r1, r24
    2efa:	19 06       	cpc	r1, r25
    2efc:	4c f0       	brlt	.+18     	; 0x2f10 <main+0x518>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <eeprom_read_byte>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:496
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <eep_blinkinterval+0x1>
    2f0c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <eep_blinkinterval>
F:\Arduino\projects\HPiECU/HPiECU.ino:497
      Rightfrontblinkerstate = false;//turn off
    2f10:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <Rightfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:498
      Rightbackblinkerstate = false;// the others
    2f14:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <Rightbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:499
      blinkdance = false;//off
    2f18:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <blinkdance>
F:\Arduino\projects\HPiECU/HPiECU.ino:500
      multiblink = false;//off
    2f1c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:503
      //

       blinkerstate = true;
    2f20:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:504
    Leftfrontblinkerstate = true;
    2f24:	10 93 38 02 	sts	0x0238, r17	; 0x800238 <Leftfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:505
    Leftbackblinkerstate = true;
    2f28:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <Leftbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:506
     lturnflag = true;
    2f2c:	10 93 36 02 	sts	0x0236, r17	; 0x800236 <lturnflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:507
           if (lturn_SerialOut_flag == false)//Just Update UI One Time To Prevent From Unnecessary Calls
    2f30:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <lturn_SerialOut_flag>
    2f34:	81 11       	cpse	r24, r1
    2f36:	0e c0       	rjmp	.+28     	; 0x2f54 <main+0x55c>
F:\Arduino\projects\HPiECU/HPiECU.ino:509
          {
            lturn_SerialOut_flag = true;//SetFlag
    2f38:	10 93 35 02 	sts	0x0235, r17	; 0x800235 <lturn_SerialOut_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:510
            Serial.print(OutSerial_AllBlinkersIsOFF_cmd);   //UpdateUI  
    2f3c:	82 ef       	ldi	r24, 0xF2	; 242
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:511
            delayMicroseconds(5);
    2f44:	85 e0       	ldi	r24, 0x05	; 5
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <delayMicroseconds>
F:\Arduino\projects\HPiECU/HPiECU.ino:512
           Serial.print(OutSerial_LeftTurnIsON_cmd);   //UpdateUI 
    2f4c:	86 ef       	ldi	r24, 0xF6	; 246
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
F:\Arduino\projects\HPiECU/HPiECU.ino:527
      Leftfrontblinkerstate = false;
      Leftbackblinkerstate = false;
      multiblink = false;
      lturnflag = false;
      blinkdance = false;
Serial.print(OutSerial_AllBlinkersIsOFF_cmd);
    2f50:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:534
    }
 
 }
////right turn

  if (digitalRead(RturnINpin) ==  HIGH)
    2f54:	8b e1       	ldi	r24, 0x1B	; 27
    2f56:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <main+0x568>
    2f5e:	f3 c4       	rjmp	.+2534   	; 0x3946 <main+0xf4e>
F:\Arduino\projects\HPiECU/HPiECU.ino:537
   {
    
      if (blinkInterval <= 0) blinkInterval = EEPROM.read(eep_blinkintervalAddress);//interval
    2f60:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <eep_blinkinterval>
    2f64:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <eep_blinkinterval+0x1>
    2f68:	18 16       	cp	r1, r24
    2f6a:	19 06       	cpc	r1, r25
    2f6c:	4c f0       	brlt	.+18     	; 0x2f80 <main+0x588>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <eeprom_read_byte>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:537
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <eep_blinkinterval+0x1>
    2f7c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <eep_blinkinterval>
F:\Arduino\projects\HPiECU/HPiECU.ino:539
      // check for multiblink
      if ((Leftfrontblinkerstate == true) && (Leftbackblinkerstate == true))
    2f80:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <Leftfrontblinkerstate>
    2f84:	88 23       	and	r24, r24
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <main+0x592>
    2f88:	b1 c4       	rjmp	.+2402   	; 0x38ec <main+0xef4>
    2f8a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <Leftbackblinkerstate>
    2f8e:	88 23       	and	r24, r24
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <main+0x59c>
    2f92:	ac c4       	rjmp	.+2392   	; 0x38ec <main+0xef4>
F:\Arduino\projects\HPiECU/HPiECU.ino:541
      {
          Leftfrontblinkerstate = false;
    2f94:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <Leftfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:542
          Rightfrontblinkerstate = false;
    2f98:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <Rightfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:543
          Rightbackblinkerstate = false;
    2f9c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <Rightbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:547
          Rightfrontblinkerstate = false;
         // if (blinkdance) Serial.print(OutSerial_BlinkDanceIsOFF_cmd);   //UpdateUI  
         
          blinkdance = false;//
    2fa0:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <blinkdance>
F:\Arduino\projects\HPiECU/HPiECU.ino:549
          //
          blinkerstate = true;//
    2fa4:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:550
          multiblink = true;
    2fa8:	10 93 3a 02 	sts	0x023A, r17	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:589
       blinkdance = false;
       Serial.print(OutSerial_AllBlinkersIsOFF_cmd);   //UpdateUI  
    }
   }
/////////RPM METER & Battery Voltage & Engine Temp. will Update EVERY 1 Second.
   if ((millis() - rpmPrvmillis) >= 1000)
    2fac:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    2fb0:	c0 90 2f 02 	lds	r12, 0x022F	; 0x80022f <rpmPrvmillis>
    2fb4:	d0 90 30 02 	lds	r13, 0x0230	; 0x800230 <rpmPrvmillis+0x1>
    2fb8:	e0 90 31 02 	lds	r14, 0x0231	; 0x800231 <rpmPrvmillis+0x2>
    2fbc:	f0 90 32 02 	lds	r15, 0x0232	; 0x800232 <rpmPrvmillis+0x3>
    2fc0:	6c 19       	sub	r22, r12
    2fc2:	7d 09       	sbc	r23, r13
    2fc4:	8e 09       	sbc	r24, r14
    2fc6:	9f 09       	sbc	r25, r15
    2fc8:	68 3e       	cpi	r22, 0xE8	; 232
    2fca:	73 40       	sbci	r23, 0x03	; 3
    2fcc:	81 05       	cpc	r24, r1
    2fce:	91 05       	cpc	r25, r1
    2fd0:	68 f1       	brcs	.+90     	; 0x302c <main+0x634>
F:\Arduino\projects\HPiECU/HPiECU.ino:591
   {
       rpmPrvmillis = millis();
    2fd2:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    2fd6:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <rpmPrvmillis>
    2fda:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <rpmPrvmillis+0x1>
    2fde:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <rpmPrvmillis+0x2>
    2fe2:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <rpmPrvmillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:593
       //RPM
       if (RPS <= 1)
    2fe6:	40 91 2b 02 	lds	r20, 0x022B	; 0x80022b <RPS>
    2fea:	50 91 2c 02 	lds	r21, 0x022C	; 0x80022c <RPS+0x1>
    2fee:	60 91 2d 02 	lds	r22, 0x022D	; 0x80022d <RPS+0x2>
    2ff2:	70 91 2e 02 	lds	r23, 0x022E	; 0x80022e <RPS+0x3>
    2ff6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <engPowerFlag>
    2ffa:	42 30       	cpi	r20, 0x02	; 2
    2ffc:	51 05       	cpc	r21, r1
    2ffe:	61 05       	cpc	r22, r1
    3000:	71 05       	cpc	r23, r1
    3002:	08 f0       	brcs	.+2      	; 0x3006 <main+0x60e>
    3004:	be c4       	rjmp	.+2428   	; 0x3982 <main+0xf8a>
F:\Arduino\projects\HPiECU/HPiECU.ino:595
       {
           RPM = 0;
    3006:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <RPM>
    300a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <RPM+0x1>
    300e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <RPM+0x2>
    3012:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <RPM+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:596
           if (engPowerFlag == ENGINE_IS_ON)
    3016:	88 23       	and	r24, r24
    3018:	49 f0       	breq	.+18     	; 0x302c <main+0x634>
F:\Arduino\projects\HPiECU/HPiECU.ino:598
           {
               engPowerFlag = ENGINE_IS_OFF;
    301a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <engPowerFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:599
               Serial.print(OutSerial_ENGINEisOFF_cmd);
    301e:	8e ef       	ldi	r24, 0xFE	; 254
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:600
               TemporaryDOSwitch(false);//restore to defaults
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	0e 94 95 05 	call	0xb2a	; 0xb2a <TemporaryDOSwitch(bool)>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
  int compareTo(const String &s) const;
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
    302c:	87 e0       	ldi	r24, 0x07	; 7
    302e:	91 e0       	ldi	r25, 0x01	; 1
    3030:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:627
   ////////////////////////////////////////////////////////////////
  // read incomming commands


  /// turn on main lights///////
  if (input == InSerial_HeadLightON_cmd)
    3034:	88 23       	and	r24, r24
    3036:	71 f0       	breq	.+28     	; 0x3054 <main+0x65c>
F:\Arduino\projects\HPiECU/HPiECU.ino:629
     {
      digitalWrite(headlight_OutPin,HIGH);
    3038:	61 e0       	ldi	r22, 0x01	; 1
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
operator=():
    3040:	6e e9       	ldi	r22, 0x9E	; 158
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	8a e1       	ldi	r24, 0x1A	; 26
    3046:	93 e0       	ldi	r25, 0x03	; 3
    3048:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:631
      input ="";
      Serial.print(OutSerial_HeadLightIsON_cmd);
    304c:	8a ee       	ldi	r24, 0xEA	; 234
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3054:	8b e0       	ldi	r24, 0x0B	; 11
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:634
     }//
   //////turn off main lights///////////
   if ((input == InSerial_HeadLightOFF_cmd))
    305c:	88 23       	and	r24, r24
    305e:	a9 f0       	breq	.+42     	; 0x308a <main+0x692>
F:\Arduino\projects\HPiECU/HPiECU.ino:636
       {
       if (digitalRead(HEADLightINpin) == LOW)
    3060:	82 e1       	ldi	r24, 0x12	; 18
    3062:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3066:	89 2b       	or	r24, r25
    3068:	81 f4       	brne	.+32     	; 0x308a <main+0x692>
F:\Arduino\projects\HPiECU/HPiECU.ino:638
       {
               digitalWrite(headlight_OutPin, LOW);
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:639
               headlightFlag = false;
    3072:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <headlightFlag>
operator=():
    3076:	6e e9       	ldi	r22, 0x9E	; 158
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	8a e1       	ldi	r24, 0x1A	; 26
    307c:	93 e0       	ldi	r25, 0x03	; 3
    307e:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:641
               input = "";
               Serial.print(OutSerial_HeadLightIsOFF_cmd);
    3082:	8e ee       	ldi	r24, 0xEE	; 238
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    308a:	8f e0       	ldi	r24, 0x0F	; 15
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:646
           
       }
       }////////
   // engine State Called.
   if (input == InSerial_GetENGINEstate_cmd)
    3092:	88 23       	and	r24, r24
    3094:	71 f0       	breq	.+28     	; 0x30b2 <main+0x6ba>
F:\Arduino\projects\HPiECU/HPiECU.ino:648
     {
        if (engPowerFlag ==ENGINE_IS_OFF)
    3096:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <engPowerFlag>
    309a:	81 11       	cpse	r24, r1
    309c:	8e c4       	rjmp	.+2332   	; 0x39ba <main+0xfc2>
F:\Arduino\projects\HPiECU/HPiECU.ino:650
        {
          Serial.print(OutSerial_ENGINEisOFF_cmd);
    309e:	8e ef       	ldi	r24, 0xFE	; 254
    30a0:	90 e0       	ldi	r25, 0x00	; 0
F:\Arduino\projects\HPiECU/HPiECU.ino:654
          
        }
        else {
        Serial.print(OutSerial_ENGINEisON_cmd);
    30a2:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
operator=():
    30a6:	6e e9       	ldi	r22, 0x9E	; 158
    30a8:	70 e0       	ldi	r23, 0x00	; 0
    30aa:	8a e1       	ldi	r24, 0x1A	; 26
    30ac:	93 e0       	ldi	r25, 0x03	; 3
    30ae:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    30b2:	83 e1       	ldi	r24, 0x13	; 19
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:659
        }
        input ="";
      }////////   
   // turn on Police Lights
   if (input == InSerial_PoliceLightON_cmd)
    30ba:	88 23       	and	r24, r24
    30bc:	d9 f0       	breq	.+54     	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:661
       {
       m_doSiren = true;
    30be:	10 93 25 02 	sts	0x0225, r17	; 0x800225 <m_doSiren>
operator=():
    30c2:	6e e9       	ldi	r22, 0x9E	; 158
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	8a e1       	ldi	r24, 0x1A	; 26
    30c8:	93 e0       	ldi	r25, 0x03	; 3
    30ca:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:663
       input = "";
       Serial.print(OutSerial_PoliceLightsIsOn_cmd);
    30ce:	87 e1       	ldi	r24, 0x17	; 23
    30d0:	91 e0       	ldi	r25, 0x01	; 1
    30d2:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
blinkSiren():
F:\Arduino\projects\HPiECU/HPiECU.ino:1441
/// <summary>
/// Police Siren Lights turns on By MultiBlinker key Or HPiUI App 
/// </summary>
void blinkSiren()
    {
    if (m_doSiren)
    30d6:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <m_doSiren>
    30da:	88 23       	and	r24, r24
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <main+0x6e8>
    30de:	8b c5       	rjmp	.+2838   	; 0x3bf6 <main+0x11fe>
F:\Arduino\projects\HPiECU/HPiECU.ino:1445
    {


          switch (sirenCaseCounter)
    30e0:	d0 90 08 02 	lds	r13, 0x0208	; 0x800208 <sirenCaseCounter>
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	d8 16       	cp	r13, r24
    30e8:	09 f4       	brne	.+2      	; 0x30ec <main+0x6f4>
    30ea:	6a c4       	rjmp	.+2260   	; 0x39c0 <main+0xfc8>
    30ec:	92 e0       	ldi	r25, 0x02	; 2
    30ee:	d9 16       	cp	r13, r25
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <main+0x6fc>
    30f2:	03 c5       	rjmp	.+2566   	; 0x3afa <main+0x1102>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    30f4:	8b e1       	ldi	r24, 0x1B	; 27
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:668
       Serial.print(OutSerial_PoliceLightsIsOn_cmd);
       blinkSiren();

       }
   // turn off Police Lights
   if (input == InSerial_PoliceLightOFF_cmd)
    30fc:	88 23       	and	r24, r24
    30fe:	61 f0       	breq	.+24     	; 0x3118 <main+0x720>
F:\Arduino\projects\HPiECU/HPiECU.ino:670
       {
       m_doSiren = false;
    3100:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <m_doSiren>
operator=():
    3104:	6e e9       	ldi	r22, 0x9E	; 158
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	8a e1       	ldi	r24, 0x1A	; 26
    310a:	93 e0       	ldi	r25, 0x03	; 3
    310c:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:672
       input = "";
       Serial.print(OutSerial_PoliceLightsIsOFF_cmd);
    3110:	8f e1       	ldi	r24, 0x1F	; 31
    3112:	91 e0       	ldi	r25, 0x01	; 1
    3114:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3118:	83 e2       	ldi	r24, 0x23	; 35
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:675
       }
   //Load speaker,Unload BUZZER
   if (input == InSerial_SetSirenSourceME_cmd)
    3120:	88 23       	and	r24, r24
    3122:	41 f0       	breq	.+16     	; 0x3134 <main+0x73c>
F:\Arduino\projects\HPiECU/HPiECU.ino:677
       {
       Serial.print(OutSerial_AlarmSourceIsUI_cmd);
    3124:	87 e2       	ldi	r24, 0x27	; 39
    3126:	91 e0       	ldi	r25, 0x01	; 1
    3128:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
toggleSpeakerPin():
F:\Arduino\projects\HPiECU/HPiECU.ino:1588
    if (ToMCU)
        {
        digitalWrite(AudioSwitcher_OutPin, LOW);
        } else
        {
        digitalWrite(AudioSwitcher_OutPin, HIGH);
    312c:	61 e0       	ldi	r22, 0x01	; 1
    312e:	88 e1       	ldi	r24, 0x18	; 24
    3130:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3134:	8b e2       	ldi	r24, 0x2B	; 43
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:681
       {
       Serial.print(OutSerial_AlarmSourceIsUI_cmd);
       toggleSpeakerPin(false);
       }
   //onload loud speaker,Load BUZZER
   if (input == InSerial_SetSirenSourceYOU_cmd)
    313c:	88 23       	and	r24, r24
    313e:	41 f0       	breq	.+16     	; 0x3150 <main+0x758>
F:\Arduino\projects\HPiECU/HPiECU.ino:683
       {
       Serial.print(OutSerial_ALarmSourceIsMicro_cmd);
    3140:	8f e2       	ldi	r24, 0x2F	; 47
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
toggleSpeakerPin():
F:\Arduino\projects\HPiECU/HPiECU.ino:1585
/// <param name="ToMCU">: If True MCU Became Audio Source, UI Became Source If False.  </param>
void toggleSpeakerPin(bool ToMCU)
    {
    if (ToMCU)
        {
        digitalWrite(AudioSwitcher_OutPin, LOW);
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	88 e1       	ldi	r24, 0x18	; 24
    314c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3150:	83 e3       	ldi	r24, 0x33	; 51
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:687
       {
       Serial.print(OutSerial_ALarmSourceIsMicro_cmd);
       toggleSpeakerPin(true);
       }
   // Emergency. Called By UI (recieved Remotely)
   if (input == InSerial_TurnOffENGINE_cmd)
    3158:	88 23       	and	r24, r24
    315a:	21 f0       	breq	.+8      	; 0x3164 <main+0x76c>
F:\Arduino\projects\HPiECU/HPiECU.ino:689
       {
       digitalWrite(CDI_ShutDown_OutPin, HIGH);
    315c:	61 e0       	ldi	r22, 0x01	; 1
    315e:	8e e1       	ldi	r24, 0x1E	; 30
    3160:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3164:	87 e3       	ldi	r24, 0x37	; 55
    3166:	91 e0       	ldi	r25, 0x01	; 1
    3168:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:692
       }
   // Can Start Engine
   if (input == InSerial_AllowENGINEstart_cmd)
    316c:	88 23       	and	r24, r24
    316e:	21 f0       	breq	.+8      	; 0x3178 <main+0x780>
F:\Arduino\projects\HPiECU/HPiECU.ino:694
       {
       digitalWrite(CDI_ShutDown_OutPin, LOW);
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	8e e1       	ldi	r24, 0x1E	; 30
    3174:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3178:	8b e3       	ldi	r24, 0x3B	; 59
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:697
       }
    //////turn off All Blinkers ///////////
  if ((input == InSerial_LeftBlinkOFF_cmd) || (input == InSerial_RightBlinkOFF_cmd)  || (input == InSerial_MultiBlinkOFF_cmd)  || (input == InSerial_BlinkerDanceOFF_cmd) )
    3180:	81 11       	cpse	r24, r1
    3182:	12 c0       	rjmp	.+36     	; 0x31a8 <main+0x7b0>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3184:	8f e3       	ldi	r24, 0x3F	; 63
    3186:	91 e0       	ldi	r25, 0x01	; 1
    3188:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:697
    318c:	81 11       	cpse	r24, r1
    318e:	0c c0       	rjmp	.+24     	; 0x31a8 <main+0x7b0>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3190:	83 e4       	ldi	r24, 0x43	; 67
    3192:	91 e0       	ldi	r25, 0x01	; 1
    3194:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:697
    3198:	81 11       	cpse	r24, r1
    319a:	06 c0       	rjmp	.+12     	; 0x31a8 <main+0x7b0>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    319c:	87 e4       	ldi	r24, 0x47	; 71
    319e:	91 e0       	ldi	r25, 0x01	; 1
    31a0:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:697
    31a4:	88 23       	and	r24, r24
    31a6:	71 f1       	breq	.+92     	; 0x3204 <main+0x80c>
F:\Arduino\projects\HPiECU/HPiECU.ino:699
  {
      if ((rturnflag == false) && (lturnflag == false))
    31a8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <rturnflag>
    31ac:	81 11       	cpse	r24, r1
    31ae:	2a c0       	rjmp	.+84     	; 0x3204 <main+0x80c>
    31b0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <lturnflag>
    31b4:	81 11       	cpse	r24, r1
    31b6:	26 c0       	rjmp	.+76     	; 0x3204 <main+0x80c>
F:\Arduino\projects\HPiECU/HPiECU.ino:702
      {// if physical button was not pressed
          
          Leftfrontblinkerstate = false;
    31b8:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <Leftfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:703
          Rightfrontblinkerstate = false;
    31bc:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <Rightfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:704
          Rightbackblinkerstate = false;
    31c0:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <Rightbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:706
          Rightfrontblinkerstate = false;
          blinkerstate = false;
    31c4:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:707
          multiblink = false;
    31c8:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:708
          digitalWrite(backLeftBlink_OutPin, LOW);
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	85 e0       	ldi	r24, 0x05	; 5
    31d0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:709
          digitalWrite(frontLeftBlink_OutPin, LOW);
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:710
          digitalWrite(backRightBlink_OutPin, LOW);
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	87 e0       	ldi	r24, 0x07	; 7
    31e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:711
          digitalWrite(frontRightBlink_OutPin, LOW);
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	84 e0       	ldi	r24, 0x04	; 4
    31e8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
operator=():
    31ec:	6e e9       	ldi	r22, 0x9E	; 158
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	8a e1       	ldi	r24, 0x1A	; 26
    31f2:	93 e0       	ldi	r25, 0x03	; 3
    31f4:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:714
          input = ""; //clear the buffer
         // if (blinkdance) Serial.print(OutSerial_BlinkDanceIsOFF_cmd);   //UpdateUI  
          blinkdance = false;
    31f8:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <blinkdance>
F:\Arduino\projects\HPiECU/HPiECU.ino:715
           Serial.print(OutSerial_AllBlinkersIsOFF_cmd);
    31fc:	82 ef       	ldi	r24, 0xF2	; 242
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3204:	8b e4       	ldi	r24, 0x4B	; 75
    3206:	91 e0       	ldi	r25, 0x01	; 1
    3208:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:720
      }
  }////////

 //////////checks for Left blinker///////////////
  if (input == InSerial_LeftBlinkON_cmd)
    320c:	88 23       	and	r24, r24
    320e:	81 f0       	breq	.+32     	; 0x3230 <main+0x838>
F:\Arduino\projects\HPiECU/HPiECU.ino:722
  {
      Serial.print(OutSerial_LeftTurnIsON_cmd);
    3210:	86 ef       	ldi	r24, 0xF6	; 246
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:724

      blinkerstate = true;
    3218:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:725
      Leftfrontblinkerstate = true;
    321c:	10 93 38 02 	sts	0x0238, r17	; 0x800238 <Leftfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:726
      Leftbackblinkerstate = true;
    3220:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <Leftbackblinkerstate>
operator=():
    3224:	6e e9       	ldi	r22, 0x9E	; 158
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	8a e1       	ldi	r24, 0x1A	; 26
    322a:	93 e0       	ldi	r25, 0x03	; 3
    322c:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:732
      input = "";

  }
  //
 ////AUTOStart
  if (input.startsWith(InSerial_AUTOStart_cmd))
    3230:	6f e4       	ldi	r22, 0x4F	; 79
    3232:	71 e0       	ldi	r23, 0x01	; 1
    3234:	ce 01       	movw	r24, r28
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
    323c:	ce 01       	movw	r24, r28
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	0e 94 31 10 	call	0x2062	; 0x2062 <String::startsWith(String const&) const [clone .constprop.12]>
    3244:	f8 2e       	mov	r15, r24
    3246:	ce 01       	movw	r24, r28
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
    324e:	ff 20       	and	r15, r15
    3250:	09 f4       	brne	.+2      	; 0x3254 <main+0x85c>
    3252:	52 c0       	rjmp	.+164    	; 0x32f8 <main+0x900>
F:\Arduino\projects\HPiECU/HPiECU.ino:735
  {
 
      startPressDurration = input.substring(4).toDouble();
    3254:	ce 01       	movw	r24, r28
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	0e 94 f7 10 	call	0x21ee	; 0x21ee <String::substring(unsigned int) const [clone .constprop.46]>
toDouble():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:749
  return float(toDouble());
}

double String::toDouble(void) const
{
  if (buffer) return atof(buffer);
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	09 f4       	brne	.+2      	; 0x3266 <main+0x86e>
    3264:	d1 c4       	rjmp	.+2466   	; 0x3c08 <main+0x1210>
    3266:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <atof>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:735
    326a:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__fixsfsi>
    326e:	6b 01       	movw	r12, r22
    3270:	70 93 24 02 	sts	0x0224, r23	; 0x800224 <startPressDurration+0x1>
    3274:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <startPressDurration>
    3278:	ce 01       	movw	r24, r28
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
F:\Arduino\projects\HPiECU/HPiECU.ino:737
               
              AutoStart(startPressDurration);
    3280:	46 01       	movw	r8, r12
Switch_is_Open():
F:\Arduino\projects\HPiECU/HPiECU.ino:1757
/// check for switch is open or no
/// </summary>
/// <returns>True If Switch Was Physically Opened.Else False returned.</returns>
bool Switch_is_Open()
{
  if((digitalRead(VBattINpin)) == HIGH ){
    3282:	8d e1       	ldi	r24, 0x1D	; 29
    3284:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	19 f0       	breq	.+6      	; 0x3292 <main+0x89a>
AutoStart():
F:\Arduino\projects\HPiECU/HPiECU.ino:1710
{


        if (Switch_is_Open() == false)
        {
            TemporaryDOSwitch(true);
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	0e 94 95 05 	call	0xb2a	; 0xb2a <TemporaryDOSwitch(bool)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1713
        }

        if (howmany > 0 )// if command comes from UI
    3292:	89 28       	or	r8, r9
    3294:	89 f1       	breq	.+98     	; 0x32f8 <main+0x900>
F:\Arduino\projects\HPiECU/HPiECU.ino:1718
        {
            
            
              
                if (StartCompleted == false)
    3296:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <StartCompleted>
    329a:	81 11       	cpse	r24, r1
    329c:	2d c0       	rjmp	.+90     	; 0x32f8 <main+0x900>
F:\Arduino\projects\HPiECU/HPiECU.ino:1720
                {
                    digitalWrite(ENGINE_Start_OutPin, HIGH);
    329e:	61 e0       	ldi	r22, 0x01	; 1
    32a0:	80 e1       	ldi	r24, 0x10	; 16
    32a2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1723


                    if ((millis() - AutoStartDurrationMillis) > howmany)
    32a6:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    32aa:	80 90 09 02 	lds	r8, 0x0209	; 0x800209 <AutoStartDurrationMillis>
    32ae:	90 90 0a 02 	lds	r9, 0x020A	; 0x80020a <AutoStartDurrationMillis+0x1>
    32b2:	a0 90 0b 02 	lds	r10, 0x020B	; 0x80020b <AutoStartDurrationMillis+0x2>
    32b6:	b0 90 0c 02 	lds	r11, 0x020C	; 0x80020c <AutoStartDurrationMillis+0x3>
    32ba:	68 19       	sub	r22, r8
    32bc:	79 09       	sbc	r23, r9
    32be:	8a 09       	sbc	r24, r10
    32c0:	9b 09       	sbc	r25, r11
    32c2:	f1 2c       	mov	r15, r1
    32c4:	e1 2c       	mov	r14, r1
    32c6:	c6 16       	cp	r12, r22
    32c8:	d7 06       	cpc	r13, r23
    32ca:	e8 06       	cpc	r14, r24
    32cc:	f9 06       	cpc	r15, r25
    32ce:	a0 f4       	brcc	.+40     	; 0x32f8 <main+0x900>
F:\Arduino\projects\HPiECU/HPiECU.ino:1725
                    {
                        digitalWrite(ENGINE_Start_OutPin, LOW);
    32d0:	60 e0       	ldi	r22, 0x00	; 0
    32d2:	80 e1       	ldi	r24, 0x10	; 16
    32d4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1726
                        StartCompleted = true;
    32d8:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <StartCompleted>
F:\Arduino\projects\HPiECU/HPiECU.ino:1727
                        AutoStartDurrationMillis = 0;
    32dc:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <AutoStartDurrationMillis>
    32e0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <AutoStartDurrationMillis+0x1>
    32e4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <AutoStartDurrationMillis+0x2>
    32e8:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <AutoStartDurrationMillis+0x3>
operator=():
    32ec:	6e e9       	ldi	r22, 0x9E	; 158
    32ee:	70 e0       	ldi	r23, 0x00	; 0
    32f0:	8a e1       	ldi	r24, 0x1A	; 26
    32f2:	93 e0       	ldi	r25, 0x03	; 3
    32f4:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:741
               
              AutoStart(startPressDurration);
             // input = ""; We will Clear Buffer Inside Function After Completting Task. 
  }
 //////EEPROM Blink Interval set.
  if (input.startsWith(InSerial_SetBlinkInterval_cmd))
    32f8:	64 e5       	ldi	r22, 0x54	; 84
    32fa:	71 e0       	ldi	r23, 0x01	; 1
    32fc:	ce 01       	movw	r24, r28
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
    3304:	ce 01       	movw	r24, r28
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	0e 94 31 10 	call	0x2062	; 0x2062 <String::startsWith(String const&) const [clone .constprop.12]>
    330c:	f8 2e       	mov	r15, r24
    330e:	ce 01       	movw	r24, r28
    3310:	01 96       	adiw	r24, 0x01	; 1
    3312:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
    3316:	ff 20       	and	r15, r15
    3318:	f9 f0       	breq	.+62     	; 0x3358 <main+0x960>
F:\Arduino\projects\HPiECU/HPiECU.ino:743
  {
      eep_blinkinterval = input.substring(4).toInt();
    331a:	ce 01       	movw	r24, r28
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <String::substring(unsigned int) const [clone .constprop.46]>
    3322:	ce 01       	movw	r24, r28
    3324:	01 96       	adiw	r24, 0x01	; 1
    3326:	0e 94 68 10 	call	0x20d0	; 0x20d0 <String::toInt() const>
    332a:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <eep_blinkinterval+0x1>
    332e:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <eep_blinkinterval>
    3332:	ce 01       	movw	r24, r28
    3334:	01 96       	adiw	r24, 0x01	; 1
    3336:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
F:\Arduino\projects\HPiECU/HPiECU.ino:744
      if (eep_blinkinterval > 0)
    333a:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <eep_blinkinterval>
    333e:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <eep_blinkinterval+0x1>
    3342:	16 16       	cp	r1, r22
    3344:	17 06       	cpc	r1, r23
    3346:	44 f4       	brge	.+16     	; 0x3358 <main+0x960>
_ZN5EERefC2Ei():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9a 83       	std	Y+2, r25	; 0x02
    334e:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.3():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    3350:	ce 01       	movw	r24, r28
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	0e 94 45 11 	call	0x228a	; 0x228a <EERef::update(unsigned char)>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:751
          EEPROM.update(eep_blinkintervalAddress, eep_blinkinterval);
      }
  }
  //
//////EEPROM minimum idle RPM set.
  if (input.startsWith(InSerial_SetMinIdleRPM_cmd))
    3358:	69 e5       	ldi	r22, 0x59	; 89
    335a:	71 e0       	ldi	r23, 0x01	; 1
    335c:	ce 01       	movw	r24, r28
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
    3364:	ce 01       	movw	r24, r28
    3366:	01 96       	adiw	r24, 0x01	; 1
    3368:	0e 94 31 10 	call	0x2062	; 0x2062 <String::startsWith(String const&) const [clone .constprop.12]>
    336c:	f8 2e       	mov	r15, r24
    336e:	ce 01       	movw	r24, r28
    3370:	01 96       	adiw	r24, 0x01	; 1
    3372:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
    3376:	ff 20       	and	r15, r15
    3378:	09 f1       	breq	.+66     	; 0x33bc <main+0x9c4>
F:\Arduino\projects\HPiECU/HPiECU.ino:754
  {

      eep_minimumIdleRPM = input.substring(4).toInt();
    337a:	ce 01       	movw	r24, r28
    337c:	01 96       	adiw	r24, 0x01	; 1
    337e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <String::substring(unsigned int) const [clone .constprop.46]>
    3382:	ce 01       	movw	r24, r28
    3384:	01 96       	adiw	r24, 0x01	; 1
    3386:	0e 94 68 10 	call	0x20d0	; 0x20d0 <String::toInt() const>
    338a:	60 93 7d 00 	sts	0x007D, r22	; 0x80007d <eep_minimumIdleRPM>
    338e:	ce 01       	movw	r24, r28
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
F:\Arduino\projects\HPiECU/HPiECU.ino:755
      if (eep_minimumIdleRPM > 0)
    3396:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <eep_minimumIdleRPM>
    339a:	66 23       	and	r22, r22
    339c:	79 f0       	breq	.+30     	; 0x33bc <main+0x9c4>
F:\Arduino\projects\HPiECU/HPiECU.ino:757
      {
          EEPROM.update(eep_minimumIdleRPMAddress, eep_minimumIdleRPM);
    339e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <eep_minimumIdleRPMAddress>
    33a2:	90 e0       	ldi	r25, 0x00	; 0
_ZN5EERefC2Ei():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.3():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    33a8:	ce 01       	movw	r24, r28
    33aa:	01 96       	adiw	r24, 0x01	; 1
    33ac:	0e 94 45 11 	call	0x228a	; 0x228a <EERef::update(unsigned char)>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:758
          delay(5);
    33b0:	65 e0       	ldi	r22, 0x05	; 5
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:763
      }
  }
//
/// EEPROM Min and max Servo Angle
  if (input.startsWith(InSerial_SetMinServoAngle_cmd))
    33bc:	6e e5       	ldi	r22, 0x5E	; 94
    33be:	71 e0       	ldi	r23, 0x01	; 1
    33c0:	ce 01       	movw	r24, r28
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
    33c8:	ce 01       	movw	r24, r28
    33ca:	01 96       	adiw	r24, 0x01	; 1
    33cc:	0e 94 31 10 	call	0x2062	; 0x2062 <String::startsWith(String const&) const [clone .constprop.12]>
    33d0:	f8 2e       	mov	r15, r24
    33d2:	ce 01       	movw	r24, r28
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
    33da:	ff 20       	and	r15, r15
    33dc:	09 f1       	breq	.+66     	; 0x3420 <main+0xa28>
F:\Arduino\projects\HPiECU/HPiECU.ino:766
  {

      eep_minServoAngle = input.substring(4).toInt();
    33de:	ce 01       	movw	r24, r28
    33e0:	01 96       	adiw	r24, 0x01	; 1
    33e2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <String::substring(unsigned int) const [clone .constprop.46]>
    33e6:	ce 01       	movw	r24, r28
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	0e 94 68 10 	call	0x20d0	; 0x20d0 <String::toInt() const>
    33ee:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <eep_minServoAngle+0x1>
    33f2:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <eep_minServoAngle>
    33f6:	ce 01       	movw	r24, r28
    33f8:	01 96       	adiw	r24, 0x01	; 1
    33fa:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
F:\Arduino\projects\HPiECU/HPiECU.ino:768
   
          EEPROM.update(eep_minServoAngleAddress, eep_minServoAngle);
    33fe:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <eep_minServoAngle>
    3402:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <eep_minServoAngleAddress>
    3406:	90 e0       	ldi	r25, 0x00	; 0
_ZN5EERefC2Ei():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    3408:	9a 83       	std	Y+2, r25	; 0x02
    340a:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.3():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    340c:	ce 01       	movw	r24, r28
    340e:	01 96       	adiw	r24, 0x01	; 1
    3410:	0e 94 45 11 	call	0x228a	; 0x228a <EERef::update(unsigned char)>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:769
          delay(5);
    3414:	65 e0       	ldi	r22, 0x05	; 5
    3416:	70 e0       	ldi	r23, 0x00	; 0
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:773
      
  }
  ///MAX
  if (input.startsWith(InSerial_SetMaxServoAngle_cmd))
    3420:	63 e6       	ldi	r22, 0x63	; 99
    3422:	71 e0       	ldi	r23, 0x01	; 1
    3424:	ce 01       	movw	r24, r28
    3426:	01 96       	adiw	r24, 0x01	; 1
    3428:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
    342c:	ce 01       	movw	r24, r28
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	0e 94 31 10 	call	0x2062	; 0x2062 <String::startsWith(String const&) const [clone .constprop.12]>
    3434:	f8 2e       	mov	r15, r24
    3436:	ce 01       	movw	r24, r28
    3438:	01 96       	adiw	r24, 0x01	; 1
    343a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
    343e:	ff 20       	and	r15, r15
    3440:	31 f1       	breq	.+76     	; 0x348e <main+0xa96>
F:\Arduino\projects\HPiECU/HPiECU.ino:776
  {

      eep_maxServoAngle = input.substring(4).toInt();
    3442:	ce 01       	movw	r24, r28
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	0e 94 f7 10 	call	0x21ee	; 0x21ee <String::substring(unsigned int) const [clone .constprop.46]>
    344a:	ce 01       	movw	r24, r28
    344c:	01 96       	adiw	r24, 0x01	; 1
    344e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <String::toInt() const>
    3452:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <eep_maxServoAngle+0x1>
    3456:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <eep_maxServoAngle>
    345a:	ce 01       	movw	r24, r28
    345c:	01 96       	adiw	r24, 0x01	; 1
    345e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
F:\Arduino\projects\HPiECU/HPiECU.ino:777
      if (eep_maxServoAngle > 0)
    3462:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <eep_maxServoAngle>
    3466:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <eep_maxServoAngle+0x1>
    346a:	61 15       	cp	r22, r1
    346c:	71 05       	cpc	r23, r1
    346e:	79 f0       	breq	.+30     	; 0x348e <main+0xa96>
F:\Arduino\projects\HPiECU/HPiECU.ino:779
      {
          EEPROM.update(eep_maxServoAngleAddress, eep_maxServoAngle);
    3470:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <eep_maxServoAngleAddress>
    3474:	90 e0       	ldi	r25, 0x00	; 0
_ZN5EERefC2Ei():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.3():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    347a:	ce 01       	movw	r24, r28
    347c:	01 96       	adiw	r24, 0x01	; 1
    347e:	0e 94 45 11 	call	0x228a	; 0x228a <EERef::update(unsigned char)>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:780
          delay(5);
    3482:	65 e0       	ldi	r22, 0x05	; 5
    3484:	70 e0       	ldi	r23, 0x00	; 0
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
F:\Arduino\projects\HPiECU/HPiECU.ino:785
      }
  }
 //
 // Horn Mode
  if (input.startsWith(InSerial_SetHornMode_cmd))
    348e:	68 e6       	ldi	r22, 0x68	; 104
    3490:	71 e0       	ldi	r23, 0x01	; 1
    3492:	ce 01       	movw	r24, r28
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
    349a:	ce 01       	movw	r24, r28
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	0e 94 31 10 	call	0x2062	; 0x2062 <String::startsWith(String const&) const [clone .constprop.12]>
    34a2:	f8 2e       	mov	r15, r24
    34a4:	ce 01       	movw	r24, r28
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
    34ac:	ff 20       	and	r15, r15
    34ae:	a1 f0       	breq	.+40     	; 0x34d8 <main+0xae0>
F:\Arduino\projects\HPiECU/HPiECU.ino:787
  {
      hornclicks = input.substring(4).toInt();  
    34b0:	ce 01       	movw	r24, r28
    34b2:	01 96       	adiw	r24, 0x01	; 1
    34b4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <String::substring(unsigned int) const [clone .constprop.46]>
    34b8:	ce 01       	movw	r24, r28
    34ba:	01 96       	adiw	r24, 0x01	; 1
    34bc:	0e 94 68 10 	call	0x20d0	; 0x20d0 <String::toInt() const>
    34c0:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <hornclicks>
    34c4:	ce 01       	movw	r24, r28
    34c6:	01 96       	adiw	r24, 0x01	; 1
    34c8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
operator=():
    34cc:	6e e9       	ldi	r22, 0x9E	; 158
    34ce:	70 e0       	ldi	r23, 0x00	; 0
    34d0:	8a e1       	ldi	r24, 0x1A	; 26
    34d2:	93 e0       	ldi	r25, 0x03	; 3
    34d4:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:792
      input = "";
  }
  //
  //HeadBlink ON
  if (input.startsWith(InSerial_HeadBlinkON_cmd))
    34d8:	6d e6       	ldi	r22, 0x6D	; 109
    34da:	71 e0       	ldi	r23, 0x01	; 1
    34dc:	ce 01       	movw	r24, r28
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	0e 94 c6 10 	call	0x218c	; 0x218c <String::String(char const*)>
    34e4:	ce 01       	movw	r24, r28
    34e6:	01 96       	adiw	r24, 0x01	; 1
    34e8:	0e 94 31 10 	call	0x2062	; 0x2062 <String::startsWith(String const&) const [clone .constprop.12]>
    34ec:	f8 2e       	mov	r15, r24
    34ee:	ce 01       	movw	r24, r28
    34f0:	01 96       	adiw	r24, 0x01	; 1
    34f2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
    34f6:	ff 20       	and	r15, r15
    34f8:	e1 f1       	breq	.+120    	; 0x3572 <main+0xb7a>
F:\Arduino\projects\HPiECU/HPiECU.ino:794
  {
      Headblink_blinkmode = input.substring(4).toInt();
    34fa:	ce 01       	movw	r24, r28
    34fc:	01 96       	adiw	r24, 0x01	; 1
    34fe:	0e 94 f7 10 	call	0x21ee	; 0x21ee <String::substring(unsigned int) const [clone .constprop.46]>
    3502:	ce 01       	movw	r24, r28
    3504:	01 96       	adiw	r24, 0x01	; 1
    3506:	0e 94 68 10 	call	0x20d0	; 0x20d0 <String::toInt() const>
    350a:	4b 01       	movw	r8, r22
    350c:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <Headblink_blinkmode+0x1>
    3510:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <Headblink_blinkmode>
    3514:	ce 01       	movw	r24, r28
    3516:	01 96       	adiw	r24, 0x01	; 1
    3518:	0e 94 60 10 	call	0x20c0	; 0x20c0 <String::~String()>
F:\Arduino\projects\HPiECU/HPiECU.ino:796
      // enable flag
      if (Headblink_blinkmode >= -1)  Headblink_flag = true;//  we didnt used signed variable so  Precaution is proof of Wisdom and Tact ..^_^..
    351c:	2f ef       	ldi	r18, 0xFF	; 255
    351e:	82 16       	cp	r8, r18
    3520:	92 06       	cpc	r9, r18
    3522:	0c f1       	brlt	.+66     	; 0x3566 <main+0xb6e>
    3524:	10 93 1f 02 	sts	0x021F, r17	; 0x80021f <Headblink_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:798
      
      if (Headblink_blinkmode > 0)
    3528:	18 14       	cp	r1, r8
    352a:	19 04       	cpc	r1, r9
    352c:	e4 f4       	brge	.+56     	; 0x3566 <main+0xb6e>
F:\Arduino\projects\HPiECU/HPiECU.ino:800
      {
          Headblink_delay = Headblink_blinkmode;
    352e:	c4 01       	movw	r24, r8
    3530:	99 0c       	add	r9, r9
    3532:	aa 0b       	sbc	r26, r26
    3534:	bb 0b       	sbc	r27, r27
    3536:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Headblink_delay>
    353a:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Headblink_delay+0x1>
    353e:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <Headblink_delay+0x2>
    3542:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <Headblink_delay+0x3>
operator=():
    3546:	6e e9       	ldi	r22, 0x9E	; 158
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	8a e1       	ldi	r24, 0x1A	; 26
    354c:	93 e0       	ldi	r25, 0x03	; 3
    354e:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:802
                  input = "";
          Headblink_timeout = millis(); //Start Timeout Timer!
    3552:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3556:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <Headblink_timeout>
    355a:	70 93 1c 02 	sts	0x021C, r23	; 0x80021c <Headblink_timeout+0x1>
    355e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Headblink_timeout+0x2>
    3562:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Headblink_timeout+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:804
      }
      Serial.print(OutSerial_HeadBlinkIsON_cmd);
    3566:	82 e7       	ldi	r24, 0x72	; 114
    3568:	91 e0       	ldi	r25, 0x01	; 1
    356a:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:805
      BlinkHeadLight();// need to be called fast as fast because timer was actived.
    356e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <BlinkHeadLight()>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    3572:	86 e7       	ldi	r24, 0x76	; 118
    3574:	91 e0       	ldi	r25, 0x01	; 1
    3576:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:809
  }
 //
 //HeadBlink OFF
  if (input == InSerial_HeadBlinkOFF_cmd)
    357a:	88 23       	and	r24, r24
    357c:	71 f0       	breq	.+28     	; 0x359a <main+0xba2>
F:\Arduino\projects\HPiECU/HPiECU.ino:812
  {
      
    Headblink_flag = false;
    357e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <Headblink_flag>
operator=():
    3582:	6e e9       	ldi	r22, 0x9E	; 158
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	8a e1       	ldi	r24, 0x1A	; 26
    3588:	93 e0       	ldi	r25, 0x03	; 3
    358a:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:814
      input = "";
      Serial.print(OutSerial_HeadBlinkIsOFF_cmd);
    358e:	86 e7       	ldi	r24, 0x76	; 118
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:815
      BlinkHeadLight();// fast call for disabling.
    3596:	0e 94 0d 05 	call	0xa1a	; 0xa1a <BlinkHeadLight()>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    359a:	8a e7       	ldi	r24, 0x7A	; 122
    359c:	91 e0       	ldi	r25, 0x01	; 1
    359e:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:819
  }
 // 
  //Temperature
  if (input == InSerial_GetENGINEtemperature_cmd)
    35a2:	88 23       	and	r24, r24
    35a4:	71 f0       	breq	.+28     	; 0x35c2 <main+0xbca>
operator=():
    35a6:	6e e9       	ldi	r22, 0x9E	; 158
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	8a e1       	ldi	r24, 0x1A	; 26
    35ac:	93 e0       	ldi	r25, 0x03	; 3
    35ae:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:822
  {
    input = "";
      Serial.print(OutSerial_ENGINEtemperature_cmd);
    35b2:	8e e7       	ldi	r24, 0x7E	; 126
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
GetEngineTemp():
F:\Arduino\projects\HPiECU/HPiECU.ino:1601
/// </summary>
/// <returns>Current Engine's Temperature</returns>
float GetEngineTemp()
{ 
   // Serial.println(thermocouple.readCelsius());
   return thermocouple.readCelsius();
    35ba:	0e 94 14 03 	call	0x628	; 0x628 <MAX6675::readCelsius() [clone .constprop.28]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:823
  //Temperature
  if (input == InSerial_GetENGINEtemperature_cmd)
  {
    input = "";
      Serial.print(OutSerial_ENGINEtemperature_cmd);
      Serial.println(GetEngineTemp());
    35be:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Print::println(double, int) [clone .constprop.15]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    35c2:	83 e8       	ldi	r24, 0x83	; 131
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:827
  }
  //
  //FUEL Level
  if (input == InSerial_GetFuelLevel_cmd)
    35ca:	88 23       	and	r24, r24
    35cc:	39 f1       	breq	.+78     	; 0x361c <main+0xc24>
operator=():
    35ce:	6e e9       	ldi	r22, 0x9E	; 158
    35d0:	70 e0       	ldi	r23, 0x00	; 0
    35d2:	8a e1       	ldi	r24, 0x1A	; 26
    35d4:	93 e0       	ldi	r25, 0x03	; 3
    35d6:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:830
  {
    input = "";
      Serial.print(OutSerial_FuelLevel_cmd);
    35da:	87 e8       	ldi	r24, 0x87	; 135
    35dc:	91 e0       	ldi	r25, 0x01	; 1
    35de:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
analogRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    35e2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <analog_reference>
    35e6:	20 e4       	ldi	r18, 0x40	; 64
    35e8:	82 9f       	mul	r24, r18
    35ea:	c0 01       	movw	r24, r0
    35ec:	11 24       	eor	r1, r1
    35ee:	87 60       	ori	r24, 0x07	; 7
    35f0:	87 b9       	out	0x07, r24	; 7
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    35f2:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    35f4:	36 99       	sbic	0x06, 6	; 6
    35f6:	fe cf       	rjmp	.-4      	; 0x35f4 <main+0xbfc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    35f8:	a4 b1       	in	r26, 0x04	; 4
    35fa:	b5 b1       	in	r27, 0x05	; 5
map():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WMath.cpp:54
    35fc:	24 e6       	ldi	r18, 0x64	; 100
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	0e 94 56 23 	call	0x46ac	; 0x46ac <__usmulhisi3>
    3604:	a3 01       	movw	r20, r6
    3606:	92 01       	movw	r18, r4
    3608:	0e 94 81 21 	call	0x4302	; 0x4302 <__divmodsi4>
GetFuelLevel():
F:\Arduino\projects\HPiECU/HPiECU.ino:2150
{
    int Fuel_Level = 0;
    int in_voltage = 0;
    in_voltage = analogRead(FuelGauge_IN);
    Fuel_Level = map(in_voltage, 0, 1023, 0, 100);
    return Fuel_Level;
    360c:	b9 01       	movw	r22, r18
    360e:	33 0f       	add	r19, r19
    3610:	88 0b       	sbc	r24, r24
    3612:	99 0b       	sbc	r25, r25
    3614:	0e 94 4c 20 	call	0x4098	; 0x4098 <__floatsisf>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:831
  //FUEL Level
  if (input == InSerial_GetFuelLevel_cmd)
  {
    input = "";
      Serial.print(OutSerial_FuelLevel_cmd);
      Serial.println(GetFuelLevel());
    3618:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Print::println(double, int) [clone .constprop.15]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    361c:	8c e8       	ldi	r24, 0x8C	; 140
    361e:	91 e0       	ldi	r25, 0x01	; 1
    3620:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:835
  }
  //
  //ENGINE Temp 
  if (input == InSerial_GetBatteryVoltage)
    3624:	88 23       	and	r24, r24
    3626:	09 f4       	brne	.+2      	; 0x362a <main+0xc32>
    3628:	46 c0       	rjmp	.+140    	; 0x36b6 <main+0xcbe>
operator=():
    362a:	6e e9       	ldi	r22, 0x9E	; 158
    362c:	70 e0       	ldi	r23, 0x00	; 0
    362e:	8a e1       	ldi	r24, 0x1A	; 26
    3630:	93 e0       	ldi	r25, 0x03	; 3
    3632:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:838
  {
    input = "";
           Serial.println(OutSerial_BatteryVoltage_cmd);
    3636:	80 e9       	ldi	r24, 0x90	; 144
    3638:	91 e0       	ldi	r25, 0x01	; 1
    363a:	0e 94 b0 06 	call	0xd60	; 0xd60 <Print::println(char const*) [clone .constprop.49]>
analogRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    363e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <analog_reference>
    3642:	20 e4       	ldi	r18, 0x40	; 64
    3644:	82 9f       	mul	r24, r18
    3646:	c0 01       	movw	r24, r0
    3648:	11 24       	eor	r1, r1
    364a:	85 60       	ori	r24, 0x05	; 5
    364c:	87 b9       	out	0x07, r24	; 7
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    364e:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    3650:	36 99       	sbic	0x06, 6	; 6
    3652:	fe cf       	rjmp	.-4      	; 0x3650 <main+0xc58>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    3654:	64 b1       	in	r22, 0x04	; 4
    3656:	75 b1       	in	r23, 0x05	; 5
getBatteryVoltage():
F:\Arduino\projects\HPiECU/HPiECU.ino:1618
    double temp = 0.0;


    int analog_value = analogRead(VBattINpin);

    temp = (analog_value * 5.0) / 1024.0;
    3658:	07 2e       	mov	r0, r23
    365a:	00 0c       	add	r0, r0
    365c:	88 0b       	sbc	r24, r24
    365e:	99 0b       	sbc	r25, r25
    3660:	0e 94 4c 20 	call	0x4098	; 0x4098 <__floatsisf>
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 ea       	ldi	r20, 0xA0	; 160
    366a:	50 e4       	ldi	r21, 0x40	; 64
    366c:	0e 94 ab 20 	call	0x4156	; 0x4156 <__mulsf3>
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e8       	ldi	r20, 0x80	; 128
    3676:	5a e3       	ldi	r21, 0x3A	; 58
    3678:	0e 94 ab 20 	call	0x4156	; 0x4156 <__mulsf3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1620

    input_voltage = (temp / (r2) / (r1 + r2));
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	4a e7       	ldi	r20, 0x7A	; 122
    3682:	54 e4       	ldi	r21, 0x44	; 68
    3684:	0e 94 88 22 	call	0x4510	; 0x4510 <__divsf3>
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 ee       	ldi	r19, 0xE0	; 224
    368c:	4b e2       	ldi	r20, 0x2B	; 43
    368e:	56 e4       	ldi	r21, 0x46	; 70
    3690:	0e 94 88 22 	call	0x4510	; 0x4510 <__divsf3>
    3694:	6b 01       	movw	r12, r22
    3696:	7c 01       	movw	r14, r24
F:\Arduino\projects\HPiECU/HPiECU.ino:1622

    if (input_voltage < 0.1)
    3698:	2d ec       	ldi	r18, 0xCD	; 205
    369a:	3c ec       	ldi	r19, 0xCC	; 204
    369c:	4c ec       	ldi	r20, 0xCC	; 204
    369e:	5d e3       	ldi	r21, 0x3D	; 61
    36a0:	0e 94 45 20 	call	0x408a	; 0x408a <__cmpsf2>
    36a4:	87 ff       	sbrs	r24, 7
    36a6:	03 c0       	rjmp	.+6      	; 0x36ae <main+0xcb6>
main():
F:\Arduino\projects\HPiECU/HPiECU.ino:1624
    {
        input_voltage = 0.0;
    36a8:	c1 2c       	mov	r12, r1
    36aa:	d1 2c       	mov	r13, r1
    36ac:	76 01       	movw	r14, r12
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:839
  //ENGINE Temp 
  if (input == InSerial_GetBatteryVoltage)
  {
    input = "";
           Serial.println(OutSerial_BatteryVoltage_cmd);
       Serial.println(getBatteryVoltage());
    36ae:	c7 01       	movw	r24, r14
    36b0:	b6 01       	movw	r22, r12
    36b2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Print::println(double, int) [clone .constprop.15]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    36b6:	85 e9       	ldi	r24, 0x95	; 149
    36b8:	91 e0       	ldi	r25, 0x01	; 1
    36ba:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:846
  }
  //
 ///////commands from UI//////////////////

  //Right Turn Blink
  if (input == InSerial_RightBlinkON_cmd)
    36be:	88 23       	and	r24, r24
    36c0:	81 f0       	breq	.+32     	; 0x36e2 <main+0xcea>
F:\Arduino\projects\HPiECU/HPiECU.ino:848
   {
       blinkerstate = true;
    36c2:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:849
       Rightbackblinkerstate = true;
    36c6:	10 93 3c 02 	sts	0x023C, r17	; 0x80023c <Rightbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:850
       Rightfrontblinkerstate = true;
    36ca:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <Rightfrontblinkerstate>
operator=():
    36ce:	6e e9       	ldi	r22, 0x9E	; 158
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	8a e1       	ldi	r24, 0x1A	; 26
    36d4:	93 e0       	ldi	r25, 0x03	; 3
    36d6:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:852
       input ="";   
       Serial.print(OutSerial_RightTurnIsON_cmd);
    36da:	8a ef       	ldi	r24, 0xFA	; 250
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    36e2:	89 e9       	ldi	r24, 0x99	; 153
    36e4:	91 e0       	ldi	r25, 0x01	; 1
    36e6:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:855
   }  
  //multi blink
  if (input == InSerial_MultiBlinkON_cmd)
    36ea:	88 23       	and	r24, r24
    36ec:	71 f0       	breq	.+28     	; 0x370a <main+0xd12>
F:\Arduino\projects\HPiECU/HPiECU.ino:857
  {   
     blinkerstate = true;
    36ee:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:858
     multiblink = true;
    36f2:	10 93 3a 02 	sts	0x023A, r17	; 0x80023a <multiblink>
operator=():
    36f6:	6e e9       	ldi	r22, 0x9E	; 158
    36f8:	70 e0       	ldi	r23, 0x00	; 0
    36fa:	8a e1       	ldi	r24, 0x1A	; 26
    36fc:	93 e0       	ldi	r25, 0x03	; 3
    36fe:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:860
     input ="";
     Serial.print(OutSerial_AllBlinkersIsON_cmd);
    3702:	8d e9       	ldi	r24, 0x9D	; 157
    3704:	91 e0       	ldi	r25, 0x01	; 1
    3706:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
_ZNK6StringeqEPKc():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.h:143
    370a:	81 ea       	ldi	r24, 0xA1	; 161
    370c:	91 e0       	ldi	r25, 0x01	; 1
    370e:	0e 94 18 10 	call	0x2030	; 0x2030 <String::equals(char const*) const [clone .constprop.20]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:863
  }

  if (input == InSerial_BlinkerDanceON_cmd)
    3712:	88 23       	and	r24, r24
    3714:	41 f0       	breq	.+16     	; 0x3726 <main+0xd2e>
F:\Arduino\projects\HPiECU/HPiECU.ino:865
  {
   blinkerstate = true;
    3716:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:866
   blinkdance = true;
    371a:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <blinkdance>
F:\Arduino\projects\HPiECU/HPiECU.ino:867
   Serial.print(OutSerial_BlinkDanceIsON_cmd);
    371e:	81 ea       	ldi	r24, 0xA1	; 161
    3720:	91 e0       	ldi	r25, 0x01	; 1
    3722:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:874

  /////////////////////////////////////////////////////////////////////
  // we're using millis() instead Of Delay(). So We need Call Functions rapidly. 
  // its like Multitasking and Event listening.
//call  functions  
 Blink();//for blinkers.
    3726:	0e 94 be 06 	call	0xd7c	; 0xd7c <Blink()>
F:\Arduino\projects\HPiECU/HPiECU.ino:875
     Horn(); // for horn.
    372a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Horn()>
ListenForRemoteControl():
F:\Arduino\projects\HPiECU/HPiECU.ino:1788
/// <summary>
/// Remote Control Listener.
/// </summary>
void ListenForRemoteControl()
{
    if (engPowerFlag == ENGINE_IS_ON)
    372e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <engPowerFlag>
    3732:	88 23       	and	r24, r24
    3734:	09 f4       	brne	.+2      	; 0x3738 <main+0xd40>
    3736:	6c c2       	rjmp	.+1240   	; 0x3c10 <main+0x1218>
F:\Arduino\projects\HPiECU/HPiECU.ino:1791
    {
        // Lock Not Allowed. Only Remote Shutdown Allowed.
        if (digitalRead(RemoteShutDownINpin) == HIGH)//ShutDown ENGINE Remotely.
    3738:	85 e1       	ldi	r24, 0x15	; 21
    373a:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	81 f4       	brne	.+32     	; 0x3762 <main+0xd6a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1794
        {

            digitalWrite(CDI_ShutDown_OutPin, HIGH);
    3742:	61 e0       	ldi	r22, 0x01	; 1
    3744:	8e e1       	ldi	r24, 0x1E	; 30
    3746:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1795
            RemoteShutDownFlag = true;
    374a:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <RemoteShutDownFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1796
            RemoteShutDownLastMillis = millis();
    374e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3752:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <RemoteShutDownLastMillis>
    3756:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <RemoteShutDownLastMillis+0x1>
    375a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <RemoteShutDownLastMillis+0x2>
    375e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <RemoteShutDownLastMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1867
            TemporaryDOSwitch(false);
        }

    }//

    if ((digitalRead(RemoteShutDownINpin) == LOW) && RemoteShutDownFlag == true)// ShutDown Key Was Released. 
    3762:	85 e1       	ldi	r24, 0x15	; 21
    3764:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3768:	89 2b       	or	r24, r25
    376a:	51 f5       	brne	.+84     	; 0x37c0 <main+0xdc8>
    376c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <RemoteShutDownFlag>
    3770:	88 23       	and	r24, r24
    3772:	31 f1       	breq	.+76     	; 0x37c0 <main+0xdc8>
F:\Arduino\projects\HPiECU/HPiECU.ino:1869
    {
        if ((millis() - RemoteShutDownLastMillis) >= 10000)//Wait For 10 Seconds To Engine's shutdown Complete.
    3774:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3778:	c0 90 16 02 	lds	r12, 0x0216	; 0x800216 <RemoteShutDownLastMillis>
    377c:	d0 90 17 02 	lds	r13, 0x0217	; 0x800217 <RemoteShutDownLastMillis+0x1>
    3780:	e0 90 18 02 	lds	r14, 0x0218	; 0x800218 <RemoteShutDownLastMillis+0x2>
    3784:	f0 90 19 02 	lds	r15, 0x0219	; 0x800219 <RemoteShutDownLastMillis+0x3>
    3788:	6c 19       	sub	r22, r12
    378a:	7d 09       	sbc	r23, r13
    378c:	8e 09       	sbc	r24, r14
    378e:	9f 09       	sbc	r25, r15
    3790:	60 31       	cpi	r22, 0x10	; 16
    3792:	77 42       	sbci	r23, 0x27	; 39
    3794:	81 05       	cpc	r24, r1
    3796:	91 05       	cpc	r25, r1
    3798:	98 f0       	brcs	.+38     	; 0x37c0 <main+0xdc8>
F:\Arduino\projects\HPiECU/HPiECU.ino:1871
        {
            RemoteShutDownLastMillis = millis();
    379a:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    379e:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <RemoteShutDownLastMillis>
    37a2:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <RemoteShutDownLastMillis+0x1>
    37a6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <RemoteShutDownLastMillis+0x2>
    37aa:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <RemoteShutDownLastMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1872
            TemporaryDOSwitch(false);//close switch.
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	0e 94 95 05 	call	0xb2a	; 0xb2a <TemporaryDOSwitch(bool)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1873
            digitalWrite(CDI_ShutDown_OutPin, LOW);
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	8e e1       	ldi	r24, 0x1E	; 30
    37b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1874
            RemoteShutDownFlag = false;
    37bc:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <RemoteShutDownFlag>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:878
//call  functions  
 Blink();//for blinkers.
     Horn(); // for horn.

  ListenForRemoteControl();//Remote Control Listener.
  DoAlarm();// Lock Alarm.
    37c0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <DoAlarm()>
F:\Arduino\projects\HPiECU/HPiECU.ino:879
  BlinkHeadLight();
    37c4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <BlinkHeadLight()>
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	89 2b       	or	r24, r25
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <main+0xdda>
    37d0:	6e ca       	rjmp	.-2852   	; 0x2cae <main+0x2b6>
    37d2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Serial0_available()>
    37d6:	88 23       	and	r24, r24
    37d8:	09 f4       	brne	.+2      	; 0x37dc <main+0xde4>
    37da:	69 ca       	rjmp	.-2862   	; 0x2cae <main+0x2b6>
    37dc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    37e0:	66 ca       	rjmp	.-2868   	; 0x2cae <main+0x2b6>
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
    37e2:	0e 94 ff 23 	call	0x47fe	; 0x47fe <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ea:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <input+0x1>
    37ee:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <input>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	9c 81       	ldd	r25, Y+4	; 0x04
    37f6:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <input+0x3>
    37fa:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <input+0x2>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <input+0x5>
    3806:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <input+0x4>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
    380a:	1a 82       	std	Y+2, r1	; 0x02
    380c:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
    380e:	1c 82       	std	Y+4, r1	; 0x04
    3810:	1b 82       	std	Y+3, r1	; 0x03
    3812:	01 cb       	rjmp	.-2558   	; 0x2e16 <main+0x41e>
adjustIdleSpeed():
F:\Arduino\projects\HPiECU/HPiECU.ino:1649

        if (temperature < 5)
        {
            // Ice
            SetIdleRPM(280);
        } else if (temperature >= 5 && temperature < 10)
    3814:	c4 01       	movw	r24, r8
    3816:	05 97       	sbiw	r24, 0x05	; 5
    3818:	05 97       	sbiw	r24, 0x05	; 5
    381a:	18 f4       	brcc	.+6      	; 0x3822 <main+0xe2a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1652
        {
            // very cold temperature near ice
            SetIdleRPM(250);
    381c:	8a ef       	ldi	r24, 0xFA	; 250
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	49 cb       	rjmp	.-2414   	; 0x2eb4 <main+0x4bc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1653
        } else if (temperature >= 10 && temperature < 15)
    3822:	c4 01       	movw	r24, r8
    3824:	0a 97       	sbiw	r24, 0x0a	; 10
    3826:	05 97       	sbiw	r24, 0x05	; 5
    3828:	18 f4       	brcc	.+6      	; 0x3830 <main+0xe38>
F:\Arduino\projects\HPiECU/HPiECU.ino:1656
        {
            // very cold temperature
            SetIdleRPM(230);
    382a:	86 ee       	ldi	r24, 0xE6	; 230
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	42 cb       	rjmp	.-2428   	; 0x2eb4 <main+0x4bc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1657
        } else if (temperature >= 15 && temperature < 20)
    3830:	c4 01       	movw	r24, r8
    3832:	0f 97       	sbiw	r24, 0x0f	; 15
    3834:	05 97       	sbiw	r24, 0x05	; 5
    3836:	18 f4       	brcc	.+6      	; 0x383e <main+0xe46>
F:\Arduino\projects\HPiECU/HPiECU.ino:1660
        {
            // cold temperature
            SetIdleRPM(200);
    3838:	88 ec       	ldi	r24, 0xC8	; 200
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	3b cb       	rjmp	.-2442   	; 0x2eb4 <main+0x4bc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1661
        } else if (temperature >= 20 && temperature < 25)
    383e:	c4 01       	movw	r24, r8
    3840:	44 97       	sbiw	r24, 0x14	; 20
    3842:	05 97       	sbiw	r24, 0x05	; 5
    3844:	18 f4       	brcc	.+6      	; 0x384c <main+0xe54>
F:\Arduino\projects\HPiECU/HPiECU.ino:1664
        {
            // cool temperature
            SetIdleRPM(180);
    3846:	84 eb       	ldi	r24, 0xB4	; 180
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	34 cb       	rjmp	.-2456   	; 0x2eb4 <main+0x4bc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1665
        } else if (temperature >= 25 && temperature < 30)
    384c:	c4 01       	movw	r24, r8
    384e:	49 97       	sbiw	r24, 0x19	; 25
    3850:	05 97       	sbiw	r24, 0x05	; 5
    3852:	18 f4       	brcc	.+6      	; 0x385a <main+0xe62>
F:\Arduino\projects\HPiECU/HPiECU.ino:1668
        {
            //normal temperature
            SetIdleRPM(170);
    3854:	8a ea       	ldi	r24, 0xAA	; 170
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	2d cb       	rjmp	.-2470   	; 0x2eb4 <main+0x4bc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1669
        } else if (temperature >= 30 && temperature < 35)
    385a:	c4 01       	movw	r24, r8
    385c:	4e 97       	sbiw	r24, 0x1e	; 30
    385e:	05 97       	sbiw	r24, 0x05	; 5
    3860:	18 f4       	brcc	.+6      	; 0x3868 <main+0xe70>
F:\Arduino\projects\HPiECU/HPiECU.ino:1672
        {
            //warm temperature
            SetIdleRPM(160);
    3862:	80 ea       	ldi	r24, 0xA0	; 160
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	26 cb       	rjmp	.-2484   	; 0x2eb4 <main+0x4bc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1673
        } else if (temperature > 35)
    3868:	93 e2       	ldi	r25, 0x23	; 35
    386a:	89 16       	cp	r8, r25
    386c:	91 04       	cpc	r9, r1
    386e:	09 f4       	brne	.+2      	; 0x3872 <main+0xe7a>
    3870:	23 cb       	rjmp	.-2490   	; 0x2eb8 <main+0x4c0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1675
        {
            SetIdleRPM(eep_minimumIdleRPM);
    3872:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <eep_minimumIdleRPM>
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	0e 94 a9 05 	call	0xb52	; 0xb52 <SetIdleRPM(unsigned int)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1676
            RPMadjusted = true;
    387c:	10 93 40 02 	sts	0x0240, r17	; 0x800240 <RPMadjusted>
    3880:	1b cb       	rjmp	.-2506   	; 0x2eb8 <main+0x4c0>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:478
    headlight_SerialOut_flag = true;//Set The Flag
    Serial.print(OutSerial_HeadLightIsON_cmd);
    }
   }else  //headLight Off
    {
      if (headlightFlag == true)
    3882:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <headlightFlag>
    3886:	88 23       	and	r24, r24
    3888:	09 f4       	brne	.+2      	; 0x388c <main+0xe94>
    388a:	2c cb       	rjmp	.-2472   	; 0x2ee4 <main+0x4ec>
F:\Arduino\projects\HPiECU/HPiECU.ino:482
      {
        
        
          headlightFlag = false;
    388c:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <headlightFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:483
    digitalWrite(headlight_OutPin, LOW);
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:484
    if(headlight_SerialOut_flag == true)
    3898:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <headlight_SerialOut_flag>
    389c:	88 23       	and	r24, r24
    389e:	09 f4       	brne	.+2      	; 0x38a2 <main+0xeaa>
    38a0:	21 cb       	rjmp	.-2494   	; 0x2ee4 <main+0x4ec>
F:\Arduino\projects\HPiECU/HPiECU.ino:486
    {
     Serial.print(OutSerial_HeadLightIsOFF_cmd);
    38a2:	8e ee       	ldi	r24, 0xEE	; 238
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:487
     headlight_SerialOut_flag = false;//Reset The Flag
    38aa:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <headlight_SerialOut_flag>
    38ae:	1a cb       	rjmp	.-2508   	; 0x2ee4 <main+0x4ec>
F:\Arduino\projects\HPiECU/HPiECU.ino:516
            delayMicroseconds(5);
           Serial.print(OutSerial_LeftTurnIsON_cmd);   //UpdateUI 
          }
  }  else // left turn OFF
  {
    if (lturnflag == true)
    38b0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <lturnflag>
    38b4:	88 23       	and	r24, r24
    38b6:	09 f4       	brne	.+2      	; 0x38ba <main+0xec2>
    38b8:	4d cb       	rjmp	.-2406   	; 0x2f54 <main+0x55c>
F:\Arduino\projects\HPiECU/HPiECU.ino:518
    {
            lturn_SerialOut_flag = false;//Reset the flag
    38ba:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <lturn_SerialOut_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:519
        digitalWrite(backLeftBlink_OutPin,LOW);
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	85 e0       	ldi	r24, 0x05	; 5
    38c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:520
      digitalWrite(frontLeftBlink_OutPin,LOW);
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:521
         blinkerstate = false;
    38ce:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:522
      Leftfrontblinkerstate = false;
    38d2:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <Leftfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:523
      Leftbackblinkerstate = false;
    38d6:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <Leftbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:524
      multiblink = false;
    38da:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:525
      lturnflag = false;
    38de:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <lturnflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:526
      blinkdance = false;
    38e2:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <blinkdance>
F:\Arduino\projects\HPiECU/HPiECU.ino:527
Serial.print(OutSerial_AllBlinkersIsOFF_cmd);
    38e6:	82 ef       	ldi	r24, 0xF2	; 242
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	32 cb       	rjmp	.-2460   	; 0x2f50 <main+0x558>
F:\Arduino\projects\HPiECU/HPiECU.ino:553
          //
          blinkerstate = true;//
          multiblink = true;
      } else
      {
          multiblink = false;      ///the
    38ec:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:554
          digitalWrite(backLeftBlink_OutPin, LOW);//other
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	85 e0       	ldi	r24, 0x05	; 5
    38f4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:555
          digitalWrite(frontLeftBlink_OutPin, LOW);//blinkers
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
operator=():
    3900:	6e e9       	ldi	r22, 0x9E	; 158
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	8a e1       	ldi	r24, 0x1A	; 26
    3906:	93 e0       	ldi	r25, 0x03	; 3
    3908:	0e 94 9b 10 	call	0x2136	; 0x2136 <String::operator=(char const*) [clone .part.3]>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:558
          input = ""; //clear the buffer
         // if (blinkdance) Serial.print(OutSerial_BlinkDanceIsOFF_cmd);   //UpdateUI  
          blinkdance = false;//
    390c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <blinkdance>
F:\Arduino\projects\HPiECU/HPiECU.ino:559
          blinkerstate = true;//
    3910:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:560
          Rightbackblinkerstate = true;//same as above 
    3914:	10 93 3c 02 	sts	0x023C, r17	; 0x80023c <Rightbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:561
          Rightfrontblinkerstate = true;//turn off other
    3918:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <Rightfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:562
           rturnflag = true;
    391c:	10 93 34 02 	sts	0x0234, r17	; 0x800234 <rturnflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:563
          if (rturn_SerialOut_flag == false)//Just Update UI One Time To Prevent From Unnecessary Calls
    3920:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <rturn_SerialOut_flag>
    3924:	81 11       	cpse	r24, r1
    3926:	42 cb       	rjmp	.-2428   	; 0x2fac <main+0x5b4>
F:\Arduino\projects\HPiECU/HPiECU.ino:565
          {
            rturn_SerialOut_flag = true;//set the flag
    3928:	10 93 33 02 	sts	0x0233, r17	; 0x800233 <rturn_SerialOut_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:566
          Serial.print(OutSerial_AllBlinkersIsOFF_cmd);
    392c:	82 ef       	ldi	r24, 0xF2	; 242
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:567
          delayMicroseconds(5);
    3934:	85 e0       	ldi	r24, 0x05	; 5
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <delayMicroseconds>
F:\Arduino\projects\HPiECU/HPiECU.ino:568
          Serial.print(OutSerial_RightTurnIsON_cmd);
    393c:	8a ef       	ldi	r24, 0xFA	; 250
    393e:	90 e0       	ldi	r25, 0x00	; 0
F:\Arduino\projects\HPiECU/HPiECU.ino:585
       Rightbackblinkerstate = false;
       Rightfrontblinkerstate = false;
       multiblink = false;
       rturnflag = false;
       blinkdance = false;
       Serial.print(OutSerial_AllBlinkersIsOFF_cmd);   //UpdateUI  
    3940:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
    3944:	33 cb       	rjmp	.-2458   	; 0x2fac <main+0x5b4>
F:\Arduino\projects\HPiECU/HPiECU.ino:574
          }
         
      }
    } else // Right Turn off
   {
    if (rturnflag == true)
    3946:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <rturnflag>
    394a:	88 23       	and	r24, r24
    394c:	09 f4       	brne	.+2      	; 0x3950 <main+0xf58>
    394e:	2e cb       	rjmp	.-2468   	; 0x2fac <main+0x5b4>
F:\Arduino\projects\HPiECU/HPiECU.ino:576
    {
      rturn_SerialOut_flag = false;//Reset The Serial Flag for Feature call.
    3950:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <rturn_SerialOut_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:577
      digitalWrite(backRightBlink_OutPin,LOW);
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	87 e0       	ldi	r24, 0x07	; 7
    3958:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:578
      digitalWrite(frontRightBlink_OutPin,LOW);
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	84 e0       	ldi	r24, 0x04	; 4
    3960:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:579
       blinkerstate = false;
    3964:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <blinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:580
       Rightbackblinkerstate = false;
    3968:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <Rightbackblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:581
       Rightfrontblinkerstate = false;
    396c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <Rightfrontblinkerstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:582
       multiblink = false;
    3970:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <multiblink>
F:\Arduino\projects\HPiECU/HPiECU.ino:583
       rturnflag = false;
    3974:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <rturnflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:584
       blinkdance = false;
    3978:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <blinkdance>
F:\Arduino\projects\HPiECU/HPiECU.ino:585
       Serial.print(OutSerial_AllBlinkersIsOFF_cmd);   //UpdateUI  
    397c:	82 ef       	ldi	r24, 0xF2	; 242
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	df cf       	rjmp	.-66     	; 0x3940 <main+0xf48>
F:\Arduino\projects\HPiECU/HPiECU.ino:613
          
           



           if (engPowerFlag == ENGINE_IS_OFF)
    3982:	81 11       	cpse	r24, r1
    3984:	53 cb       	rjmp	.-2394   	; 0x302c <main+0x634>
F:\Arduino\projects\HPiECU/HPiECU.ino:615
           {
               engPowerFlag = ENGINE_IS_ON;
    3986:	10 93 26 02 	sts	0x0226, r17	; 0x800226 <engPowerFlag>
F:\Arduino\projects\HPiECU/HPiECU.ino:616
               Serial.println(OutSerial_ENGINEisON_cmd);
    398a:	88 e0       	ldi	r24, 0x08	; 8
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	0e 94 b0 06 	call	0xd60	; 0xd60 <Print::println(char const*) [clone .constprop.49]>
F:\Arduino\projects\HPiECU/HPiECU.ino:617
               Serial.print(OutSerial_ENGINErpm_cmd);
    3992:	82 e0       	ldi	r24, 0x02	; 2
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:618
               Serial.println(RPM);
    399a:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <RPM>
    399e:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <RPM+0x1>
    39a2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <RPM+0x2>
    39a6:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <RPM+0x3>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:106
    39aa:	4a e0       	ldi	r20, 0x0A	; 10
    39ac:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.35]>
write():
    39b0:	8c e9       	ldi	r24, 0x9C	; 156
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
    39b8:	39 cb       	rjmp	.-2446   	; 0x302c <main+0x634>
loop():
F:\Arduino\projects\HPiECU/HPiECU.ino:654
        {
          Serial.print(OutSerial_ENGINEisOFF_cmd);
          
        }
        else {
        Serial.print(OutSerial_ENGINEisON_cmd);
    39ba:	88 e0       	ldi	r24, 0x08	; 8
    39bc:	91 e0       	ldi	r25, 0x01	; 1
    39be:	71 cb       	rjmp	.-2334   	; 0x30a2 <main+0x6aa>
blinkSiren():
F:\Arduino\projects\HPiECU/HPiECU.ino:1451
          {
            case 1:


                //Serial.print("\n mod1 \n");
                if (sirenDanceRedCounter <= 5 && sirenDanceRedFLAG == true)
    39c0:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <sirenDanceRedCounter>
    39c4:	25 e0       	ldi	r18, 0x05	; 5
    39c6:	2f 15       	cp	r18, r15
    39c8:	f0 f1       	brcs	.+124    	; 0x3a46 <main+0x104e>
    39ca:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sirenDanceRedFLAG>
    39ce:	88 23       	and	r24, r24
    39d0:	d1 f1       	breq	.+116    	; 0x3a46 <main+0x104e>
F:\Arduino\projects\HPiECU/HPiECU.ino:1453
                    {
                    if ((millis() - sirenDancePrevMillis) >= 50)
    39d2:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    39d6:	80 90 03 02 	lds	r8, 0x0203	; 0x800203 <sirenDancePrevMillis>
    39da:	90 90 04 02 	lds	r9, 0x0204	; 0x800204 <sirenDancePrevMillis+0x1>
    39de:	a0 90 05 02 	lds	r10, 0x0205	; 0x800205 <sirenDancePrevMillis+0x2>
    39e2:	b0 90 06 02 	lds	r11, 0x0206	; 0x800206 <sirenDancePrevMillis+0x3>
    39e6:	68 19       	sub	r22, r8
    39e8:	79 09       	sbc	r23, r9
    39ea:	8a 09       	sbc	r24, r10
    39ec:	9b 09       	sbc	r25, r11
    39ee:	62 33       	cpi	r22, 0x32	; 50
    39f0:	71 05       	cpc	r23, r1
    39f2:	81 05       	cpc	r24, r1
    39f4:	91 05       	cpc	r25, r1
    39f6:	08 f4       	brcc	.+2      	; 0x39fa <main+0x1002>
    39f8:	7d cb       	rjmp	.-2310   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1455
                        {
                        digitalWrite(blueS_OutPin, LOW);//turn off the blues
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1457

                        sirenDancePrevMillis = millis();
    3a02:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3a06:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <sirenDancePrevMillis>
    3a0a:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <sirenDancePrevMillis+0x1>
    3a0e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <sirenDancePrevMillis+0x2>
    3a12:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <sirenDancePrevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1458
                        sirenDanceREDState = !sirenDanceREDState;
    3a16:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <sirenDanceREDState>
    3a1a:	ed 24       	eor	r14, r13
    3a1c:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <sirenDanceREDState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1459
                        digitalWrite(RedS_OutPin, sirenDanceREDState);//toggle the 
    3a20:	6e 2d       	mov	r22, r14
    3a22:	83 e0       	ldi	r24, 0x03	; 3
    3a24:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1461

                        if (sirenDanceREDState == HIGH)
    3a28:	ee 20       	and	r14, r14
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <main+0x1036>
    3a2c:	63 cb       	rjmp	.-2362   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1464
                            {
                           // Serial.print("\n 1A \n");
                            sirenDanceRedCounter++;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	8f 0d       	add	r24, r15
    3a32:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <sirenDanceRedCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1465
                            if (sirenDanceRedCounter >= 5)
    3a36:	85 30       	cpi	r24, 0x05	; 5
    3a38:	08 f4       	brcc	.+2      	; 0x3a3c <main+0x1044>
    3a3a:	5c cb       	rjmp	.-2376   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1468
                                {

                                sirenDanceRedFLAG = false;
    3a3c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <sirenDanceRedFLAG>
F:\Arduino\projects\HPiECU/HPiECU.ino:1469
                                sirenDanceBlueFLAG = true;
    3a40:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <sirenDanceBlueFLAG>
    3a44:	57 cb       	rjmp	.-2386   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1476

                            }
                        }
                    } else
                    {
                    if (sirenDanceBlueCounter <= 5 && sirenDanceBlueFLAG == true)
    3a46:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <sirenDanceBlueCounter>
    3a4a:	85 e0       	ldi	r24, 0x05	; 5
    3a4c:	8e 15       	cp	r24, r14
    3a4e:	08 f4       	brcc	.+2      	; 0x3a52 <main+0x105a>
    3a50:	51 cb       	rjmp	.-2398   	; 0x30f4 <main+0x6fc>
    3a52:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <sirenDanceBlueFLAG>
    3a56:	88 23       	and	r24, r24
    3a58:	09 f4       	brne	.+2      	; 0x3a5c <main+0x1064>
    3a5a:	4c cb       	rjmp	.-2408   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1478
                        {
                        if ((millis() - sirenDancePrevMillis) >= 50)
    3a5c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3a60:	80 90 03 02 	lds	r8, 0x0203	; 0x800203 <sirenDancePrevMillis>
    3a64:	90 90 04 02 	lds	r9, 0x0204	; 0x800204 <sirenDancePrevMillis+0x1>
    3a68:	a0 90 05 02 	lds	r10, 0x0205	; 0x800205 <sirenDancePrevMillis+0x2>
    3a6c:	b0 90 06 02 	lds	r11, 0x0206	; 0x800206 <sirenDancePrevMillis+0x3>
    3a70:	68 19       	sub	r22, r8
    3a72:	79 09       	sbc	r23, r9
    3a74:	8a 09       	sbc	r24, r10
    3a76:	9b 09       	sbc	r25, r11
    3a78:	62 33       	cpi	r22, 0x32	; 50
    3a7a:	71 05       	cpc	r23, r1
    3a7c:	81 05       	cpc	r24, r1
    3a7e:	91 05       	cpc	r25, r1
    3a80:	08 f4       	brcc	.+2      	; 0x3a84 <main+0x108c>
    3a82:	38 cb       	rjmp	.-2448   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1480
                            {
                            digitalWrite(RedS_OutPin, LOW);//turn off the reds
    3a84:	60 e0       	ldi	r22, 0x00	; 0
    3a86:	83 e0       	ldi	r24, 0x03	; 3
    3a88:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1482

                            sirenDancePrevMillis = millis();
    3a8c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3a90:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <sirenDancePrevMillis>
    3a94:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <sirenDancePrevMillis+0x1>
    3a98:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <sirenDancePrevMillis+0x2>
    3a9c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <sirenDancePrevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1483
                            sirenDanceBLUEState = !sirenDanceBLUEState;
    3aa0:	d0 90 ff 01 	lds	r13, 0x01FF	; 0x8001ff <sirenDanceBLUEState>
    3aa4:	d0 26       	eor	r13, r16
    3aa6:	d0 92 ff 01 	sts	0x01FF, r13	; 0x8001ff <sirenDanceBLUEState>
F:\Arduino\projects\HPiECU/HPiECU.ino:1484
                            digitalWrite(blueS_OutPin, sirenDanceBLUEState);
    3aaa:	6d 2d       	mov	r22, r13
    3aac:	82 e0       	ldi	r24, 0x02	; 2
    3aae:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1486

                            if (sirenDanceBLUEState == HIGH)
    3ab2:	dd 20       	and	r13, r13
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <main+0x10c0>
    3ab6:	1e cb       	rjmp	.-2500   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1489
                                {
                            //    Serial.print("\n 1B \n");
                                sirenDanceBlueCounter++;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	8e 0d       	add	r24, r14
    3abc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <sirenDanceBlueCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1490
                                if (sirenDanceRedCounter >= 5 && sirenDanceBlueCounter >= 5)
    3ac0:	94 e0       	ldi	r25, 0x04	; 4
    3ac2:	9f 15       	cp	r25, r15
    3ac4:	08 f0       	brcs	.+2      	; 0x3ac8 <main+0x10d0>
    3ac6:	16 cb       	rjmp	.-2516   	; 0x30f4 <main+0x6fc>
    3ac8:	85 30       	cpi	r24, 0x05	; 5
    3aca:	08 f4       	brcc	.+2      	; 0x3ace <main+0x10d6>
    3acc:	13 cb       	rjmp	.-2522   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1492
                                    {
                                    sirenDanceRedCounter = 0;
    3ace:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sirenDanceRedCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1493
                                    sirenDanceBlueCounter = 0;
    3ad2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <sirenDanceBlueCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1494
                                    sirenDanceRedFLAG = true;
    3ad6:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <sirenDanceRedFLAG>
F:\Arduino\projects\HPiECU/HPiECU.ino:1495
                                    sirenDanceBlueFLAG = false;
    3ada:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <sirenDanceBlueFLAG>
F:\Arduino\projects\HPiECU/HPiECU.ino:1496
                                    SirenStageCounter++;
    3ade:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <SirenStageCounter>
    3ae2:	8f 5f       	subi	r24, 0xFF	; 255
F:\Arduino\projects\HPiECU/HPiECU.ino:1497
                                    if (SirenStageCounter >= 5)
    3ae4:	85 30       	cpi	r24, 0x05	; 5
    3ae6:	18 f4       	brcc	.+6      	; 0x3aee <main+0x10f6>
F:\Arduino\projects\HPiECU/HPiECU.ino:1556
                                {
                                sirenDanceRedCounter = 0;
                                sirenDanceBlueCounter = 0;
                                sirenDanceRedFLAG = true;
                                sirenDanceBlueFLAG = false;
                                SirenStageCounter++;
    3ae8:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <SirenStageCounter>
    3aec:	03 cb       	rjmp	.-2554   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1499
                                    sirenDanceRedFLAG = true;
                                    sirenDanceBlueFLAG = false;
                                    SirenStageCounter++;
                                    if (SirenStageCounter >= 5)
                                        {
                                        SirenStageCounter = 0;
    3aee:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <SirenStageCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1500
                                        sirenCaseCounter++;
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <sirenCaseCounter>
    3af8:	fd ca       	rjmp	.-2566   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1510
                        }
                    }
                    break;
            case 2:
              //  Serial.print("\n mod1 \n");
                if (sirenDanceRedCounter <= 5 && sirenDanceRedFLAG == true)
    3afa:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <sirenDanceRedCounter>
    3afe:	25 e0       	ldi	r18, 0x05	; 5
    3b00:	2f 15       	cp	r18, r15
    3b02:	50 f1       	brcs	.+84     	; 0x3b58 <main+0x1160>
    3b04:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sirenDanceRedFLAG>
    3b08:	88 23       	and	r24, r24
    3b0a:	31 f1       	breq	.+76     	; 0x3b58 <main+0x1160>
F:\Arduino\projects\HPiECU/HPiECU.ino:1512
                    {
                    if ((millis() - sirenDancePrevMillis) >= 50)
    3b0c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3b10:	80 90 03 02 	lds	r8, 0x0203	; 0x800203 <sirenDancePrevMillis>
    3b14:	90 90 04 02 	lds	r9, 0x0204	; 0x800204 <sirenDancePrevMillis+0x1>
    3b18:	a0 90 05 02 	lds	r10, 0x0205	; 0x800205 <sirenDancePrevMillis+0x2>
    3b1c:	b0 90 06 02 	lds	r11, 0x0206	; 0x800206 <sirenDancePrevMillis+0x3>
    3b20:	68 19       	sub	r22, r8
    3b22:	79 09       	sbc	r23, r9
    3b24:	8a 09       	sbc	r24, r10
    3b26:	9b 09       	sbc	r25, r11
    3b28:	62 33       	cpi	r22, 0x32	; 50
    3b2a:	71 05       	cpc	r23, r1
    3b2c:	81 05       	cpc	r24, r1
    3b2e:	91 05       	cpc	r25, r1
    3b30:	08 f4       	brcc	.+2      	; 0x3b34 <main+0x113c>
    3b32:	e0 ca       	rjmp	.-2624   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1514
                        {
                        digitalWrite(blueS_OutPin, LOW);//turn off the blues
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	82 e0       	ldi	r24, 0x02	; 2
    3b38:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1516

                        sirenDancePrevMillis = millis();
    3b3c:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3b40:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <sirenDancePrevMillis>
    3b44:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <sirenDancePrevMillis+0x1>
    3b48:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <sirenDancePrevMillis+0x2>
    3b4c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <sirenDancePrevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1517
                        sirenDanceREDState = !sirenDanceREDState;
    3b50:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <sirenDanceREDState>
    3b54:	e0 26       	eor	r14, r16
    3b56:	62 cf       	rjmp	.-316    	; 0x3a1c <main+0x1024>
F:\Arduino\projects\HPiECU/HPiECU.ino:1535

                            }
                        }
                    } else
                    {
                    if (sirenDanceBlueCounter <= 5 && sirenDanceBlueFLAG == true)
    3b58:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <sirenDanceBlueCounter>
    3b5c:	85 e0       	ldi	r24, 0x05	; 5
    3b5e:	8e 15       	cp	r24, r14
    3b60:	08 f4       	brcc	.+2      	; 0x3b64 <main+0x116c>
    3b62:	c8 ca       	rjmp	.-2672   	; 0x30f4 <main+0x6fc>
    3b64:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <sirenDanceBlueFLAG>
    3b68:	88 23       	and	r24, r24
    3b6a:	09 f4       	brne	.+2      	; 0x3b6e <main+0x1176>
    3b6c:	c3 ca       	rjmp	.-2682   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1537
                        {
                        if ((millis() - sirenDancePrevMillis) >= 50)
    3b6e:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3b72:	80 90 03 02 	lds	r8, 0x0203	; 0x800203 <sirenDancePrevMillis>
    3b76:	90 90 04 02 	lds	r9, 0x0204	; 0x800204 <sirenDancePrevMillis+0x1>
    3b7a:	a0 90 05 02 	lds	r10, 0x0205	; 0x800205 <sirenDancePrevMillis+0x2>
    3b7e:	b0 90 06 02 	lds	r11, 0x0206	; 0x800206 <sirenDancePrevMillis+0x3>
    3b82:	68 19       	sub	r22, r8
    3b84:	79 09       	sbc	r23, r9
    3b86:	8a 09       	sbc	r24, r10
    3b88:	9b 09       	sbc	r25, r11
    3b8a:	62 33       	cpi	r22, 0x32	; 50
    3b8c:	71 05       	cpc	r23, r1
    3b8e:	81 05       	cpc	r24, r1
    3b90:	91 05       	cpc	r25, r1
    3b92:	08 f4       	brcc	.+2      	; 0x3b96 <main+0x119e>
    3b94:	af ca       	rjmp	.-2722   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1539
                            {
                            digitalWrite(RedS_OutPin, LOW);//turn off  red and blues
    3b96:	60 e0       	ldi	r22, 0x00	; 0
    3b98:	83 e0       	ldi	r24, 0x03	; 3
    3b9a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1540
                            digitalWrite(blueS_OutPin, LOW);//
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1541
                            sirenDancePrevMillis = millis();
    3ba6:	0e 94 9f 03 	call	0x73e	; 0x73e <millis>
    3baa:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <sirenDancePrevMillis>
    3bae:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <sirenDancePrevMillis+0x1>
    3bb2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <sirenDancePrevMillis+0x2>
    3bb6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <sirenDancePrevMillis+0x3>
F:\Arduino\projects\HPiECU/HPiECU.ino:1549
                            // we should write code for waiting for 1000millisecond 
                           // sirenDanceBLUEState = !sirenDanceBLUEState;
                            //if (sirenDanceBLUEState == HIGH)
                               // {
                          //  Serial.print("\n 1B \n");
                            sirenDanceBlueCounter++;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	8e 0d       	add	r24, r14
    3bbe:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <sirenDanceBlueCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1550
                            if (sirenDanceRedCounter >= 5 && sirenDanceBlueCounter >= 5)
    3bc2:	94 e0       	ldi	r25, 0x04	; 4
    3bc4:	9f 15       	cp	r25, r15
    3bc6:	08 f0       	brcs	.+2      	; 0x3bca <main+0x11d2>
    3bc8:	95 ca       	rjmp	.-2774   	; 0x30f4 <main+0x6fc>
    3bca:	85 30       	cpi	r24, 0x05	; 5
    3bcc:	08 f4       	brcc	.+2      	; 0x3bd0 <main+0x11d8>
    3bce:	92 ca       	rjmp	.-2780   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1552
                                {
                                sirenDanceRedCounter = 0;
    3bd0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sirenDanceRedCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1553
                                sirenDanceBlueCounter = 0;
    3bd4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <sirenDanceBlueCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1554
                                sirenDanceRedFLAG = true;
    3bd8:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <sirenDanceRedFLAG>
F:\Arduino\projects\HPiECU/HPiECU.ino:1555
                                sirenDanceBlueFLAG = false;
    3bdc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <sirenDanceBlueFLAG>
F:\Arduino\projects\HPiECU/HPiECU.ino:1556
                                SirenStageCounter++;
    3be0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <SirenStageCounter>
    3be4:	8f 5f       	subi	r24, 0xFF	; 255
F:\Arduino\projects\HPiECU/HPiECU.ino:1557
                                if (SirenStageCounter >= 10)///because every stage runs two times for toggle
    3be6:	8a 30       	cpi	r24, 0x0A	; 10
    3be8:	08 f4       	brcc	.+2      	; 0x3bec <main+0x11f4>
    3bea:	7e cf       	rjmp	.-260    	; 0x3ae8 <main+0x10f0>
F:\Arduino\projects\HPiECU/HPiECU.ino:1559
                                    {
                                    SirenStageCounter = 0;
    3bec:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <SirenStageCounter>
F:\Arduino\projects\HPiECU/HPiECU.ino:1560
                                    sirenCaseCounter = 1;
    3bf0:	10 93 08 02 	sts	0x0208, r17	; 0x800208 <sirenCaseCounter>
    3bf4:	7f ca       	rjmp	.-2818   	; 0x30f4 <main+0x6fc>
F:\Arduino\projects\HPiECU/HPiECU.ino:1571
                    }
                    break;
          }
    } else
    {
    digitalWrite(RedS_OutPin, LOW);
    3bf6:	60 e0       	ldi	r22, 0x00	; 0
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1572
    digitalWrite(blueS_OutPin, LOW);
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	82 e0       	ldi	r24, 0x02	; 2
    3c02:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
    3c06:	76 ca       	rjmp	.-2836   	; 0x30f4 <main+0x6fc>
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WString.cpp:750
}

double String::toDouble(void) const
{
  if (buffer) return atof(buffer);
  return 0;
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	2d cb       	rjmp	.-2470   	; 0x326a <main+0x872>
ListenForRemoteControl():
F:\Arduino\projects\HPiECU/HPiECU.ino:1800
            RemoteShutDownFlag = true;
            RemoteShutDownLastMillis = millis();
        }
    } else
    {// Engine Is Off
        if (digitalRead(RemoteLSINpin) == HIGH)//Lock Or Silence Alarm 
    3c10:	83 e1       	ldi	r24, 0x13	; 19
    3c12:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	09 f0       	breq	.+2      	; 0x3c1c <main+0x1224>
    3c1a:	61 c0       	rjmp	.+194    	; 0x3cde <main+0x12e6>
F:\Arduino\projects\HPiECU/HPiECU.ino:1802
        {
          if(remote_LSI_flag == false)
    3c1c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <remote_LSI_flag>
    3c20:	81 11       	cpse	r24, r1
    3c22:	0c c0       	rjmp	.+24     	; 0x3c3c <main+0x1244>
F:\Arduino\projects\HPiECU/HPiECU.ino:1804
         {
          remote_LSI_flag = true;
    3c24:	10 93 15 02 	sts	0x0215, r17	; 0x800215 <remote_LSI_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1805
            RemoteLSstate++;
    3c28:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <RemoteLSstate>
    3c2c:	8f 5f       	subi	r24, 0xFF	; 255
    3c2e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <RemoteLSstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:1806
            switch (RemoteLSstate)
    3c32:	81 30       	cpi	r24, 0x01	; 1
    3c34:	e9 f1       	breq	.+122    	; 0x3cb0 <main+0x12b8>
    3c36:	82 30       	cpi	r24, 0x02	; 2
    3c38:	09 f4       	brne	.+2      	; 0x3c3c <main+0x1244>
    3c3a:	41 c0       	rjmp	.+130    	; 0x3cbe <main+0x12c6>
F:\Arduino\projects\HPiECU/HPiECU.ino:1831
        }else if (digitalRead(RemoteLSINpin) == LOW)
        {
         //reset the flag 
         remote_LSI_flag = false;
        }
        if (digitalRead(RemoteUnlockINpin) == HIGH)//Unlock ENGINE
    3c3c:	84 e1       	ldi	r24, 0x14	; 20
    3c3e:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <main+0x1250>
    3c46:	54 c0       	rjmp	.+168    	; 0x3cf0 <main+0x12f8>
F:\Arduino\projects\HPiECU/HPiECU.ino:1833
        {
          if (remote_unlock_flag == false)
    3c48:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <remote_unlock_flag>
    3c4c:	81 11       	cpse	r24, r1
    3c4e:	18 c0       	rjmp	.+48     	; 0x3c80 <main+0x1288>
F:\Arduino\projects\HPiECU/HPiECU.ino:1835
          {
            remote_unlock_flag = true;
    3c50:	10 93 0f 02 	sts	0x020F, r17	; 0x80020f <remote_unlock_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1836
          RemoteLSstate = 0;//restore LSI flag
    3c54:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <RemoteLSstate>
F:\Arduino\projects\HPiECU/HPiECU.ino:1837
          noTone(Piezo_OutPin);//Disable Alarm.
    3c58:	8c e1       	ldi	r24, 0x1C	; 28
    3c5a:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1838
            Alarm = false; //Disable Alarm.flags
    3c5e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <Alarm>
F:\Arduino\projects\HPiECU/HPiECU.ino:1839
            lockflag = false;////Reset "Lock" Flag. 
    3c62:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <lockflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1840
            PiezoDetected = false;//Reset "Piezo Detected" Flag. 
    3c66:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <PiezoDetected>
detachInterrupt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:359
      || defined(__AVR_ATmega16__)   || defined(__AVR_ATmega32__)   || defined(__AVR_ATmega162__)
        case 0:
          GICR &= ~(1 << INT0);
          break;
        case 1:
          GICR &= ~(1 << INT1);
    3c6a:	8b b7       	in	r24, 0x3b	; 59
    3c6c:	8f 77       	andi	r24, 0x7F	; 127
    3c6e:	8b bf       	out	0x3b, r24	; 59
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/WInterrupts.c:414
          EIMSK &= ~(1 << INT0);
          break;

      #endif
    }
    intFunc[interruptNum] = nothing;
    3c70:	30 92 74 00 	sts	0x0074, r3	; 0x800074 <intFunc+0x3>
    3c74:	20 92 73 00 	sts	0x0073, r2	; 0x800073 <intFunc+0x2>
ListenForRemoteControl():
F:\Arduino\projects\HPiECU/HPiECU.ino:1842
            detachInterrupt(digitalPinToInterrupt(ShakeSense_INpin));//disable Piezzo Interrupt
            digitalWrite(CDI_ShutDown_OutPin, LOW);//if Cdi was closed Open It.
    3c78:	60 e0       	ldi	r22, 0x00	; 0
    3c7a:	8e e1       	ldi	r24, 0x1E	; 30
    3c7c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1849
          }
        }else if (digitalRead(RemoteUnlockINpin) == LOW)
        {
          remote_unlock_flag = false;//Reset The Flag.
        }
        if (digitalRead(RemoteStartINpin) == HIGH && remote_start_flag == false)//Press Start Button.
    3c80:	86 e1       	ldi	r24, 0x16	; 22
    3c82:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	d9 f5       	brne	.+118    	; 0x3d00 <main+0x1308>
    3c8a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <remote_start_flag>
    3c8e:	81 11       	cpse	r24, r1
    3c90:	37 c0       	rjmp	.+110    	; 0x3d00 <main+0x1308>
F:\Arduino\projects\HPiECU/HPiECU.ino:1851
        {
          remote_start_flag  = true; //Set the Flag.
    3c92:	10 93 0e 02 	sts	0x020E, r17	; 0x80020e <remote_start_flag>
Switch_is_Open():
F:\Arduino\projects\HPiECU/HPiECU.ino:1757
/// check for switch is open or no
/// </summary>
/// <returns>True If Switch Was Physically Opened.Else False returned.</returns>
bool Switch_is_Open()
{
  if((digitalRead(VBattINpin)) == HIGH ){
    3c96:	8d e1       	ldi	r24, 0x1D	; 29
    3c98:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	19 f0       	breq	.+6      	; 0x3ca6 <main+0x12ae>
ListenForRemoteControl():
F:\Arduino\projects\HPiECU/HPiECU.ino:1854
        if (digitalRead(RemoteStartINpin) == HIGH && remote_start_flag == false)//Press Start Button.
        {
          remote_start_flag  = true; //Set the Flag.
          if(Switch_is_Open() == false)
          {
          TemporaryDOSwitch(true);
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	0e 94 95 05 	call	0xb2a	; 0xb2a <TemporaryDOSwitch(bool)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1856
          }
            digitalWrite(ENGINE_Start_OutPin, HIGH);
    3ca6:	61 e0       	ldi	r22, 0x01	; 1
    3ca8:	80 e1       	ldi	r24, 0x10	; 16
    3caa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
    3cae:	59 cd       	rjmp	.-1358   	; 0x3762 <main+0xd6a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1810
            RemoteLSstate++;
            switch (RemoteLSstate)
            {
            case 1://Lock
            //Serial.println("lock");
                Silenced = false;//Disable Silence Mode If Silenced.
    3cb0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <Silenced>
F:\Arduino\projects\HPiECU/HPiECU.ino:1811
                lockflag = true;
    3cb4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <lockflag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1812
                DoLock();
    3cb8:	0e 94 12 0c 	call	0x1824	; 0x1824 <DoLock()>
    3cbc:	bf cf       	rjmp	.-130    	; 0x3c3c <main+0x1244>
F:\Arduino\projects\HPiECU/HPiECU.ino:1816
                break;
            case 2://SilenceAlarm
            //Serial.println("silence");
             Serial.print(OutSerial_AlarmSilenced_cmd);//Tell UI To Dont Call Owner.
    3cbe:	85 ea       	ldi	r24, 0xA5	; 165
    3cc0:	91 e0       	ldi	r25, 0x01	; 1
    3cc2:	0e 94 45 0c 	call	0x188a	; 0x188a <Print::print(char const*) [clone .constprop.48]>
F:\Arduino\projects\HPiECU/HPiECU.ino:1817
                PiezoDetected = false;//Reset "Piezo Detected" Flag. 
    3cc6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <PiezoDetected>
F:\Arduino\projects\HPiECU/HPiECU.ino:1818
                noTone(Piezo_OutPin);//Disable Alarm.
    3cca:	8c e1       	ldi	r24, 0x1C	; 28
    3ccc:	0e 94 ad 03 	call	0x75a	; 0x75a <noTone(unsigned char)>
F:\Arduino\projects\HPiECU/HPiECU.ino:1819
                Alarm = false;//Disable Alarm
    3cd0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <Alarm>
F:\Arduino\projects\HPiECU/HPiECU.ino:1820
                Silenced = true;
    3cd4:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <Silenced>
F:\Arduino\projects\HPiECU/HPiECU.ino:1821
                RemoteLSstate = 0;//Reset The Counter
    3cd8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <RemoteLSstate>
    3cdc:	af cf       	rjmp	.-162    	; 0x3c3c <main+0x1244>
F:\Arduino\projects\HPiECU/HPiECU.ino:1826
                break;
            
            }    
         }    
        }else if (digitalRead(RemoteLSINpin) == LOW)
    3cde:	83 e1       	ldi	r24, 0x13	; 19
    3ce0:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3ce4:	89 2b       	or	r24, r25
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <main+0x12f2>
    3ce8:	a9 cf       	rjmp	.-174    	; 0x3c3c <main+0x1244>
F:\Arduino\projects\HPiECU/HPiECU.ino:1829
        {
         //reset the flag 
         remote_LSI_flag = false;
    3cea:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <remote_LSI_flag>
    3cee:	a6 cf       	rjmp	.-180    	; 0x3c3c <main+0x1244>
F:\Arduino\projects\HPiECU/HPiECU.ino:1845
            PiezoDetected = false;//Reset "Piezo Detected" Flag. 
            detachInterrupt(digitalPinToInterrupt(ShakeSense_INpin));//disable Piezzo Interrupt
            digitalWrite(CDI_ShutDown_OutPin, LOW);//if Cdi was closed Open It.
           // pinMode(ShakeSense_INpin, OUTPUT);
          }
        }else if (digitalRead(RemoteUnlockINpin) == LOW)
    3cf0:	84 e1       	ldi	r24, 0x14	; 20
    3cf2:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3cf6:	89 2b       	or	r24, r25
    3cf8:	19 f6       	brne	.-122    	; 0x3c80 <main+0x1288>
F:\Arduino\projects\HPiECU/HPiECU.ino:1847
        {
          remote_unlock_flag = false;//Reset The Flag.
    3cfa:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <remote_unlock_flag>
    3cfe:	c0 cf       	rjmp	.-128    	; 0x3c80 <main+0x1288>
F:\Arduino\projects\HPiECU/HPiECU.ino:1858
          {
          TemporaryDOSwitch(true);
          }
            digitalWrite(ENGINE_Start_OutPin, HIGH);

        } else if (digitalRead(RemoteStartINpin) == LOW)//Release Start Button.
    3d00:	86 e1       	ldi	r24, 0x16	; 22
    3d02:	0e 94 cf 00 	call	0x19e	; 0x19e <digitalRead>
    3d06:	89 2b       	or	r24, r25
    3d08:	09 f0       	breq	.+2      	; 0x3d0c <main+0x1314>
    3d0a:	2b cd       	rjmp	.-1450   	; 0x3762 <main+0xd6a>
F:\Arduino\projects\HPiECU/HPiECU.ino:1860
        {
          remote_start_flag = false; //Reset The Flag.
    3d0c:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <remote_start_flag>
F:\Arduino\projects\HPiECU/HPiECU.ino:1861
            digitalWrite(ENGINE_Start_OutPin, LOW);
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	80 e1       	ldi	r24, 0x10	; 16
    3d14:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalWrite>
F:\Arduino\projects\HPiECU/HPiECU.ino:1862
            TemporaryDOSwitch(false);
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	0e 94 95 05 	call	0xb2a	; 0xb2a <TemporaryDOSwitch(bool)>
    3d1e:	21 cd       	rjmp	.-1470   	; 0x3762 <main+0xd6a>

00003d20 <_GLOBAL__sub_D_thermocouple>:
__static_initialization_and_destruction_0():
F:\Arduino\projects\HPiECU/HPiECU.ino:288
byte eep_minServoAngleAddress = eep_minimumIdleRPMAddress + sizeof(byte);
byte eep_maxServoAngleAddress = eep_minServoAngleAddress + sizeof(uint16_t);
//byte eep_HornDelayAddress = eep_maxServoAngle + sizeof()
//
//Serial
String   input = "";
    3d20:	8a e1       	ldi	r24, 0x1A	; 26
    3d22:	93 e0       	ldi	r25, 0x03	; 3
    3d24:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <String::~String()>

00003d28 <atof>:
atof():
    3d28:	66 27       	eor	r22, r22
    3d2a:	77 27       	eor	r23, r23
    3d2c:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <strtod>

00003d30 <atol>:
atol():
    3d30:	1f 93       	push	r17
    3d32:	fc 01       	movw	r30, r24
    3d34:	99 27       	eor	r25, r25
    3d36:	88 27       	eor	r24, r24
    3d38:	bc 01       	movw	r22, r24
    3d3a:	e8 94       	clt
    3d3c:	11 91       	ld	r17, Z+
    3d3e:	10 32       	cpi	r17, 0x20	; 32
    3d40:	e9 f3       	breq	.-6      	; 0x3d3c <atol+0xc>
    3d42:	19 30       	cpi	r17, 0x09	; 9
    3d44:	10 f0       	brcs	.+4      	; 0x3d4a <atol+0x1a>
    3d46:	1e 30       	cpi	r17, 0x0E	; 14
    3d48:	c8 f3       	brcs	.-14     	; 0x3d3c <atol+0xc>
    3d4a:	1b 32       	cpi	r17, 0x2B	; 43
    3d4c:	51 f0       	breq	.+20     	; 0x3d62 <atol+0x32>
    3d4e:	1d 32       	cpi	r17, 0x2D	; 45
    3d50:	49 f4       	brne	.+18     	; 0x3d64 <atol+0x34>
    3d52:	68 94       	set
    3d54:	06 c0       	rjmp	.+12     	; 0x3d62 <atol+0x32>
    3d56:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsi_const_10>
    3d5a:	61 0f       	add	r22, r17
    3d5c:	71 1d       	adc	r23, r1
    3d5e:	81 1d       	adc	r24, r1
    3d60:	91 1d       	adc	r25, r1
    3d62:	11 91       	ld	r17, Z+
    3d64:	10 53       	subi	r17, 0x30	; 48
    3d66:	1a 30       	cpi	r17, 0x0A	; 10
    3d68:	b0 f3       	brcs	.-20     	; 0x3d56 <atol+0x26>
    3d6a:	3e f4       	brtc	.+14     	; 0x3d7a <atol+0x4a>
    3d6c:	90 95       	com	r25
    3d6e:	80 95       	com	r24
    3d70:	70 95       	com	r23
    3d72:	61 95       	neg	r22
    3d74:	7f 4f       	sbci	r23, 0xFF	; 255
    3d76:	8f 4f       	sbci	r24, 0xFF	; 255
    3d78:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7a:	1f 91       	pop	r17
    3d7c:	08 95       	ret

00003d7e <__mulsi_const_10>:
__mulsi_const_10():
    3d7e:	59 2f       	mov	r21, r25
    3d80:	48 2f       	mov	r20, r24
    3d82:	37 2f       	mov	r19, r23
    3d84:	26 2f       	mov	r18, r22
    3d86:	66 0f       	add	r22, r22
    3d88:	77 1f       	adc	r23, r23
    3d8a:	88 1f       	adc	r24, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	66 0f       	add	r22, r22
    3d90:	77 1f       	adc	r23, r23
    3d92:	88 1f       	adc	r24, r24
    3d94:	99 1f       	adc	r25, r25
    3d96:	62 0f       	add	r22, r18
    3d98:	73 1f       	adc	r23, r19
    3d9a:	84 1f       	adc	r24, r20
    3d9c:	95 1f       	adc	r25, r21
    3d9e:	66 0f       	add	r22, r22
    3da0:	77 1f       	adc	r23, r23
    3da2:	88 1f       	adc	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	08 95       	ret

00003da8 <strtod>:
strtod():
    3da8:	b0 e0       	ldi	r27, 0x00	; 0
    3daa:	a0 e0       	ldi	r26, 0x00	; 0
    3dac:	ea ed       	ldi	r30, 0xDA	; 218
    3dae:	fe e1       	ldi	r31, 0x1E	; 30
    3db0:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <__prologue_saves__+0xc>
    3db4:	5c 01       	movw	r10, r24
    3db6:	7b 01       	movw	r14, r22
    3db8:	61 15       	cp	r22, r1
    3dba:	71 05       	cpc	r23, r1
    3dbc:	19 f0       	breq	.+6      	; 0x3dc4 <strtod+0x1c>
    3dbe:	db 01       	movw	r26, r22
    3dc0:	8d 93       	st	X+, r24
    3dc2:	9c 93       	st	X, r25
    3dc4:	85 01       	movw	r16, r10
    3dc6:	0f 5f       	subi	r16, 0xFF	; 255
    3dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dca:	f5 01       	movw	r30, r10
    3dcc:	d0 81       	ld	r29, Z
    3dce:	8d 2f       	mov	r24, r29
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	0e 94 24 20 	call	0x4048	; 0x4048 <isspace>
    3dd6:	6c 01       	movw	r12, r24
    3dd8:	89 2b       	or	r24, r25
    3dda:	b9 f5       	brne	.+110    	; 0x3e4a <strtod+0xa2>
    3ddc:	dd 32       	cpi	r29, 0x2D	; 45
    3dde:	b9 f5       	brne	.+110    	; 0x3e4e <strtod+0xa6>
    3de0:	0f 5f       	subi	r16, 0xFF	; 255
    3de2:	1f 4f       	sbci	r17, 0xFF	; 255
    3de4:	d5 01       	movw	r26, r10
    3de6:	11 96       	adiw	r26, 0x01	; 1
    3de8:	dc 91       	ld	r29, X
    3dea:	c1 e0       	ldi	r28, 0x01	; 1
    3dec:	58 01       	movw	r10, r16
    3dee:	f1 e0       	ldi	r31, 0x01	; 1
    3df0:	af 1a       	sub	r10, r31
    3df2:	b1 08       	sbc	r11, r1
    3df4:	43 e0       	ldi	r20, 0x03	; 3
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	6c e5       	ldi	r22, 0x5C	; 92
    3dfa:	70 e0       	ldi	r23, 0x00	; 0
    3dfc:	c5 01       	movw	r24, r10
    3dfe:	0e 94 2d 20 	call	0x405a	; 0x405a <strncasecmp_P>
    3e02:	89 2b       	or	r24, r25
    3e04:	69 f5       	brne	.+90     	; 0x3e60 <strtod+0xb8>
    3e06:	68 01       	movw	r12, r16
    3e08:	82 e0       	ldi	r24, 0x02	; 2
    3e0a:	c8 0e       	add	r12, r24
    3e0c:	d1 1c       	adc	r13, r1
    3e0e:	45 e0       	ldi	r20, 0x05	; 5
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	67 e5       	ldi	r22, 0x57	; 87
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	c6 01       	movw	r24, r12
    3e18:	0e 94 2d 20 	call	0x405a	; 0x405a <strncasecmp_P>
    3e1c:	89 2b       	or	r24, r25
    3e1e:	21 f4       	brne	.+8      	; 0x3e28 <strtod+0x80>
    3e20:	68 01       	movw	r12, r16
    3e22:	97 e0       	ldi	r25, 0x07	; 7
    3e24:	c9 0e       	add	r12, r25
    3e26:	d1 1c       	adc	r13, r1
    3e28:	e1 14       	cp	r14, r1
    3e2a:	f1 04       	cpc	r15, r1
    3e2c:	19 f0       	breq	.+6      	; 0x3e34 <strtod+0x8c>
    3e2e:	d7 01       	movw	r26, r14
    3e30:	cd 92       	st	X+, r12
    3e32:	dc 92       	st	X, r13
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	70 e0       	ldi	r23, 0x00	; 0
    3e38:	80 e8       	ldi	r24, 0x80	; 128
    3e3a:	9f ef       	ldi	r25, 0xFF	; 255
    3e3c:	c1 11       	cpse	r28, r1
    3e3e:	ff c0       	rjmp	.+510    	; 0x403e <strtod+0x296>
    3e40:	60 e0       	ldi	r22, 0x00	; 0
    3e42:	70 e0       	ldi	r23, 0x00	; 0
    3e44:	80 e8       	ldi	r24, 0x80	; 128
    3e46:	9f e7       	ldi	r25, 0x7F	; 127
    3e48:	fa c0       	rjmp	.+500    	; 0x403e <strtod+0x296>
    3e4a:	58 01       	movw	r10, r16
    3e4c:	bb cf       	rjmp	.-138    	; 0x3dc4 <strtod+0x1c>
    3e4e:	db 32       	cpi	r29, 0x2B	; 43
    3e50:	29 f4       	brne	.+10     	; 0x3e5c <strtod+0xb4>
    3e52:	85 01       	movw	r16, r10
    3e54:	0e 5f       	subi	r16, 0xFE	; 254
    3e56:	1f 4f       	sbci	r17, 0xFF	; 255
    3e58:	f5 01       	movw	r30, r10
    3e5a:	d1 81       	ldd	r29, Z+1	; 0x01
    3e5c:	c0 e0       	ldi	r28, 0x00	; 0
    3e5e:	c6 cf       	rjmp	.-116    	; 0x3dec <strtod+0x44>
    3e60:	43 e0       	ldi	r20, 0x03	; 3
    3e62:	50 e0       	ldi	r21, 0x00	; 0
    3e64:	64 e5       	ldi	r22, 0x54	; 84
    3e66:	70 e0       	ldi	r23, 0x00	; 0
    3e68:	c5 01       	movw	r24, r10
    3e6a:	0e 94 2d 20 	call	0x405a	; 0x405a <strncasecmp_P>
    3e6e:	89 2b       	or	r24, r25
    3e70:	e9 f0       	breq	.+58     	; 0x3eac <strtod+0x104>
    3e72:	f8 01       	movw	r30, r16
    3e74:	10 e0       	ldi	r17, 0x00	; 0
    3e76:	00 e0       	ldi	r16, 0x00	; 0
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	a9 01       	movw	r20, r18
    3e7e:	5f 01       	movw	r10, r30
    3e80:	b0 ed       	ldi	r27, 0xD0	; 208
    3e82:	8b 2e       	mov	r8, r27
    3e84:	8d 0e       	add	r8, r29
    3e86:	89 e0       	ldi	r24, 0x09	; 9
    3e88:	88 15       	cp	r24, r8
    3e8a:	c8 f1       	brcs	.+114    	; 0x3efe <strtod+0x156>
    3e8c:	9c 2e       	mov	r9, r28
    3e8e:	68 94       	set
    3e90:	91 f8       	bld	r9, 1
    3e92:	8c 2f       	mov	r24, r28
    3e94:	88 70       	andi	r24, 0x08	; 8
    3e96:	c2 ff       	sbrs	r28, 2
    3e98:	16 c0       	rjmp	.+44     	; 0x3ec6 <strtod+0x11e>
    3e9a:	81 11       	cpse	r24, r1
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <strtod+0xfa>
    3e9e:	0f 5f       	subi	r16, 0xFF	; 255
    3ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea2:	31 96       	adiw	r30, 0x01	; 1
    3ea4:	d5 01       	movw	r26, r10
    3ea6:	dc 91       	ld	r29, X
    3ea8:	c9 2d       	mov	r28, r9
    3eaa:	e9 cf       	rjmp	.-46     	; 0x3e7e <strtod+0xd6>
    3eac:	e1 14       	cp	r14, r1
    3eae:	f1 04       	cpc	r15, r1
    3eb0:	29 f0       	breq	.+10     	; 0x3ebc <strtod+0x114>
    3eb2:	0e 5f       	subi	r16, 0xFE	; 254
    3eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb6:	f7 01       	movw	r30, r14
    3eb8:	11 83       	std	Z+1, r17	; 0x01
    3eba:	00 83       	st	Z, r16
    3ebc:	60 e0       	ldi	r22, 0x00	; 0
    3ebe:	70 e0       	ldi	r23, 0x00	; 0
    3ec0:	80 ec       	ldi	r24, 0xC0	; 192
    3ec2:	9f e7       	ldi	r25, 0x7F	; 127
    3ec4:	bc c0       	rjmp	.+376    	; 0x403e <strtod+0x296>
    3ec6:	88 23       	and	r24, r24
    3ec8:	11 f0       	breq	.+4      	; 0x3ece <strtod+0x126>
    3eca:	01 50       	subi	r16, 0x01	; 1
    3ecc:	11 09       	sbc	r17, r1
    3ece:	a5 e0       	ldi	r26, 0x05	; 5
    3ed0:	b0 e0       	ldi	r27, 0x00	; 0
    3ed2:	0e 94 a0 21 	call	0x4340	; 0x4340 <__muluhisi3>
    3ed6:	9b 01       	movw	r18, r22
    3ed8:	ac 01       	movw	r20, r24
    3eda:	22 0f       	add	r18, r18
    3edc:	33 1f       	adc	r19, r19
    3ede:	44 1f       	adc	r20, r20
    3ee0:	55 1f       	adc	r21, r21
    3ee2:	28 0d       	add	r18, r8
    3ee4:	31 1d       	adc	r19, r1
    3ee6:	41 1d       	adc	r20, r1
    3ee8:	51 1d       	adc	r21, r1
    3eea:	28 39       	cpi	r18, 0x98	; 152
    3eec:	99 e9       	ldi	r25, 0x99	; 153
    3eee:	39 07       	cpc	r19, r25
    3ef0:	49 07       	cpc	r20, r25
    3ef2:	99 e1       	ldi	r25, 0x19	; 25
    3ef4:	59 07       	cpc	r21, r25
    3ef6:	a8 f2       	brcs	.-86     	; 0x3ea2 <strtod+0xfa>
    3ef8:	c6 60       	ori	r28, 0x06	; 6
    3efa:	9c 2e       	mov	r9, r28
    3efc:	d2 cf       	rjmp	.-92     	; 0x3ea2 <strtod+0xfa>
    3efe:	ae ef       	ldi	r26, 0xFE	; 254
    3f00:	8a 12       	cpse	r8, r26
    3f02:	06 c0       	rjmp	.+12     	; 0x3f10 <strtod+0x168>
    3f04:	c3 fd       	sbrc	r28, 3
    3f06:	3c c0       	rjmp	.+120    	; 0x3f80 <strtod+0x1d8>
    3f08:	9c 2e       	mov	r9, r28
    3f0a:	68 94       	set
    3f0c:	93 f8       	bld	r9, 3
    3f0e:	c9 cf       	rjmp	.-110    	; 0x3ea2 <strtod+0xfa>
    3f10:	df 7d       	andi	r29, 0xDF	; 223
    3f12:	d5 34       	cpi	r29, 0x45	; 69
    3f14:	a9 f5       	brne	.+106    	; 0x3f80 <strtod+0x1d8>
    3f16:	80 81       	ld	r24, Z
    3f18:	8d 32       	cpi	r24, 0x2D	; 45
    3f1a:	39 f4       	brne	.+14     	; 0x3f2a <strtod+0x182>
    3f1c:	c0 61       	ori	r28, 0x10	; 16
    3f1e:	df 01       	movw	r26, r30
    3f20:	12 96       	adiw	r26, 0x02	; 2
    3f22:	81 81       	ldd	r24, Z+1	; 0x01
    3f24:	62 e0       	ldi	r22, 0x02	; 2
    3f26:	70 e0       	ldi	r23, 0x00	; 0
    3f28:	06 c0       	rjmp	.+12     	; 0x3f36 <strtod+0x18e>
    3f2a:	df 01       	movw	r26, r30
    3f2c:	8b 32       	cpi	r24, 0x2B	; 43
    3f2e:	c1 f3       	breq	.-16     	; 0x3f20 <strtod+0x178>
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	61 e0       	ldi	r22, 0x01	; 1
    3f34:	70 e0       	ldi	r23, 0x00	; 0
    3f36:	80 53       	subi	r24, 0x30	; 48
    3f38:	5d 01       	movw	r10, r26
    3f3a:	a6 1a       	sub	r10, r22
    3f3c:	b7 0a       	sbc	r11, r23
    3f3e:	8a 30       	cpi	r24, 0x0A	; 10
    3f40:	f8 f4       	brcc	.+62     	; 0x3f80 <strtod+0x1d8>
    3f42:	e0 e8       	ldi	r30, 0x80	; 128
    3f44:	ce 16       	cp	r12, r30
    3f46:	ec e0       	ldi	r30, 0x0C	; 12
    3f48:	de 06       	cpc	r13, r30
    3f4a:	5c f4       	brge	.+22     	; 0x3f62 <strtod+0x1ba>
    3f4c:	b6 01       	movw	r22, r12
    3f4e:	66 0f       	add	r22, r22
    3f50:	77 1f       	adc	r23, r23
    3f52:	66 0f       	add	r22, r22
    3f54:	77 1f       	adc	r23, r23
    3f56:	c6 0e       	add	r12, r22
    3f58:	d7 1e       	adc	r13, r23
    3f5a:	cc 0c       	add	r12, r12
    3f5c:	dd 1c       	adc	r13, r13
    3f5e:	c8 0e       	add	r12, r24
    3f60:	d1 1c       	adc	r13, r1
    3f62:	5d 01       	movw	r10, r26
    3f64:	ff ef       	ldi	r31, 0xFF	; 255
    3f66:	af 1a       	sub	r10, r31
    3f68:	bf 0a       	sbc	r11, r31
    3f6a:	8c 91       	ld	r24, X
    3f6c:	80 53       	subi	r24, 0x30	; 48
    3f6e:	8a 30       	cpi	r24, 0x0A	; 10
    3f70:	a8 f1       	brcs	.+106    	; 0x3fdc <strtod+0x234>
    3f72:	c4 ff       	sbrs	r28, 4
    3f74:	03 c0       	rjmp	.+6      	; 0x3f7c <strtod+0x1d4>
    3f76:	d1 94       	neg	r13
    3f78:	c1 94       	neg	r12
    3f7a:	d1 08       	sbc	r13, r1
    3f7c:	0c 0d       	add	r16, r12
    3f7e:	1d 1d       	adc	r17, r13
    3f80:	c1 ff       	sbrs	r28, 1
    3f82:	09 c0       	rjmp	.+18     	; 0x3f96 <strtod+0x1ee>
    3f84:	e1 14       	cp	r14, r1
    3f86:	f1 04       	cpc	r15, r1
    3f88:	31 f0       	breq	.+12     	; 0x3f96 <strtod+0x1ee>
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	a8 1a       	sub	r10, r24
    3f8e:	b1 08       	sbc	r11, r1
    3f90:	d7 01       	movw	r26, r14
    3f92:	ad 92       	st	X+, r10
    3f94:	bc 92       	st	X, r11
    3f96:	ca 01       	movw	r24, r20
    3f98:	b9 01       	movw	r22, r18
    3f9a:	0e 94 4a 20 	call	0x4094	; 0x4094 <__floatunsisf>
    3f9e:	c3 70       	andi	r28, 0x03	; 3
    3fa0:	c3 30       	cpi	r28, 0x03	; 3
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <strtod+0x1fe>
    3fa4:	90 58       	subi	r25, 0x80	; 128
    3fa6:	4b 01       	movw	r8, r22
    3fa8:	5c 01       	movw	r10, r24
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	a9 01       	movw	r20, r18
    3fb0:	0e 94 45 20 	call	0x408a	; 0x408a <__cmpsf2>
    3fb4:	88 23       	and	r24, r24
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <strtod+0x212>
    3fb8:	40 c0       	rjmp	.+128    	; 0x403a <strtod+0x292>
    3fba:	cb e8       	ldi	r28, 0x8B	; 139
    3fbc:	d0 e0       	ldi	r29, 0x00	; 0
    3fbe:	17 ff       	sbrs	r17, 7
    3fc0:	05 c0       	rjmp	.+10     	; 0x3fcc <strtod+0x224>
    3fc2:	11 95       	neg	r17
    3fc4:	01 95       	neg	r16
    3fc6:	11 09       	sbc	r17, r1
    3fc8:	c3 e7       	ldi	r28, 0x73	; 115
    3fca:	d0 e0       	ldi	r29, 0x00	; 0
    3fcc:	6e 01       	movw	r12, r28
    3fce:	b8 e1       	ldi	r27, 0x18	; 24
    3fd0:	cb 1a       	sub	r12, r27
    3fd2:	d1 08       	sbc	r13, r1
    3fd4:	80 e2       	ldi	r24, 0x20	; 32
    3fd6:	e8 2e       	mov	r14, r24
    3fd8:	f1 2c       	mov	r15, r1
    3fda:	0f c0       	rjmp	.+30     	; 0x3ffa <strtod+0x252>
    3fdc:	d5 01       	movw	r26, r10
    3fde:	b1 cf       	rjmp	.-158    	; 0x3f42 <strtod+0x19a>
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	25 91       	lpm	r18, Z+
    3fe4:	35 91       	lpm	r19, Z+
    3fe6:	45 91       	lpm	r20, Z+
    3fe8:	54 91       	lpm	r21, Z
    3fea:	0e 19       	sub	r16, r14
    3fec:	1f 09       	sbc	r17, r15
    3fee:	c5 01       	movw	r24, r10
    3ff0:	b4 01       	movw	r22, r8
    3ff2:	0e 94 ab 20 	call	0x4156	; 0x4156 <__mulsf3>
    3ff6:	4b 01       	movw	r8, r22
    3ff8:	5c 01       	movw	r10, r24
    3ffa:	d5 01       	movw	r26, r10
    3ffc:	c4 01       	movw	r24, r8
    3ffe:	0e 15       	cp	r16, r14
    4000:	1f 05       	cpc	r17, r15
    4002:	74 f7       	brge	.-36     	; 0x3fe0 <strtod+0x238>
    4004:	24 97       	sbiw	r28, 0x04	; 4
    4006:	f5 94       	asr	r15
    4008:	e7 94       	ror	r14
    400a:	cc 16       	cp	r12, r28
    400c:	dd 06       	cpc	r13, r29
    400e:	a9 f7       	brne	.-22     	; 0x3ffa <strtod+0x252>
    4010:	8a 2f       	mov	r24, r26
    4012:	88 0f       	add	r24, r24
    4014:	8b 2f       	mov	r24, r27
    4016:	88 1f       	adc	r24, r24
    4018:	8f 3f       	cpi	r24, 0xFF	; 255
    401a:	49 f0       	breq	.+18     	; 0x402e <strtod+0x286>
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	a9 01       	movw	r20, r18
    4022:	c5 01       	movw	r24, r10
    4024:	b4 01       	movw	r22, r8
    4026:	0e 94 45 20 	call	0x408a	; 0x408a <__cmpsf2>
    402a:	81 11       	cpse	r24, r1
    402c:	06 c0       	rjmp	.+12     	; 0x403a <strtod+0x292>
    402e:	82 e2       	ldi	r24, 0x22	; 34
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <errno+0x1>
    4036:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <errno>
    403a:	c5 01       	movw	r24, r10
    403c:	b4 01       	movw	r22, r8
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	ec e0       	ldi	r30, 0x0C	; 12
    4044:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__epilogue_restores__+0xc>

00004048 <isspace>:
isspace():
    4048:	91 11       	cpse	r25, r1
    404a:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__ctype_isfalse>
    404e:	80 32       	cpi	r24, 0x20	; 32
    4050:	19 f0       	breq	.+6      	; 0x4058 <isspace+0x10>
    4052:	89 50       	subi	r24, 0x09	; 9
    4054:	85 50       	subi	r24, 0x05	; 5
    4056:	c8 f7       	brcc	.-14     	; 0x404a <isspace+0x2>
    4058:	08 95       	ret

0000405a <strncasecmp_P>:
strncasecmp_P():
    405a:	fb 01       	movw	r30, r22
    405c:	dc 01       	movw	r26, r24
    405e:	41 50       	subi	r20, 0x01	; 1
    4060:	50 40       	sbci	r21, 0x00	; 0
    4062:	88 f0       	brcs	.+34     	; 0x4086 <strncasecmp_P+0x2c>
    4064:	8d 91       	ld	r24, X+
    4066:	81 34       	cpi	r24, 0x41	; 65
    4068:	1c f0       	brlt	.+6      	; 0x4070 <strncasecmp_P+0x16>
    406a:	8b 35       	cpi	r24, 0x5B	; 91
    406c:	0c f4       	brge	.+2      	; 0x4070 <strncasecmp_P+0x16>
    406e:	80 5e       	subi	r24, 0xE0	; 224
    4070:	65 91       	lpm	r22, Z+
    4072:	61 34       	cpi	r22, 0x41	; 65
    4074:	1c f0       	brlt	.+6      	; 0x407c <strncasecmp_P+0x22>
    4076:	6b 35       	cpi	r22, 0x5B	; 91
    4078:	0c f4       	brge	.+2      	; 0x407c <strncasecmp_P+0x22>
    407a:	60 5e       	subi	r22, 0xE0	; 224
    407c:	86 1b       	sub	r24, r22
    407e:	61 11       	cpse	r22, r1
    4080:	71 f3       	breq	.-36     	; 0x405e <strncasecmp_P+0x4>
    4082:	99 0b       	sbc	r25, r25
    4084:	08 95       	ret
    4086:	88 1b       	sub	r24, r24
    4088:	fc cf       	rjmp	.-8      	; 0x4082 <strncasecmp_P+0x28>

0000408a <__cmpsf2>:
__cmpsf2():
    408a:	0e 94 87 20 	call	0x410e	; 0x410e <__fp_cmp>
    408e:	08 f4       	brcc	.+2      	; 0x4092 <__cmpsf2+0x8>
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	08 95       	ret

00004094 <__floatunsisf>:
__floatunsisf():
    4094:	e8 94       	clt
    4096:	09 c0       	rjmp	.+18     	; 0x40aa <__floatsisf+0x12>

00004098 <__floatsisf>:
    4098:	97 fb       	bst	r25, 7
    409a:	3e f4       	brtc	.+14     	; 0x40aa <__floatsisf+0x12>
    409c:	90 95       	com	r25
    409e:	80 95       	com	r24
    40a0:	70 95       	com	r23
    40a2:	61 95       	neg	r22
    40a4:	7f 4f       	sbci	r23, 0xFF	; 255
    40a6:	8f 4f       	sbci	r24, 0xFF	; 255
    40a8:	9f 4f       	sbci	r25, 0xFF	; 255
    40aa:	99 23       	and	r25, r25
    40ac:	a9 f0       	breq	.+42     	; 0x40d8 <__floatsisf+0x40>
    40ae:	f9 2f       	mov	r31, r25
    40b0:	96 e9       	ldi	r25, 0x96	; 150
    40b2:	bb 27       	eor	r27, r27
    40b4:	93 95       	inc	r25
    40b6:	f6 95       	lsr	r31
    40b8:	87 95       	ror	r24
    40ba:	77 95       	ror	r23
    40bc:	67 95       	ror	r22
    40be:	b7 95       	ror	r27
    40c0:	f1 11       	cpse	r31, r1
    40c2:	f8 cf       	rjmp	.-16     	; 0x40b4 <__floatsisf+0x1c>
    40c4:	fa f4       	brpl	.+62     	; 0x4104 <__floatsisf+0x6c>
    40c6:	bb 0f       	add	r27, r27
    40c8:	11 f4       	brne	.+4      	; 0x40ce <__floatsisf+0x36>
    40ca:	60 ff       	sbrs	r22, 0
    40cc:	1b c0       	rjmp	.+54     	; 0x4104 <__floatsisf+0x6c>
    40ce:	6f 5f       	subi	r22, 0xFF	; 255
    40d0:	7f 4f       	sbci	r23, 0xFF	; 255
    40d2:	8f 4f       	sbci	r24, 0xFF	; 255
    40d4:	9f 4f       	sbci	r25, 0xFF	; 255
    40d6:	16 c0       	rjmp	.+44     	; 0x4104 <__floatsisf+0x6c>
    40d8:	88 23       	and	r24, r24
    40da:	11 f0       	breq	.+4      	; 0x40e0 <__floatsisf+0x48>
    40dc:	96 e9       	ldi	r25, 0x96	; 150
    40de:	11 c0       	rjmp	.+34     	; 0x4102 <__floatsisf+0x6a>
    40e0:	77 23       	and	r23, r23
    40e2:	21 f0       	breq	.+8      	; 0x40ec <__floatsisf+0x54>
    40e4:	9e e8       	ldi	r25, 0x8E	; 142
    40e6:	87 2f       	mov	r24, r23
    40e8:	76 2f       	mov	r23, r22
    40ea:	05 c0       	rjmp	.+10     	; 0x40f6 <__floatsisf+0x5e>
    40ec:	66 23       	and	r22, r22
    40ee:	71 f0       	breq	.+28     	; 0x410c <__floatsisf+0x74>
    40f0:	96 e8       	ldi	r25, 0x86	; 134
    40f2:	86 2f       	mov	r24, r22
    40f4:	70 e0       	ldi	r23, 0x00	; 0
    40f6:	60 e0       	ldi	r22, 0x00	; 0
    40f8:	2a f0       	brmi	.+10     	; 0x4104 <__floatsisf+0x6c>
    40fa:	9a 95       	dec	r25
    40fc:	66 0f       	add	r22, r22
    40fe:	77 1f       	adc	r23, r23
    4100:	88 1f       	adc	r24, r24
    4102:	da f7       	brpl	.-10     	; 0x40fa <__floatsisf+0x62>
    4104:	88 0f       	add	r24, r24
    4106:	96 95       	lsr	r25
    4108:	87 95       	ror	r24
    410a:	97 f9       	bld	r25, 7
    410c:	08 95       	ret

0000410e <__fp_cmp>:
__fp_cmp():
    410e:	99 0f       	add	r25, r25
    4110:	00 08       	sbc	r0, r0
    4112:	55 0f       	add	r21, r21
    4114:	aa 0b       	sbc	r26, r26
    4116:	e0 e8       	ldi	r30, 0x80	; 128
    4118:	fe ef       	ldi	r31, 0xFE	; 254
    411a:	16 16       	cp	r1, r22
    411c:	17 06       	cpc	r1, r23
    411e:	e8 07       	cpc	r30, r24
    4120:	f9 07       	cpc	r31, r25
    4122:	c0 f0       	brcs	.+48     	; 0x4154 <__fp_cmp+0x46>
    4124:	12 16       	cp	r1, r18
    4126:	13 06       	cpc	r1, r19
    4128:	e4 07       	cpc	r30, r20
    412a:	f5 07       	cpc	r31, r21
    412c:	98 f0       	brcs	.+38     	; 0x4154 <__fp_cmp+0x46>
    412e:	62 1b       	sub	r22, r18
    4130:	73 0b       	sbc	r23, r19
    4132:	84 0b       	sbc	r24, r20
    4134:	95 0b       	sbc	r25, r21
    4136:	39 f4       	brne	.+14     	; 0x4146 <__fp_cmp+0x38>
    4138:	0a 26       	eor	r0, r26
    413a:	61 f0       	breq	.+24     	; 0x4154 <__fp_cmp+0x46>
    413c:	23 2b       	or	r18, r19
    413e:	24 2b       	or	r18, r20
    4140:	25 2b       	or	r18, r21
    4142:	21 f4       	brne	.+8      	; 0x414c <__fp_cmp+0x3e>
    4144:	08 95       	ret
    4146:	0a 26       	eor	r0, r26
    4148:	09 f4       	brne	.+2      	; 0x414c <__fp_cmp+0x3e>
    414a:	a1 40       	sbci	r26, 0x01	; 1
    414c:	a6 95       	lsr	r26
    414e:	8f ef       	ldi	r24, 0xFF	; 255
    4150:	81 1d       	adc	r24, r1
    4152:	81 1d       	adc	r24, r1
    4154:	08 95       	ret

00004156 <__mulsf3>:
__mulsf3():
    4156:	0e 94 be 20 	call	0x417c	; 0x417c <__mulsf3x>
    415a:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__fp_round>
    415e:	0e 94 24 21 	call	0x4248	; 0x4248 <__fp_pscA>
    4162:	38 f0       	brcs	.+14     	; 0x4172 <__mulsf3+0x1c>
    4164:	0e 94 2b 21 	call	0x4256	; 0x4256 <__fp_pscB>
    4168:	20 f0       	brcs	.+8      	; 0x4172 <__mulsf3+0x1c>
    416a:	95 23       	and	r25, r21
    416c:	11 f0       	breq	.+4      	; 0x4172 <__mulsf3+0x1c>
    416e:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__fp_inf>
    4172:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__fp_nan>
    4176:	11 24       	eor	r1, r1
    4178:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__fp_szero>

0000417c <__mulsf3x>:
__mulsf3x():
    417c:	0e 94 43 21 	call	0x4286	; 0x4286 <__fp_split3>
    4180:	70 f3       	brcs	.-36     	; 0x415e <__mulsf3+0x8>

00004182 <__mulsf3_pse>:
    4182:	95 9f       	mul	r25, r21
    4184:	c1 f3       	breq	.-16     	; 0x4176 <__mulsf3+0x20>
    4186:	95 0f       	add	r25, r21
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	55 1f       	adc	r21, r21
    418c:	62 9f       	mul	r22, r18
    418e:	f0 01       	movw	r30, r0
    4190:	72 9f       	mul	r23, r18
    4192:	bb 27       	eor	r27, r27
    4194:	f0 0d       	add	r31, r0
    4196:	b1 1d       	adc	r27, r1
    4198:	63 9f       	mul	r22, r19
    419a:	aa 27       	eor	r26, r26
    419c:	f0 0d       	add	r31, r0
    419e:	b1 1d       	adc	r27, r1
    41a0:	aa 1f       	adc	r26, r26
    41a2:	64 9f       	mul	r22, r20
    41a4:	66 27       	eor	r22, r22
    41a6:	b0 0d       	add	r27, r0
    41a8:	a1 1d       	adc	r26, r1
    41aa:	66 1f       	adc	r22, r22
    41ac:	82 9f       	mul	r24, r18
    41ae:	22 27       	eor	r18, r18
    41b0:	b0 0d       	add	r27, r0
    41b2:	a1 1d       	adc	r26, r1
    41b4:	62 1f       	adc	r22, r18
    41b6:	73 9f       	mul	r23, r19
    41b8:	b0 0d       	add	r27, r0
    41ba:	a1 1d       	adc	r26, r1
    41bc:	62 1f       	adc	r22, r18
    41be:	83 9f       	mul	r24, r19
    41c0:	a0 0d       	add	r26, r0
    41c2:	61 1d       	adc	r22, r1
    41c4:	22 1f       	adc	r18, r18
    41c6:	74 9f       	mul	r23, r20
    41c8:	33 27       	eor	r19, r19
    41ca:	a0 0d       	add	r26, r0
    41cc:	61 1d       	adc	r22, r1
    41ce:	23 1f       	adc	r18, r19
    41d0:	84 9f       	mul	r24, r20
    41d2:	60 0d       	add	r22, r0
    41d4:	21 1d       	adc	r18, r1
    41d6:	82 2f       	mov	r24, r18
    41d8:	76 2f       	mov	r23, r22
    41da:	6a 2f       	mov	r22, r26
    41dc:	11 24       	eor	r1, r1
    41de:	9f 57       	subi	r25, 0x7F	; 127
    41e0:	50 40       	sbci	r21, 0x00	; 0
    41e2:	9a f0       	brmi	.+38     	; 0x420a <__mulsf3_pse+0x88>
    41e4:	f1 f0       	breq	.+60     	; 0x4222 <__mulsf3_pse+0xa0>
    41e6:	88 23       	and	r24, r24
    41e8:	4a f0       	brmi	.+18     	; 0x41fc <__mulsf3_pse+0x7a>
    41ea:	ee 0f       	add	r30, r30
    41ec:	ff 1f       	adc	r31, r31
    41ee:	bb 1f       	adc	r27, r27
    41f0:	66 1f       	adc	r22, r22
    41f2:	77 1f       	adc	r23, r23
    41f4:	88 1f       	adc	r24, r24
    41f6:	91 50       	subi	r25, 0x01	; 1
    41f8:	50 40       	sbci	r21, 0x00	; 0
    41fa:	a9 f7       	brne	.-22     	; 0x41e6 <__mulsf3_pse+0x64>
    41fc:	9e 3f       	cpi	r25, 0xFE	; 254
    41fe:	51 05       	cpc	r21, r1
    4200:	80 f0       	brcs	.+32     	; 0x4222 <__mulsf3_pse+0xa0>
    4202:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__fp_inf>
    4206:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__fp_szero>
    420a:	5f 3f       	cpi	r21, 0xFF	; 255
    420c:	e4 f3       	brlt	.-8      	; 0x4206 <__mulsf3_pse+0x84>
    420e:	98 3e       	cpi	r25, 0xE8	; 232
    4210:	d4 f3       	brlt	.-12     	; 0x4206 <__mulsf3_pse+0x84>
    4212:	86 95       	lsr	r24
    4214:	77 95       	ror	r23
    4216:	67 95       	ror	r22
    4218:	b7 95       	ror	r27
    421a:	f7 95       	ror	r31
    421c:	e7 95       	ror	r30
    421e:	9f 5f       	subi	r25, 0xFF	; 255
    4220:	c1 f7       	brne	.-16     	; 0x4212 <__mulsf3_pse+0x90>
    4222:	fe 2b       	or	r31, r30
    4224:	88 0f       	add	r24, r24
    4226:	91 1d       	adc	r25, r1
    4228:	96 95       	lsr	r25
    422a:	87 95       	ror	r24
    422c:	97 f9       	bld	r25, 7
    422e:	08 95       	ret

00004230 <__ctype_isfalse>:
    4230:	99 27       	eor	r25, r25
    4232:	88 27       	eor	r24, r24

00004234 <__ctype_istrue>:
    4234:	08 95       	ret

00004236 <__fp_inf>:
    4236:	97 f9       	bld	r25, 7
    4238:	9f 67       	ori	r25, 0x7F	; 127
    423a:	80 e8       	ldi	r24, 0x80	; 128
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	60 e0       	ldi	r22, 0x00	; 0
    4240:	08 95       	ret

00004242 <__fp_nan>:
    4242:	9f ef       	ldi	r25, 0xFF	; 255
    4244:	80 ec       	ldi	r24, 0xC0	; 192
    4246:	08 95       	ret

00004248 <__fp_pscA>:
    4248:	00 24       	eor	r0, r0
    424a:	0a 94       	dec	r0
    424c:	16 16       	cp	r1, r22
__fp_pscA():
    424e:	17 06       	cpc	r1, r23
    4250:	18 06       	cpc	r1, r24
    4252:	09 06       	cpc	r0, r25
    4254:	08 95       	ret

00004256 <__fp_pscB>:
__fp_pscB():
    4256:	00 24       	eor	r0, r0
    4258:	0a 94       	dec	r0
    425a:	12 16       	cp	r1, r18
    425c:	13 06       	cpc	r1, r19
    425e:	14 06       	cpc	r1, r20
    4260:	05 06       	cpc	r0, r21
    4262:	08 95       	ret

00004264 <__fp_round>:
__fp_round():
    4264:	09 2e       	mov	r0, r25
    4266:	03 94       	inc	r0
    4268:	00 0c       	add	r0, r0
    426a:	11 f4       	brne	.+4      	; 0x4270 <__fp_round+0xc>
    426c:	88 23       	and	r24, r24
    426e:	52 f0       	brmi	.+20     	; 0x4284 <__fp_round+0x20>
    4270:	bb 0f       	add	r27, r27
    4272:	40 f4       	brcc	.+16     	; 0x4284 <__fp_round+0x20>
    4274:	bf 2b       	or	r27, r31
    4276:	11 f4       	brne	.+4      	; 0x427c <__fp_round+0x18>
    4278:	60 ff       	sbrs	r22, 0
    427a:	04 c0       	rjmp	.+8      	; 0x4284 <__fp_round+0x20>
    427c:	6f 5f       	subi	r22, 0xFF	; 255
    427e:	7f 4f       	sbci	r23, 0xFF	; 255
    4280:	8f 4f       	sbci	r24, 0xFF	; 255
    4282:	9f 4f       	sbci	r25, 0xFF	; 255
    4284:	08 95       	ret

00004286 <__fp_split3>:
__fp_split3():
    4286:	57 fd       	sbrc	r21, 7
    4288:	90 58       	subi	r25, 0x80	; 128
    428a:	44 0f       	add	r20, r20
    428c:	55 1f       	adc	r21, r21
    428e:	59 f0       	breq	.+22     	; 0x42a6 <__fp_splitA+0x10>
    4290:	5f 3f       	cpi	r21, 0xFF	; 255
    4292:	71 f0       	breq	.+28     	; 0x42b0 <__fp_splitA+0x1a>
    4294:	47 95       	ror	r20

00004296 <__fp_splitA>:
    4296:	88 0f       	add	r24, r24
    4298:	97 fb       	bst	r25, 7
    429a:	99 1f       	adc	r25, r25
    429c:	61 f0       	breq	.+24     	; 0x42b6 <__fp_splitA+0x20>
    429e:	9f 3f       	cpi	r25, 0xFF	; 255
    42a0:	79 f0       	breq	.+30     	; 0x42c0 <__fp_splitA+0x2a>
    42a2:	87 95       	ror	r24
    42a4:	08 95       	ret
    42a6:	12 16       	cp	r1, r18
    42a8:	13 06       	cpc	r1, r19
    42aa:	14 06       	cpc	r1, r20
    42ac:	55 1f       	adc	r21, r21
    42ae:	f2 cf       	rjmp	.-28     	; 0x4294 <__fp_split3+0xe>
    42b0:	46 95       	lsr	r20
    42b2:	f1 df       	rcall	.-30     	; 0x4296 <__fp_splitA>
    42b4:	08 c0       	rjmp	.+16     	; 0x42c6 <__fp_splitA+0x30>
    42b6:	16 16       	cp	r1, r22
    42b8:	17 06       	cpc	r1, r23
    42ba:	18 06       	cpc	r1, r24
    42bc:	99 1f       	adc	r25, r25
    42be:	f1 cf       	rjmp	.-30     	; 0x42a2 <__fp_splitA+0xc>
    42c0:	86 95       	lsr	r24
    42c2:	71 05       	cpc	r23, r1
    42c4:	61 05       	cpc	r22, r1
    42c6:	08 94       	sec
    42c8:	08 95       	ret

000042ca <__fp_zero>:
__fp_zero():
    42ca:	e8 94       	clt

000042cc <__fp_szero>:
    42cc:	bb 27       	eor	r27, r27
    42ce:	66 27       	eor	r22, r22
    42d0:	77 27       	eor	r23, r23
    42d2:	cb 01       	movw	r24, r22
    42d4:	97 f9       	bld	r25, 7
    42d6:	08 95       	ret

000042d8 <eeprom_read_byte>:
eeprom_read_byte():
    42d8:	e1 99       	sbic	0x1c, 1	; 28
    42da:	fe cf       	rjmp	.-4      	; 0x42d8 <eeprom_read_byte>
    42dc:	9f bb       	out	0x1f, r25	; 31
    42de:	8e bb       	out	0x1e, r24	; 30
    42e0:	e0 9a       	sbi	0x1c, 0	; 28
    42e2:	99 27       	eor	r25, r25
    42e4:	8d b3       	in	r24, 0x1d	; 29
    42e6:	08 95       	ret

000042e8 <eeprom_write_byte>:
eeprom_write_byte():
    42e8:	26 2f       	mov	r18, r22

000042ea <eeprom_write_r18>:
    42ea:	e1 99       	sbic	0x1c, 1	; 28
    42ec:	fe cf       	rjmp	.-4      	; 0x42ea <eeprom_write_r18>
    42ee:	9f bb       	out	0x1f, r25	; 31
    42f0:	8e bb       	out	0x1e, r24	; 30
    42f2:	2d bb       	out	0x1d, r18	; 29
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	e2 9a       	sbi	0x1c, 2	; 28
    42fa:	e1 9a       	sbi	0x1c, 1	; 28
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	01 96       	adiw	r24, 0x01	; 1
    4300:	08 95       	ret

00004302 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    4302:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    4304:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    4306:	1e f4       	brtc	.+6      	; 0x430e <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    4308:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    430a:	0e 94 98 21 	call	0x4330	; 0x4330 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    430e:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    4310:	07 d0       	rcall	.+14     	; 0x4320 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    4312:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    4316:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    4318:	03 d0       	rcall	.+6      	; 0x4320 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    431a:	4e f4       	brtc	.+18     	; 0x432e <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    431c:	0c 94 98 21 	jmp	0x4330	; 0x4330 <__negsi2>

00004320 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    4320:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    4322:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    4324:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    4326:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    4328:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    432a:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    432c:	5f 4f       	sbci	r21, 0xFF	; 255

0000432e <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    432e:	08 95       	ret

00004330 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    4330:	90 95       	com	r25
    4332:	80 95       	com	r24
    4334:	70 95       	com	r23
    4336:	61 95       	neg	r22
    4338:	7f 4f       	sbci	r23, 0xFF	; 255
    433a:	8f 4f       	sbci	r24, 0xFF	; 255
    433c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    433e:	08 95       	ret

00004340 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    4340:	0e 94 0c 22 	call	0x4418	; 0x4418 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    4344:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4346:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4348:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    434a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    434c:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    434e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4350:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    4352:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    4354:	08 95       	ret

00004356 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    4356:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    4358:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__muluhisi3>

0000435c <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    435c:	0e 94 a0 21 	call	0x4340	; 0x4340 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    4360:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    4362:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    4364:	08 95       	ret

00004366 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    4366:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    4368:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    436a:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    436c:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    436e:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    4370:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    4372:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    4374:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    4376:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    4378:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    437a:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    437c:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    437e:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    4380:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    4382:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    4384:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    4386:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    4388:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    438a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    438c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    438e:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    4390:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    4392:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    4394:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    4396:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    4398:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    439a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    439c:	09 94       	ijmp

0000439e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    439e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    43a0:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    43a2:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    43a4:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    43a6:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    43a8:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    43aa:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    43ac:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    43ae:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    43b0:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    43b2:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    43b4:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    43b6:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    43b8:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    43ba:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    43bc:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    43be:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    43c0:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    43c2:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    43c4:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    43c6:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    43c8:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    43ca:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    43cc:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    43ce:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    43d0:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    43d2:	08 95       	ret

000043d4 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    43d4:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    43d6:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    43d8:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    43da:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    43dc:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    43de:	0d c0       	rjmp	.+26     	; 0x43fa <__udivmodsi4_ep>

000043e0 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    43e0:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    43e2:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    43e4:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    43e6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    43e8:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    43ea:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    43ec:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    43ee:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    43f0:	20 f0       	brcs	.+8      	; 0x43fa <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    43f2:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    43f4:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    43f6:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    43f8:	f5 0b       	sbc	r31, r21

000043fa <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    43fa:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    43fc:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    43fe:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4400:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4402:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4404:	69 f7       	brne	.-38     	; 0x43e0 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4406:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    4408:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    440a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    440c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    440e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4410:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4412:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4414:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4416:	08 95       	ret

00004418 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    4418:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    441a:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    441c:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    441e:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    4420:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    4422:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    4424:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    4426:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    4428:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    442a:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    442c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    442e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    4430:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    4432:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    4434:	08 95       	ret

00004436 <__subsf3>:
__subsf3():
    4436:	50 58       	subi	r21, 0x80	; 128

00004438 <__addsf3>:
    4438:	bb 27       	eor	r27, r27
    443a:	aa 27       	eor	r26, r26
    443c:	0e 94 33 22 	call	0x4466	; 0x4466 <__addsf3x>
    4440:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__fp_round>
__addsf3():
    4444:	0e 94 24 21 	call	0x4248	; 0x4248 <__fp_pscA>
    4448:	38 f0       	brcs	.+14     	; 0x4458 <__addsf3+0x20>
    444a:	0e 94 2b 21 	call	0x4256	; 0x4256 <__fp_pscB>
    444e:	20 f0       	brcs	.+8      	; 0x4458 <__addsf3+0x20>
    4450:	39 f4       	brne	.+14     	; 0x4460 <__addsf3+0x28>
    4452:	9f 3f       	cpi	r25, 0xFF	; 255
    4454:	19 f4       	brne	.+6      	; 0x445c <__addsf3+0x24>
    4456:	26 f4       	brtc	.+8      	; 0x4460 <__addsf3+0x28>
    4458:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__fp_nan>
    445c:	0e f4       	brtc	.+2      	; 0x4460 <__addsf3+0x28>
    445e:	e0 95       	com	r30
    4460:	e7 fb       	bst	r30, 7
    4462:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__fp_inf>

00004466 <__addsf3x>:
__addsf3x():
    4466:	e9 2f       	mov	r30, r25
    4468:	0e 94 43 21 	call	0x4286	; 0x4286 <__fp_split3>
    446c:	58 f3       	brcs	.-42     	; 0x4444 <__addsf3+0xc>
    446e:	ba 17       	cp	r27, r26
    4470:	62 07       	cpc	r22, r18
    4472:	73 07       	cpc	r23, r19
    4474:	84 07       	cpc	r24, r20
    4476:	95 07       	cpc	r25, r21
    4478:	20 f0       	brcs	.+8      	; 0x4482 <__addsf3x+0x1c>
    447a:	79 f4       	brne	.+30     	; 0x449a <__addsf3x+0x34>
    447c:	a6 f5       	brtc	.+104    	; 0x44e6 <__addsf3x+0x80>
    447e:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__fp_zero>
    4482:	0e f4       	brtc	.+2      	; 0x4486 <__addsf3x+0x20>
    4484:	e0 95       	com	r30
    4486:	0b 2e       	mov	r0, r27
    4488:	ba 2f       	mov	r27, r26
    448a:	a0 2d       	mov	r26, r0
    448c:	0b 01       	movw	r0, r22
    448e:	b9 01       	movw	r22, r18
    4490:	90 01       	movw	r18, r0
    4492:	0c 01       	movw	r0, r24
    4494:	ca 01       	movw	r24, r20
    4496:	a0 01       	movw	r20, r0
    4498:	11 24       	eor	r1, r1
    449a:	ff 27       	eor	r31, r31
    449c:	59 1b       	sub	r21, r25
    449e:	99 f0       	breq	.+38     	; 0x44c6 <__addsf3x+0x60>
    44a0:	59 3f       	cpi	r21, 0xF9	; 249
    44a2:	50 f4       	brcc	.+20     	; 0x44b8 <__addsf3x+0x52>
    44a4:	50 3e       	cpi	r21, 0xE0	; 224
    44a6:	68 f1       	brcs	.+90     	; 0x4502 <__addsf3x+0x9c>
    44a8:	1a 16       	cp	r1, r26
    44aa:	f0 40       	sbci	r31, 0x00	; 0
    44ac:	a2 2f       	mov	r26, r18
    44ae:	23 2f       	mov	r18, r19
    44b0:	34 2f       	mov	r19, r20
    44b2:	44 27       	eor	r20, r20
    44b4:	58 5f       	subi	r21, 0xF8	; 248
    44b6:	f3 cf       	rjmp	.-26     	; 0x449e <__addsf3x+0x38>
    44b8:	46 95       	lsr	r20
    44ba:	37 95       	ror	r19
    44bc:	27 95       	ror	r18
    44be:	a7 95       	ror	r26
    44c0:	f0 40       	sbci	r31, 0x00	; 0
    44c2:	53 95       	inc	r21
    44c4:	c9 f7       	brne	.-14     	; 0x44b8 <__addsf3x+0x52>
    44c6:	7e f4       	brtc	.+30     	; 0x44e6 <__addsf3x+0x80>
    44c8:	1f 16       	cp	r1, r31
    44ca:	ba 0b       	sbc	r27, r26
    44cc:	62 0b       	sbc	r22, r18
    44ce:	73 0b       	sbc	r23, r19
    44d0:	84 0b       	sbc	r24, r20
    44d2:	ba f0       	brmi	.+46     	; 0x4502 <__addsf3x+0x9c>
    44d4:	91 50       	subi	r25, 0x01	; 1
    44d6:	a1 f0       	breq	.+40     	; 0x4500 <__addsf3x+0x9a>
    44d8:	ff 0f       	add	r31, r31
    44da:	bb 1f       	adc	r27, r27
    44dc:	66 1f       	adc	r22, r22
    44de:	77 1f       	adc	r23, r23
    44e0:	88 1f       	adc	r24, r24
    44e2:	c2 f7       	brpl	.-16     	; 0x44d4 <__addsf3x+0x6e>
    44e4:	0e c0       	rjmp	.+28     	; 0x4502 <__addsf3x+0x9c>
    44e6:	ba 0f       	add	r27, r26
    44e8:	62 1f       	adc	r22, r18
    44ea:	73 1f       	adc	r23, r19
    44ec:	84 1f       	adc	r24, r20
    44ee:	48 f4       	brcc	.+18     	; 0x4502 <__addsf3x+0x9c>
    44f0:	87 95       	ror	r24
    44f2:	77 95       	ror	r23
    44f4:	67 95       	ror	r22
    44f6:	b7 95       	ror	r27
    44f8:	f7 95       	ror	r31
    44fa:	9e 3f       	cpi	r25, 0xFE	; 254
    44fc:	08 f0       	brcs	.+2      	; 0x4500 <__addsf3x+0x9a>
    44fe:	b0 cf       	rjmp	.-160    	; 0x4460 <__addsf3+0x28>
    4500:	93 95       	inc	r25
    4502:	88 0f       	add	r24, r24
    4504:	08 f0       	brcs	.+2      	; 0x4508 <__addsf3x+0xa2>
    4506:	99 27       	eor	r25, r25
    4508:	ee 0f       	add	r30, r30
    450a:	97 95       	ror	r25
    450c:	87 95       	ror	r24
    450e:	08 95       	ret

00004510 <__divsf3>:
    4510:	0e 94 9c 22 	call	0x4538	; 0x4538 <__divsf3x>
    4514:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__fp_round>
    4518:	0e 94 2b 21 	call	0x4256	; 0x4256 <__fp_pscB>
    451c:	58 f0       	brcs	.+22     	; 0x4534 <__divsf3+0x24>
    451e:	0e 94 24 21 	call	0x4248	; 0x4248 <__fp_pscA>
    4522:	40 f0       	brcs	.+16     	; 0x4534 <__divsf3+0x24>
    4524:	29 f4       	brne	.+10     	; 0x4530 <__divsf3+0x20>
    4526:	5f 3f       	cpi	r21, 0xFF	; 255
    4528:	29 f0       	breq	.+10     	; 0x4534 <__divsf3+0x24>
    452a:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__fp_inf>
    452e:	51 11       	cpse	r21, r1
    4530:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__fp_szero>
__divsf3():
    4534:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__fp_nan>

00004538 <__divsf3x>:
__divsf3x():
    4538:	0e 94 43 21 	call	0x4286	; 0x4286 <__fp_split3>
    453c:	68 f3       	brcs	.-38     	; 0x4518 <__divsf3+0x8>

0000453e <__divsf3_pse>:
    453e:	99 23       	and	r25, r25
    4540:	b1 f3       	breq	.-20     	; 0x452e <__divsf3+0x1e>
    4542:	55 23       	and	r21, r21
    4544:	91 f3       	breq	.-28     	; 0x452a <__divsf3+0x1a>
    4546:	95 1b       	sub	r25, r21
    4548:	55 0b       	sbc	r21, r21
    454a:	bb 27       	eor	r27, r27
    454c:	aa 27       	eor	r26, r26
    454e:	62 17       	cp	r22, r18
    4550:	73 07       	cpc	r23, r19
    4552:	84 07       	cpc	r24, r20
    4554:	38 f0       	brcs	.+14     	; 0x4564 <__divsf3_pse+0x26>
    4556:	9f 5f       	subi	r25, 0xFF	; 255
    4558:	5f 4f       	sbci	r21, 0xFF	; 255
    455a:	22 0f       	add	r18, r18
    455c:	33 1f       	adc	r19, r19
    455e:	44 1f       	adc	r20, r20
    4560:	aa 1f       	adc	r26, r26
    4562:	a9 f3       	breq	.-22     	; 0x454e <__divsf3_pse+0x10>
    4564:	35 d0       	rcall	.+106    	; 0x45d0 <__divsf3_pse+0x92>
    4566:	0e 2e       	mov	r0, r30
    4568:	3a f0       	brmi	.+14     	; 0x4578 <__divsf3_pse+0x3a>
    456a:	e0 e8       	ldi	r30, 0x80	; 128
    456c:	32 d0       	rcall	.+100    	; 0x45d2 <__divsf3_pse+0x94>
    456e:	91 50       	subi	r25, 0x01	; 1
    4570:	50 40       	sbci	r21, 0x00	; 0
    4572:	e6 95       	lsr	r30
    4574:	00 1c       	adc	r0, r0
    4576:	ca f7       	brpl	.-14     	; 0x456a <__divsf3_pse+0x2c>
    4578:	2b d0       	rcall	.+86     	; 0x45d0 <__divsf3_pse+0x92>
    457a:	fe 2f       	mov	r31, r30
    457c:	29 d0       	rcall	.+82     	; 0x45d0 <__divsf3_pse+0x92>
    457e:	66 0f       	add	r22, r22
    4580:	77 1f       	adc	r23, r23
    4582:	88 1f       	adc	r24, r24
    4584:	bb 1f       	adc	r27, r27
    4586:	26 17       	cp	r18, r22
    4588:	37 07       	cpc	r19, r23
    458a:	48 07       	cpc	r20, r24
    458c:	ab 07       	cpc	r26, r27
    458e:	b0 e8       	ldi	r27, 0x80	; 128
    4590:	09 f0       	breq	.+2      	; 0x4594 <__divsf3_pse+0x56>
    4592:	bb 0b       	sbc	r27, r27
    4594:	80 2d       	mov	r24, r0
    4596:	bf 01       	movw	r22, r30
    4598:	ff 27       	eor	r31, r31
    459a:	93 58       	subi	r25, 0x83	; 131
    459c:	5f 4f       	sbci	r21, 0xFF	; 255
    459e:	3a f0       	brmi	.+14     	; 0x45ae <__divsf3_pse+0x70>
    45a0:	9e 3f       	cpi	r25, 0xFE	; 254
    45a2:	51 05       	cpc	r21, r1
    45a4:	78 f0       	brcs	.+30     	; 0x45c4 <__divsf3_pse+0x86>
    45a6:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__fp_inf>
    45aa:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__fp_szero>
    45ae:	5f 3f       	cpi	r21, 0xFF	; 255
    45b0:	e4 f3       	brlt	.-8      	; 0x45aa <__divsf3_pse+0x6c>
    45b2:	98 3e       	cpi	r25, 0xE8	; 232
    45b4:	d4 f3       	brlt	.-12     	; 0x45aa <__divsf3_pse+0x6c>
    45b6:	86 95       	lsr	r24
    45b8:	77 95       	ror	r23
    45ba:	67 95       	ror	r22
    45bc:	b7 95       	ror	r27
    45be:	f7 95       	ror	r31
    45c0:	9f 5f       	subi	r25, 0xFF	; 255
    45c2:	c9 f7       	brne	.-14     	; 0x45b6 <__divsf3_pse+0x78>
    45c4:	88 0f       	add	r24, r24
    45c6:	91 1d       	adc	r25, r1
    45c8:	96 95       	lsr	r25
    45ca:	87 95       	ror	r24
    45cc:	97 f9       	bld	r25, 7
    45ce:	08 95       	ret
    45d0:	e1 e0       	ldi	r30, 0x01	; 1
    45d2:	66 0f       	add	r22, r22
    45d4:	77 1f       	adc	r23, r23
    45d6:	88 1f       	adc	r24, r24
    45d8:	bb 1f       	adc	r27, r27
    45da:	62 17       	cp	r22, r18
    45dc:	73 07       	cpc	r23, r19
    45de:	84 07       	cpc	r24, r20
    45e0:	ba 07       	cpc	r27, r26
    45e2:	20 f0       	brcs	.+8      	; 0x45ec <__divsf3_pse+0xae>
    45e4:	62 1b       	sub	r22, r18
    45e6:	73 0b       	sbc	r23, r19
    45e8:	84 0b       	sbc	r24, r20
    45ea:	ba 0b       	sbc	r27, r26
    45ec:	ee 1f       	adc	r30, r30
    45ee:	88 f7       	brcc	.-30     	; 0x45d2 <__divsf3_pse+0x94>
    45f0:	e0 95       	com	r30
    45f2:	08 95       	ret

000045f4 <__fixsfsi>:
    45f4:	0e 94 01 23 	call	0x4602	; 0x4602 <__fixunssfsi>
    45f8:	68 94       	set
    45fa:	b1 11       	cpse	r27, r1
    45fc:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__fp_szero>
    4600:	08 95       	ret

00004602 <__fixunssfsi>:
    4602:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fp_splitA>
    4606:	88 f0       	brcs	.+34     	; 0x462a <__fixunssfsi+0x28>
    4608:	9f 57       	subi	r25, 0x7F	; 127
    460a:	98 f0       	brcs	.+38     	; 0x4632 <__fixunssfsi+0x30>
    460c:	b9 2f       	mov	r27, r25
    460e:	99 27       	eor	r25, r25
    4610:	b7 51       	subi	r27, 0x17	; 23
    4612:	b0 f0       	brcs	.+44     	; 0x4640 <__fixunssfsi+0x3e>
__fixunssfsi():
    4614:	e1 f0       	breq	.+56     	; 0x464e <__fixunssfsi+0x4c>
    4616:	66 0f       	add	r22, r22
    4618:	77 1f       	adc	r23, r23
    461a:	88 1f       	adc	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	1a f0       	brmi	.+6      	; 0x4626 <__fixunssfsi+0x24>
    4620:	ba 95       	dec	r27
    4622:	c9 f7       	brne	.-14     	; 0x4616 <__fixunssfsi+0x14>
    4624:	14 c0       	rjmp	.+40     	; 0x464e <__fixunssfsi+0x4c>
    4626:	b1 30       	cpi	r27, 0x01	; 1
    4628:	91 f0       	breq	.+36     	; 0x464e <__fixunssfsi+0x4c>
    462a:	0e 94 65 21 	call	0x42ca	; 0x42ca <__fp_zero>
    462e:	b1 e0       	ldi	r27, 0x01	; 1
    4630:	08 95       	ret
    4632:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__fp_zero>
    4636:	67 2f       	mov	r22, r23
    4638:	78 2f       	mov	r23, r24
    463a:	88 27       	eor	r24, r24
    463c:	b8 5f       	subi	r27, 0xF8	; 248
    463e:	39 f0       	breq	.+14     	; 0x464e <__fixunssfsi+0x4c>
    4640:	b9 3f       	cpi	r27, 0xF9	; 249
    4642:	cc f3       	brlt	.-14     	; 0x4636 <__fixunssfsi+0x34>
    4644:	86 95       	lsr	r24
    4646:	77 95       	ror	r23
    4648:	67 95       	ror	r22
    464a:	b3 95       	inc	r27
    464c:	d9 f7       	brne	.-10     	; 0x4644 <__fixunssfsi+0x42>
    464e:	3e f4       	brtc	.+14     	; 0x465e <__fixunssfsi+0x5c>
    4650:	90 95       	com	r25
    4652:	80 95       	com	r24
    4654:	70 95       	com	r23
    4656:	61 95       	neg	r22
    4658:	7f 4f       	sbci	r23, 0xFF	; 255
    465a:	8f 4f       	sbci	r24, 0xFF	; 255
    465c:	9f 4f       	sbci	r25, 0xFF	; 255
    465e:	08 95       	ret

00004660 <__gesf2>:
__gesf2():
    4660:	0e 94 87 20 	call	0x410e	; 0x410e <__fp_cmp>
    4664:	08 f4       	brcc	.+2      	; 0x4668 <__gesf2+0x8>
    4666:	8f ef       	ldi	r24, 0xFF	; 255
    4668:	08 95       	ret

0000466a <__unordsf2>:
__unordsf2():
    466a:	0e 94 87 20 	call	0x410e	; 0x410e <__fp_cmp>
    466e:	88 0b       	sbc	r24, r24
    4670:	99 0b       	sbc	r25, r25
    4672:	08 95       	ret

00004674 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    4674:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    4676:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    4678:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    467a:	0e 94 a0 21 	call	0x4340	; 0x4340 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    467e:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    4680:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    4682:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    4684:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    4686:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    4688:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    468a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    468c:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    468e:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    4690:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    4692:	08 95       	ret

00004694 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    4694:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    4696:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    4698:	04 c0       	rjmp	.+8      	; 0x46a2 <__udivmodqi4_ep>

0000469a <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    469a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    469c:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    469e:	08 f0       	brcs	.+2      	; 0x46a2 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    46a0:	96 1b       	sub	r25, r22

000046a2 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    46a2:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    46a4:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    46a6:	c9 f7       	brne	.-14     	; 0x469a <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    46a8:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    46aa:	08 95       	ret

000046ac <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    46ac:	0e 94 0c 22 	call	0x4418	; 0x4418 <__umulhisi3>

000046b0 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    46b0:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    46b2:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    46b4:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    46b6:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    46b8:	08 95       	ret

000046ba <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    46ba:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    46bc:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    46be:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    46c0:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    46c2:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    46c4:	09 94       	ijmp

000046c6 <malloc>:
malloc():
    46c6:	0f 93       	push	r16
    46c8:	1f 93       	push	r17
    46ca:	cf 93       	push	r28
    46cc:	df 93       	push	r29
    46ce:	82 30       	cpi	r24, 0x02	; 2
    46d0:	91 05       	cpc	r25, r1
    46d2:	10 f4       	brcc	.+4      	; 0x46d8 <malloc+0x12>
    46d4:	82 e0       	ldi	r24, 0x02	; 2
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	e0 91 2d 03 	lds	r30, 0x032D	; 0x80032d <__flp>
    46dc:	f0 91 2e 03 	lds	r31, 0x032E	; 0x80032e <__flp+0x1>
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	b0 e0       	ldi	r27, 0x00	; 0
    46e6:	a0 e0       	ldi	r26, 0x00	; 0
    46e8:	30 97       	sbiw	r30, 0x00	; 0
    46ea:	99 f4       	brne	.+38     	; 0x4712 <malloc+0x4c>
    46ec:	21 15       	cp	r18, r1
    46ee:	31 05       	cpc	r19, r1
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <malloc+0x2e>
    46f2:	4a c0       	rjmp	.+148    	; 0x4788 <malloc+0xc2>
    46f4:	28 1b       	sub	r18, r24
    46f6:	39 0b       	sbc	r19, r25
    46f8:	24 30       	cpi	r18, 0x04	; 4
    46fa:	31 05       	cpc	r19, r1
    46fc:	d8 f5       	brcc	.+118    	; 0x4774 <malloc+0xae>
    46fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4700:	9b 81       	ldd	r25, Y+3	; 0x03
    4702:	61 15       	cp	r22, r1
    4704:	71 05       	cpc	r23, r1
    4706:	89 f1       	breq	.+98     	; 0x476a <malloc+0xa4>
    4708:	fb 01       	movw	r30, r22
    470a:	93 83       	std	Z+3, r25	; 0x03
    470c:	82 83       	std	Z+2, r24	; 0x02
    470e:	fe 01       	movw	r30, r28
    4710:	11 c0       	rjmp	.+34     	; 0x4734 <malloc+0x6e>
    4712:	40 81       	ld	r20, Z
    4714:	51 81       	ldd	r21, Z+1	; 0x01
    4716:	02 81       	ldd	r16, Z+2	; 0x02
    4718:	13 81       	ldd	r17, Z+3	; 0x03
    471a:	48 17       	cp	r20, r24
    471c:	59 07       	cpc	r21, r25
    471e:	e0 f0       	brcs	.+56     	; 0x4758 <malloc+0x92>
    4720:	48 17       	cp	r20, r24
    4722:	59 07       	cpc	r21, r25
    4724:	99 f4       	brne	.+38     	; 0x474c <malloc+0x86>
    4726:	10 97       	sbiw	r26, 0x00	; 0
    4728:	61 f0       	breq	.+24     	; 0x4742 <malloc+0x7c>
    472a:	12 96       	adiw	r26, 0x02	; 2
    472c:	0c 93       	st	X, r16
    472e:	12 97       	sbiw	r26, 0x02	; 2
    4730:	13 96       	adiw	r26, 0x03	; 3
    4732:	1c 93       	st	X, r17
    4734:	32 96       	adiw	r30, 0x02	; 2
    4736:	cf 01       	movw	r24, r30
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	1f 91       	pop	r17
    473e:	0f 91       	pop	r16
    4740:	08 95       	ret
    4742:	00 93 2d 03 	sts	0x032D, r16	; 0x80032d <__flp>
    4746:	10 93 2e 03 	sts	0x032E, r17	; 0x80032e <__flp+0x1>
    474a:	f4 cf       	rjmp	.-24     	; 0x4734 <malloc+0x6e>
    474c:	21 15       	cp	r18, r1
    474e:	31 05       	cpc	r19, r1
    4750:	51 f0       	breq	.+20     	; 0x4766 <malloc+0xa0>
    4752:	42 17       	cp	r20, r18
    4754:	53 07       	cpc	r21, r19
    4756:	38 f0       	brcs	.+14     	; 0x4766 <malloc+0xa0>
    4758:	a9 01       	movw	r20, r18
    475a:	db 01       	movw	r26, r22
    475c:	9a 01       	movw	r18, r20
    475e:	bd 01       	movw	r22, r26
    4760:	df 01       	movw	r26, r30
    4762:	f8 01       	movw	r30, r16
    4764:	c1 cf       	rjmp	.-126    	; 0x46e8 <malloc+0x22>
    4766:	ef 01       	movw	r28, r30
    4768:	f9 cf       	rjmp	.-14     	; 0x475c <malloc+0x96>
    476a:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <__flp+0x1>
    476e:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <__flp>
    4772:	cd cf       	rjmp	.-102    	; 0x470e <malloc+0x48>
    4774:	fe 01       	movw	r30, r28
    4776:	e2 0f       	add	r30, r18
    4778:	f3 1f       	adc	r31, r19
    477a:	81 93       	st	Z+, r24
    477c:	91 93       	st	Z+, r25
    477e:	22 50       	subi	r18, 0x02	; 2
    4780:	31 09       	sbc	r19, r1
    4782:	39 83       	std	Y+1, r19	; 0x01
    4784:	28 83       	st	Y, r18
    4786:	d7 cf       	rjmp	.-82     	; 0x4736 <malloc+0x70>
    4788:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <__brkval>
    478c:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <__brkval+0x1>
    4790:	23 2b       	or	r18, r19
    4792:	41 f4       	brne	.+16     	; 0x47a4 <malloc+0xde>
    4794:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__malloc_heap_start>
    4798:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__malloc_heap_start+0x1>
    479c:	30 93 2c 03 	sts	0x032C, r19	; 0x80032c <__brkval+0x1>
    47a0:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <__brkval>
    47a4:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <__malloc_heap_end>
    47a8:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <__malloc_heap_end+0x1>
    47ac:	21 15       	cp	r18, r1
    47ae:	31 05       	cpc	r19, r1
    47b0:	41 f4       	brne	.+16     	; 0x47c2 <malloc+0xfc>
    47b2:	2d b7       	in	r18, 0x3d	; 61
    47b4:	3e b7       	in	r19, 0x3e	; 62
    47b6:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__malloc_margin>
    47ba:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__malloc_margin+0x1>
    47be:	24 1b       	sub	r18, r20
    47c0:	35 0b       	sbc	r19, r21
    47c2:	e0 91 2b 03 	lds	r30, 0x032B	; 0x80032b <__brkval>
    47c6:	f0 91 2c 03 	lds	r31, 0x032C	; 0x80032c <__brkval+0x1>
    47ca:	e2 17       	cp	r30, r18
    47cc:	f3 07       	cpc	r31, r19
    47ce:	a0 f4       	brcc	.+40     	; 0x47f8 <malloc+0x132>
    47d0:	2e 1b       	sub	r18, r30
    47d2:	3f 0b       	sbc	r19, r31
    47d4:	28 17       	cp	r18, r24
    47d6:	39 07       	cpc	r19, r25
    47d8:	78 f0       	brcs	.+30     	; 0x47f8 <malloc+0x132>
    47da:	ac 01       	movw	r20, r24
    47dc:	4e 5f       	subi	r20, 0xFE	; 254
    47de:	5f 4f       	sbci	r21, 0xFF	; 255
    47e0:	24 17       	cp	r18, r20
    47e2:	35 07       	cpc	r19, r21
    47e4:	48 f0       	brcs	.+18     	; 0x47f8 <malloc+0x132>
    47e6:	4e 0f       	add	r20, r30
    47e8:	5f 1f       	adc	r21, r31
    47ea:	50 93 2c 03 	sts	0x032C, r21	; 0x80032c <__brkval+0x1>
    47ee:	40 93 2b 03 	sts	0x032B, r20	; 0x80032b <__brkval>
    47f2:	81 93       	st	Z+, r24
    47f4:	91 93       	st	Z+, r25
    47f6:	9f cf       	rjmp	.-194    	; 0x4736 <malloc+0x70>
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	e0 e0       	ldi	r30, 0x00	; 0
    47fc:	9c cf       	rjmp	.-200    	; 0x4736 <malloc+0x70>

000047fe <free>:
free():
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	00 97       	sbiw	r24, 0x00	; 0
    4804:	e9 f0       	breq	.+58     	; 0x4840 <free+0x42>
    4806:	fc 01       	movw	r30, r24
    4808:	32 97       	sbiw	r30, 0x02	; 2
    480a:	13 82       	std	Z+3, r1	; 0x03
    480c:	12 82       	std	Z+2, r1	; 0x02
    480e:	a0 91 2d 03 	lds	r26, 0x032D	; 0x80032d <__flp>
    4812:	b0 91 2e 03 	lds	r27, 0x032E	; 0x80032e <__flp+0x1>
    4816:	ed 01       	movw	r28, r26
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	10 97       	sbiw	r26, 0x00	; 0
    481e:	a1 f4       	brne	.+40     	; 0x4848 <free+0x4a>
    4820:	20 81       	ld	r18, Z
    4822:	31 81       	ldd	r19, Z+1	; 0x01
    4824:	82 0f       	add	r24, r18
    4826:	93 1f       	adc	r25, r19
    4828:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <__brkval>
    482c:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <__brkval+0x1>
    4830:	28 17       	cp	r18, r24
    4832:	39 07       	cpc	r19, r25
    4834:	09 f0       	breq	.+2      	; 0x4838 <free+0x3a>
    4836:	61 c0       	rjmp	.+194    	; 0x48fa <free+0xfc>
    4838:	f0 93 2c 03 	sts	0x032C, r31	; 0x80032c <__brkval+0x1>
    483c:	e0 93 2b 03 	sts	0x032B, r30	; 0x80032b <__brkval>
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	08 95       	ret
    4846:	ea 01       	movw	r28, r20
    4848:	ce 17       	cp	r28, r30
    484a:	df 07       	cpc	r29, r31
    484c:	e8 f5       	brcc	.+122    	; 0x48c8 <free+0xca>
    484e:	4a 81       	ldd	r20, Y+2	; 0x02
    4850:	5b 81       	ldd	r21, Y+3	; 0x03
    4852:	9e 01       	movw	r18, r28
    4854:	41 15       	cp	r20, r1
    4856:	51 05       	cpc	r21, r1
    4858:	b1 f7       	brne	.-20     	; 0x4846 <free+0x48>
    485a:	e9 01       	movw	r28, r18
    485c:	fb 83       	std	Y+3, r31	; 0x03
    485e:	ea 83       	std	Y+2, r30	; 0x02
    4860:	49 91       	ld	r20, Y+
    4862:	59 91       	ld	r21, Y+
    4864:	c4 0f       	add	r28, r20
    4866:	d5 1f       	adc	r29, r21
    4868:	ec 17       	cp	r30, r28
    486a:	fd 07       	cpc	r31, r29
    486c:	61 f4       	brne	.+24     	; 0x4886 <free+0x88>
    486e:	80 81       	ld	r24, Z
    4870:	91 81       	ldd	r25, Z+1	; 0x01
    4872:	02 96       	adiw	r24, 0x02	; 2
    4874:	84 0f       	add	r24, r20
    4876:	95 1f       	adc	r25, r21
    4878:	e9 01       	movw	r28, r18
    487a:	99 83       	std	Y+1, r25	; 0x01
    487c:	88 83       	st	Y, r24
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	9b 83       	std	Y+3, r25	; 0x03
    4884:	8a 83       	std	Y+2, r24	; 0x02
    4886:	f0 e0       	ldi	r31, 0x00	; 0
    4888:	e0 e0       	ldi	r30, 0x00	; 0
    488a:	12 96       	adiw	r26, 0x02	; 2
    488c:	8d 91       	ld	r24, X+
    488e:	9c 91       	ld	r25, X
    4890:	13 97       	sbiw	r26, 0x03	; 3
    4892:	00 97       	sbiw	r24, 0x00	; 0
    4894:	b9 f5       	brne	.+110    	; 0x4904 <free+0x106>
    4896:	2d 91       	ld	r18, X+
    4898:	3c 91       	ld	r19, X
    489a:	11 97       	sbiw	r26, 0x01	; 1
    489c:	cd 01       	movw	r24, r26
    489e:	02 96       	adiw	r24, 0x02	; 2
    48a0:	82 0f       	add	r24, r18
    48a2:	93 1f       	adc	r25, r19
    48a4:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <__brkval>
    48a8:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <__brkval+0x1>
    48ac:	28 17       	cp	r18, r24
    48ae:	39 07       	cpc	r19, r25
    48b0:	39 f6       	brne	.-114    	; 0x4840 <free+0x42>
    48b2:	30 97       	sbiw	r30, 0x00	; 0
    48b4:	51 f5       	brne	.+84     	; 0x490a <free+0x10c>
    48b6:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <__flp+0x1>
    48ba:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <__flp>
    48be:	b0 93 2c 03 	sts	0x032C, r27	; 0x80032c <__brkval+0x1>
    48c2:	a0 93 2b 03 	sts	0x032B, r26	; 0x80032b <__brkval>
    48c6:	bc cf       	rjmp	.-136    	; 0x4840 <free+0x42>
    48c8:	d3 83       	std	Z+3, r29	; 0x03
    48ca:	c2 83       	std	Z+2, r28	; 0x02
    48cc:	40 81       	ld	r20, Z
    48ce:	51 81       	ldd	r21, Z+1	; 0x01
    48d0:	84 0f       	add	r24, r20
    48d2:	95 1f       	adc	r25, r21
    48d4:	c8 17       	cp	r28, r24
    48d6:	d9 07       	cpc	r29, r25
    48d8:	61 f4       	brne	.+24     	; 0x48f2 <free+0xf4>
    48da:	4e 5f       	subi	r20, 0xFE	; 254
    48dc:	5f 4f       	sbci	r21, 0xFF	; 255
    48de:	88 81       	ld	r24, Y
    48e0:	99 81       	ldd	r25, Y+1	; 0x01
    48e2:	48 0f       	add	r20, r24
    48e4:	59 1f       	adc	r21, r25
    48e6:	51 83       	std	Z+1, r21	; 0x01
    48e8:	40 83       	st	Z, r20
    48ea:	8a 81       	ldd	r24, Y+2	; 0x02
    48ec:	9b 81       	ldd	r25, Y+3	; 0x03
    48ee:	93 83       	std	Z+3, r25	; 0x03
    48f0:	82 83       	std	Z+2, r24	; 0x02
    48f2:	21 15       	cp	r18, r1
    48f4:	31 05       	cpc	r19, r1
    48f6:	09 f0       	breq	.+2      	; 0x48fa <free+0xfc>
    48f8:	b0 cf       	rjmp	.-160    	; 0x485a <free+0x5c>
    48fa:	f0 93 2e 03 	sts	0x032E, r31	; 0x80032e <__flp+0x1>
    48fe:	e0 93 2d 03 	sts	0x032D, r30	; 0x80032d <__flp>
    4902:	9e cf       	rjmp	.-196    	; 0x4840 <free+0x42>
    4904:	fd 01       	movw	r30, r26
    4906:	dc 01       	movw	r26, r24
    4908:	c0 cf       	rjmp	.-128    	; 0x488a <free+0x8c>
    490a:	13 82       	std	Z+3, r1	; 0x03
    490c:	12 82       	std	Z+2, r1	; 0x02
    490e:	d7 cf       	rjmp	.-82     	; 0x48be <free+0xc0>

00004910 <realloc>:
realloc():
    4910:	b0 e0       	ldi	r27, 0x00	; 0
    4912:	a0 e0       	ldi	r26, 0x00	; 0
    4914:	ee e8       	ldi	r30, 0x8E	; 142
    4916:	f4 e2       	ldi	r31, 0x24	; 36
    4918:	0c 94 b5 21 	jmp	0x436a	; 0x436a <__prologue_saves__+0x4>
    491c:	8c 01       	movw	r16, r24
    491e:	00 97       	sbiw	r24, 0x00	; 0
    4920:	51 f4       	brne	.+20     	; 0x4936 <realloc+0x26>
    4922:	cb 01       	movw	r24, r22
    4924:	0e 94 63 23 	call	0x46c6	; 0x46c6 <malloc>
    4928:	8c 01       	movw	r16, r24
    492a:	c8 01       	movw	r24, r16
    492c:	cd b7       	in	r28, 0x3d	; 61
    492e:	de b7       	in	r29, 0x3e	; 62
    4930:	e0 e1       	ldi	r30, 0x10	; 16
    4932:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__epilogue_restores__+0x4>
    4936:	fc 01       	movw	r30, r24
    4938:	e6 0f       	add	r30, r22
    493a:	f7 1f       	adc	r31, r23
    493c:	9c 01       	movw	r18, r24
    493e:	22 50       	subi	r18, 0x02	; 2
    4940:	31 09       	sbc	r19, r1
    4942:	e2 17       	cp	r30, r18
    4944:	f3 07       	cpc	r31, r19
    4946:	08 f4       	brcc	.+2      	; 0x494a <realloc+0x3a>
    4948:	9d c0       	rjmp	.+314    	; 0x4a84 <realloc+0x174>
    494a:	d9 01       	movw	r26, r18
    494c:	cd 91       	ld	r28, X+
    494e:	dc 91       	ld	r29, X
    4950:	11 97       	sbiw	r26, 0x01	; 1
    4952:	c6 17       	cp	r28, r22
    4954:	d7 07       	cpc	r29, r23
    4956:	98 f0       	brcs	.+38     	; 0x497e <realloc+0x6e>
    4958:	c5 30       	cpi	r28, 0x05	; 5
    495a:	d1 05       	cpc	r29, r1
    495c:	30 f3       	brcs	.-52     	; 0x492a <realloc+0x1a>
    495e:	ce 01       	movw	r24, r28
    4960:	04 97       	sbiw	r24, 0x04	; 4
    4962:	86 17       	cp	r24, r22
    4964:	97 07       	cpc	r25, r23
    4966:	08 f3       	brcs	.-62     	; 0x492a <realloc+0x1a>
    4968:	c6 1b       	sub	r28, r22
    496a:	d7 0b       	sbc	r29, r23
    496c:	22 97       	sbiw	r28, 0x02	; 2
    496e:	c1 93       	st	Z+, r28
    4970:	d1 93       	st	Z+, r29
    4972:	6d 93       	st	X+, r22
    4974:	7c 93       	st	X, r23
    4976:	cf 01       	movw	r24, r30
    4978:	0e 94 ff 23 	call	0x47fe	; 0x47fe <free>
    497c:	d6 cf       	rjmp	.-84     	; 0x492a <realloc+0x1a>
    497e:	5b 01       	movw	r10, r22
    4980:	ac 1a       	sub	r10, r28
    4982:	bd 0a       	sbc	r11, r29
    4984:	4c 01       	movw	r8, r24
    4986:	8c 0e       	add	r8, r28
    4988:	9d 1e       	adc	r9, r29
    498a:	a0 91 2d 03 	lds	r26, 0x032D	; 0x80032d <__flp>
    498e:	b0 91 2e 03 	lds	r27, 0x032E	; 0x80032e <__flp+0x1>
    4992:	51 2c       	mov	r5, r1
    4994:	41 2c       	mov	r4, r1
    4996:	f1 2c       	mov	r15, r1
    4998:	e1 2c       	mov	r14, r1
    499a:	10 97       	sbiw	r26, 0x00	; 0
    499c:	31 f5       	brne	.+76     	; 0x49ea <realloc+0xda>
    499e:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <__brkval>
    49a2:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <__brkval+0x1>
    49a6:	88 15       	cp	r24, r8
    49a8:	99 05       	cpc	r25, r9
    49aa:	09 f0       	breq	.+2      	; 0x49ae <realloc+0x9e>
    49ac:	5c c0       	rjmp	.+184    	; 0x4a66 <realloc+0x156>
    49ae:	46 16       	cp	r4, r22
    49b0:	57 06       	cpc	r5, r23
    49b2:	08 f0       	brcs	.+2      	; 0x49b6 <realloc+0xa6>
    49b4:	58 c0       	rjmp	.+176    	; 0x4a66 <realloc+0x156>
    49b6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__malloc_heap_end>
    49ba:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__malloc_heap_end+0x1>
    49be:	00 97       	sbiw	r24, 0x00	; 0
    49c0:	41 f4       	brne	.+16     	; 0x49d2 <realloc+0xc2>
    49c2:	8d b7       	in	r24, 0x3d	; 61
    49c4:	9e b7       	in	r25, 0x3e	; 62
    49c6:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__malloc_margin>
    49ca:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__malloc_margin+0x1>
    49ce:	84 1b       	sub	r24, r20
    49d0:	95 0b       	sbc	r25, r21
    49d2:	e8 17       	cp	r30, r24
    49d4:	f9 07       	cpc	r31, r25
    49d6:	08 f0       	brcs	.+2      	; 0x49da <realloc+0xca>
    49d8:	55 c0       	rjmp	.+170    	; 0x4a84 <realloc+0x174>
    49da:	f0 93 2c 03 	sts	0x032C, r31	; 0x80032c <__brkval+0x1>
    49de:	e0 93 2b 03 	sts	0x032B, r30	; 0x80032b <__brkval>
    49e2:	f9 01       	movw	r30, r18
    49e4:	71 83       	std	Z+1, r23	; 0x01
    49e6:	60 83       	st	Z, r22
    49e8:	a0 cf       	rjmp	.-192    	; 0x492a <realloc+0x1a>
    49ea:	8d 91       	ld	r24, X+
    49ec:	9c 91       	ld	r25, X
    49ee:	11 97       	sbiw	r26, 0x01	; 1
    49f0:	12 96       	adiw	r26, 0x02	; 2
    49f2:	6c 90       	ld	r6, X
    49f4:	12 97       	sbiw	r26, 0x02	; 2
    49f6:	13 96       	adiw	r26, 0x03	; 3
    49f8:	7c 90       	ld	r7, X
    49fa:	13 97       	sbiw	r26, 0x03	; 3
    49fc:	a8 15       	cp	r26, r8
    49fe:	b9 05       	cpc	r27, r9
    4a00:	59 f5       	brne	.+86     	; 0x4a58 <realloc+0x148>
    4a02:	6c 01       	movw	r12, r24
    4a04:	42 e0       	ldi	r20, 0x02	; 2
    4a06:	c4 0e       	add	r12, r20
    4a08:	d1 1c       	adc	r13, r1
    4a0a:	ca 14       	cp	r12, r10
    4a0c:	db 04       	cpc	r13, r11
    4a0e:	20 f1       	brcs	.+72     	; 0x4a58 <realloc+0x148>
    4a10:	ac 01       	movw	r20, r24
    4a12:	4a 19       	sub	r20, r10
    4a14:	5b 09       	sbc	r21, r11
    4a16:	da 01       	movw	r26, r20
    4a18:	12 96       	adiw	r26, 0x02	; 2
    4a1a:	15 97       	sbiw	r26, 0x05	; 5
    4a1c:	80 f0       	brcs	.+32     	; 0x4a3e <realloc+0x12e>
    4a1e:	62 82       	std	Z+2, r6	; 0x02
    4a20:	73 82       	std	Z+3, r7	; 0x03
    4a22:	51 83       	std	Z+1, r21	; 0x01
    4a24:	40 83       	st	Z, r20
    4a26:	d9 01       	movw	r26, r18
    4a28:	6d 93       	st	X+, r22
    4a2a:	7c 93       	st	X, r23
    4a2c:	e1 14       	cp	r14, r1
    4a2e:	f1 04       	cpc	r15, r1
    4a30:	71 f0       	breq	.+28     	; 0x4a4e <realloc+0x13e>
    4a32:	d7 01       	movw	r26, r14
    4a34:	13 96       	adiw	r26, 0x03	; 3
    4a36:	fc 93       	st	X, r31
    4a38:	ee 93       	st	-X, r30
    4a3a:	12 97       	sbiw	r26, 0x02	; 2
    4a3c:	76 cf       	rjmp	.-276    	; 0x492a <realloc+0x1a>
    4a3e:	22 96       	adiw	r28, 0x02	; 2
    4a40:	8c 0f       	add	r24, r28
    4a42:	9d 1f       	adc	r25, r29
    4a44:	f9 01       	movw	r30, r18
    4a46:	91 83       	std	Z+1, r25	; 0x01
    4a48:	80 83       	st	Z, r24
    4a4a:	f3 01       	movw	r30, r6
    4a4c:	ef cf       	rjmp	.-34     	; 0x4a2c <realloc+0x11c>
    4a4e:	f0 93 2e 03 	sts	0x032E, r31	; 0x80032e <__flp+0x1>
    4a52:	e0 93 2d 03 	sts	0x032D, r30	; 0x80032d <__flp>
    4a56:	69 cf       	rjmp	.-302    	; 0x492a <realloc+0x1a>
    4a58:	48 16       	cp	r4, r24
    4a5a:	59 06       	cpc	r5, r25
    4a5c:	08 f4       	brcc	.+2      	; 0x4a60 <realloc+0x150>
    4a5e:	2c 01       	movw	r4, r24
    4a60:	7d 01       	movw	r14, r26
    4a62:	d3 01       	movw	r26, r6
    4a64:	9a cf       	rjmp	.-204    	; 0x499a <realloc+0x8a>
    4a66:	cb 01       	movw	r24, r22
    4a68:	0e 94 63 23 	call	0x46c6	; 0x46c6 <malloc>
    4a6c:	7c 01       	movw	r14, r24
    4a6e:	00 97       	sbiw	r24, 0x00	; 0
    4a70:	49 f0       	breq	.+18     	; 0x4a84 <realloc+0x174>
    4a72:	ae 01       	movw	r20, r28
    4a74:	b8 01       	movw	r22, r16
    4a76:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <memcpy>
    4a7a:	c8 01       	movw	r24, r16
    4a7c:	0e 94 ff 23 	call	0x47fe	; 0x47fe <free>
    4a80:	87 01       	movw	r16, r14
    4a82:	53 cf       	rjmp	.-346    	; 0x492a <realloc+0x1a>
    4a84:	10 e0       	ldi	r17, 0x00	; 0
    4a86:	00 e0       	ldi	r16, 0x00	; 0
    4a88:	50 cf       	rjmp	.-352    	; 0x492a <realloc+0x1a>

00004a8a <memcpy>:
memcpy():
    4a8a:	fb 01       	movw	r30, r22
    4a8c:	dc 01       	movw	r26, r24
    4a8e:	02 c0       	rjmp	.+4      	; 0x4a94 <memcpy+0xa>
    4a90:	01 90       	ld	r0, Z+
    4a92:	0d 92       	st	X+, r0
    4a94:	41 50       	subi	r20, 0x01	; 1
    4a96:	50 40       	sbci	r21, 0x00	; 0
    4a98:	d8 f7       	brcc	.-10     	; 0x4a90 <memcpy+0x6>
    4a9a:	08 95       	ret

00004a9c <strcmp>:
strcmp():
    4a9c:	fb 01       	movw	r30, r22
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	8d 91       	ld	r24, X+
    4aa2:	01 90       	ld	r0, Z+
    4aa4:	80 19       	sub	r24, r0
    4aa6:	01 10       	cpse	r0, r1
    4aa8:	d9 f3       	breq	.-10     	; 0x4aa0 <strcmp+0x4>
    4aaa:	99 0b       	sbc	r25, r25
    4aac:	08 95       	ret

00004aae <strcpy>:
strcpy():
    4aae:	fb 01       	movw	r30, r22
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	01 90       	ld	r0, Z+
    4ab4:	0d 92       	st	X+, r0
    4ab6:	00 20       	and	r0, r0
    4ab8:	e1 f7       	brne	.-8      	; 0x4ab2 <strcpy+0x4>
    4aba:	08 95       	ret

00004abc <strncmp>:
strncmp():
    4abc:	fb 01       	movw	r30, r22
    4abe:	dc 01       	movw	r26, r24
    4ac0:	41 50       	subi	r20, 0x01	; 1
    4ac2:	50 40       	sbci	r21, 0x00	; 0
    4ac4:	30 f0       	brcs	.+12     	; 0x4ad2 <strncmp+0x16>
    4ac6:	8d 91       	ld	r24, X+
    4ac8:	01 90       	ld	r0, Z+
    4aca:	80 19       	sub	r24, r0
    4acc:	19 f4       	brne	.+6      	; 0x4ad4 <strncmp+0x18>
    4ace:	00 20       	and	r0, r0
    4ad0:	b9 f7       	brne	.-18     	; 0x4ac0 <strncmp+0x4>
    4ad2:	88 1b       	sub	r24, r24
    4ad4:	99 0b       	sbc	r25, r25
    4ad6:	08 95       	ret

00004ad8 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    4ad8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    4ada:	c8 e8       	ldi	r28, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    4adc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    4ade:	04 c0       	rjmp	.+8      	; 0x4ae8 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    4ae0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    4ae2:	0e 94 5d 23 	call	0x46ba	; 0x46ba <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    4ae6:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    4ae8:	c9 38       	cpi	r28, 0x89	; 137
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    4aea:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    4aec:	c9 f7       	brne	.-14     	; 0x4ae0 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4aee:	f8 94       	cli

00004af0 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4af0:	ff cf       	rjmp	.-2      	; 0x4af0 <__stop_program>
